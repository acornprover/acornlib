from real import Real

structure Complex {
    re: Real
    im: Real
}

class Complex {
    let from_real: Real -> Complex = function(r: Real) {
        Complex.new(r, Real.0)
    }

    let 0: Complex = Complex.new(Real.0, Real.0)
    let 1: Complex = Complex.new(Real.1, Real.0)
    let i: Complex = Complex.new(Real.0, Real.1)

    define is_real(self) -> Bool {
        self.im = Real.0
    }

    define is_imaginary(self) -> Bool {
        self.re = Real.0 and self.im != Real.0
    }

    // Addition of complex numbers
    define add(self, other: Complex) -> Complex {
        Complex.new(self.re + other.re, self.im + other.im)
    }

    // Multiplication of complex numbers
    define mul(self, other: Complex) -> Complex {
        // (a + bi) * (c + di) = (ac - bd) + (ad + bc)i
        Complex.new(
            self.re * other.re - self.im * other.im,
            self.re * other.im + self.im * other.re
        )
    }

    // Complex conjugate
    define conj(self) -> Complex {
        Complex.new(self.re, -self.im)
    }

    // Absolute value squared (|z|Â²)
    define abs_squared(self) -> Real {
        self.re * self.re + self.im * self.im
    }
}

// Theorems for complex numbers

// Addition properties
theorem add_comm(a: Complex, b: Complex) { a + b = b + a } by {
    a.re + b.re = b.re + a.re
    a.im + b.im = b.im + a.im
    Complex.new(a.re + b.re, a.im + b.im) = Complex.new(b.re + a.re, b.im + a.im)
    a + b = b + a
}

theorem add_assoc(a: Complex, b: Complex, c: Complex) { (a + b) + c = a + (b + c) } by {
    // Component-wise expansion
    let left_re1: Real = (a + b).re + c.re
    let left_im1: Real = (a + b).im + c.im
    let left_re2: Real = (a.re + b.re) + c.re
    let left_im2: Real = (a.im + b.im) + c.im

    let right_re1: Real = a.re + (b + c).re
    let right_im1: Real = a.im + (b + c).im
    let right_re2: Real = a.re + (b.re + c.re)
    let right_im2: Real = a.im + (b.im + c.im)

    // Apply real number associativity
    left_re2 = a.re + (b.re + c.re)  // Real.assoc_add
    right_re2 = a.re + (b.re + c.re)

    left_im2 = a.im + (b.im + c.im)  // Real.assoc_add
    right_im2 = a.im + (b.im + c.im)

    // Build final complexes
    let final_left: Complex = Complex.new(left_re2, left_im2)
    let final_right: Complex = Complex.new(right_re2, right_im2)

    // Component-wise equality
    final_left.re = final_right.re
    final_left.im = final_right.im
    final_left = final_right
}

theorem add_zero(a: Complex) { a + Complex.0 = a } by {
    a.re + Real.0 = a.re
    a.im + Real.0 = a.im
    Complex.new(a.re + Real.0, a.im + Real.0) = Complex.new(a.re, a.im)
    a + Complex.0 = a
}

// Multiplication properties
theorem mul_comm(a: Complex, b: Complex) { a * b = b * a } by {
    a.re * b.re - a.im * b.im = b.re * a.re - b.im * a.im
    a.re * b.im + a.im * b.re = b.re * a.im + b.im * a.re
    Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re) = Complex.new(b.re * a.re - b.im * a.im, b.re * a.im + b.im * a.re)
    a * b = b * a
}

// Properties of i
theorem i_squared { Complex.i * Complex.i = Complex.new(-Real.1, Real.0) } by {
    Complex.i.re * Complex.i.re - Complex.i.im * Complex.i.im = Real.0 * Real.0 - Real.1 * Real.1
    Complex.i.re * Complex.i.im + Complex.i.im * Complex.i.re = Real.0 * Real.1 + Real.1 * Real.0
    Complex.new(Real.0 * Real.0 - Real.1 * Real.1, Real.0 * Real.1 + Real.1 * Real.0) = Complex.new(-Real.1, Real.0)
    Complex.i * Complex.i = Complex.new(-Real.1, Real.0)
}

theorem conj_mul(a: Complex, b: Complex) { (a * b).conj = a.conj * b.conj } by {
    // Direct component comparison
    (a * b).conj = Complex.new((a * b).re, -((a * b).im))
    a.conj * b.conj = Complex.new(a.re, -a.im) * Complex.new(b.re, -b.im)

    // Calculate components
    let real_part: Real = a.re*b.re - (-a.im)*(-b.im)
    let imag_part: Real = a.re*(-b.im) + (-a.im)*b.re

    // Simplify using real number properties
    real_part = a.re*b.re - a.im*b.im
    imag_part = -(a.re*b.im + a.im*b.re)

    Complex.new(real_part, imag_part) = Complex.new((a * b).re, -((a * b).im))
}

theorem conj_conj(a: Complex) { a.conj.conj = a } by {
    a.conj.conj = Complex.new(a.re, -a.im).conj
    a.conj.conj = Complex.new(a.re, -(-a.im))
    a.conj.conj = Complex.new(a.re, a.im)
    a.conj.conj = a
}

// Absolute value properties
theorem abs_squared_conj(a: Complex) { a * a.conj = Complex.new(a.abs_squared, Real.0) } by {
    a * a.conj = Complex.new(a.re, a.im) * Complex.new(a.re, -a.im)
    a * a.conj = Complex.new(a.re * a.re - a.im * (-a.im), a.re * (-a.im) + a.im * a.re)
    a * a.conj = Complex.new(a.re * a.re + a.im * a.im, a.re * (-a.im) + a.im * a.re)
    a * a.conj = Complex.new(a.re * a.re + a.im * a.im, Real.0)
    a * a.conj = Complex.new(a.abs_squared, Real.0)
}

// Multiplicative identity
theorem mul_one(a: Complex) { a * Complex.1 = a } by {
    // Expand the multiplication
    a * Complex.1 = a * Complex.new(Real.1, Real.0)
    
    // Apply the definition of complex multiplication
    a * Complex.1 = Complex.new(
        a.re * Real.1 - a.im * Real.0,
        a.re * Real.0 + a.im * Real.1
    )
    
    // Simplify using real number properties
    a * Complex.1 = Complex.new(a.re, a.im)
    a * Complex.1 = a
}

// Conjugate distribution over addition
theorem conj_add(a: Complex, b: Complex) { (a + b).conj = a.conj + b.conj } by {
    (a + b).conj = Complex.new(a.re + b.re, a.im + b.im).conj
    (a + b).conj = Complex.new(a.re + b.re, -(a.im + b.im))
    (a + b).conj = Complex.new(a.re + b.re, -a.im + -b.im)
    
    a.conj + b.conj = Complex.new(a.re, -a.im) + Complex.new(b.re, -b.im)
    a.conj + b.conj = Complex.new(a.re + b.re, -a.im + -b.im)
    
    (a + b).conj = a.conj + b.conj
}
