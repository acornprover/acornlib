from monoid import Monoid
from nat import Nat

/// A group is a monoid that also has inverses.
typeclass G: Group extends Monoid {
    /// The inverse operation
    inverse: G -> G

    /// We only need right-inverse; we can prove left-inverse from it.
    inverse_right(a: G) {
        a * a.inverse = G.1
    }
}

// This direction is proven rather than assumed
theorem inverse_left<G: Group>(a: G) {
    a.inverse * a = G.1
} by {
    (a.inverse * a) * a.inverse = a.inverse
    (a.inverse * a) * a.inverse * a.inverse.inverse = a.inverse * a.inverse.inverse
    (a.inverse * a) * (a.inverse * a.inverse.inverse) = a.inverse * a.inverse.inverse
    (a.inverse * a) * G.1 = G.1
}

theorem inverse_inverse<G: Group>(a: G) {
    a.inverse.inverse = a
} by {
    a * a.inverse = G.1
    a * a.inverse * a.inverse.inverse = a.inverse.inverse
}

theorem left_cancel<G: Group>(a: G, b: G, c: G) {
    a * b = a * c implies b = c
} by {
    a.inverse * (a * b) = a.inverse * (a * c)
}

theorem right_cancel<G: Group>(a: G, b: G, c: G) {
    b * a = c * a implies b = c
} by {
    (b * a) * a.inverse = (c * a) * a.inverse
}

theorem inverse_mul<G: Group>(a: G, b: G) {
    (a * b).inverse = b.inverse * a.inverse
} by {
    (a * b).inverse * (a * b) = G.1
    (a * b).inverse * a = b.inverse
}

theorem pow_inverse<G: Group>(a: G, n: Nat) {
    a.pow(n).inverse = a.inverse.pow(n)
} by {
    define p(m: Nat) -> Bool {
        a.pow(m).inverse = a.inverse.pow(m)
    }

    p(Nat.0)

    forall(n: Nat) {
        if p(n) {
            a.pow(n) * a.inverse.pow(n) = G.1
            a.pow(n.suc) = a.pow(n)*a
            a.inverse.pow(n.suc) = a.inverse*a.inverse.pow(n)
            a.pow(n.suc) * a.inverse.pow(n.suc) = (a.pow(n) * a) * (a.inverse * a.inverse.pow(n))
            a.pow(n.suc) * a.inverse.pow(n.suc) = G.1
            a.pow(n.suc).inverse = a.inverse.pow(n.suc)
        }
    }
}

theorem pow_cancel<G: Group>(a: G, m: Nat, n: Nat) {
    n > m and a.pow(n) = a.pow(m) implies a.pow(n - m) = G.1
} by {
    a.pow(n) = a.pow(n - m)*a.pow(m)
}

/// True if an element has finite order (some positive power equals the identity).
define has_finite_order<G: Group>(g: G) -> Bool {
    exists(n: Nat) {
        n != Nat.0 and g.pow(n) = G.1
    }
}

/// True if a group has no elements of finite order except the identity.
let is_torsion_free<G: Group> = forall(g: G) {
    has_finite_order(g) implies g = G.1
}

/// True if a function preserves the group operation (is a homomorphism).
define is_hom<G: Group, H: Group>(f: G -> H) -> Bool {
    forall(a: G, b: G) {
        f(a * b) = f(a) * f(b)
    }
}

/// The trivial homomorphism maps every element of G to the identity element of H.
let trivial_hom<G: Group, H: Group>: G -> H = function(a: G) {
    H.1
}

theorem trivial_hom_is_hom<G: Group, H: Group>(a: G, b: G) {
    is_hom(trivial_hom<G, H>)
}

/// A group homomorphism that preserves the group structure.
structure GroupHom<G: Group, H: Group> {
    /// The mapping for the homomorphism.
    hom: G -> H
} constraint {
    is_hom(hom)
}
