import nat.nat_base
import nat.nat_gcd
from nat import Nat
from int.int_base import Int, abs, abs_neg, abs_zero, neg_neg, neg_sub, nonzero_pos_or_neg, sub_eq_zero, sub_nat

numerals Int


theorem mul_from_nat(j: Nat, k: Nat) { Int.from_nat(j) * Int.from_nat(k) = Int.from_nat(j * k) } by {
    abs(Int.from_nat(j) * Int.from_nat(k)) = abs(Int.from_nat(j)) * abs(Int.from_nat(k))
    Int.from_nat(abs(Int.from_nat(j) * Int.from_nat(k))) = Int.from_nat(abs(Int.from_nat(j)) * abs(Int.from_nat(k)))
    not Int.from_nat(j).is_negative
    not Int.from_nat(k).is_negative
    not (Int.from_nat(j) * Int.from_nat(k)).is_negative
    Int.from_nat(abs(Int.from_nat(j) * Int.from_nat(k))) = Int.from_nat(j) * Int.from_nat(k)
    Int.from_nat(j) * Int.from_nat(k) = Int.from_nat(abs(Int.from_nat(j)) * abs(Int.from_nat(k)))
}

theorem abs_zero_imp_zero(a: Int) {
    abs(a) = Nat.0 implies a = 0
} by {
    if a.is_negative {
        Int.from_nat(abs(a)) != a
        not a.is_positive
        (a).pos_part = Nat.0
        (a).neg_part = abs(a)
        sub_nat(((Int.from_nat(Nat.0))).pos_part, ((Int.from_nat(Nat.0))).neg_part) = Int.from_nat(Nat.0)
        ((Int.from_nat(Nat.0))).pos_part = Nat.0
        (-(Int.from_nat(Nat.0))).neg_part = Int.from_nat(Nat.0).pos_part
        sub_nat((a).pos_part, (a).neg_part) = a
        false
    }
    not a.is_positive
}

theorem mul_zero_imp_factor_zero(a: Int, b: Int) { a * b = 0 implies a = 0 or b = 0 } by {
    abs(a) * abs(b) = Nat.0
    abs(a) = Nat.0 or abs(b) = Nat.0
    if abs(a) = Nat.0 {
        a = 0
    } else {
        b = 0
    }
}

theorem mul_pos_pos(a: Int, b: Int) {
    a.is_positive and b.is_positive implies (a * b).is_positive
} by {
    not a.is_negative
    not b.is_negative
    not (a * b).is_negative
    if a * b = 0 {
        if a = 0 {
            not a.is_positive
            false
        } else {
            b = 0
            not b.is_positive
            false
        }
    } else {
        (a * b).is_positive
    }
}

theorem mul_pos_neg(a: Int, b: Int) {
    a.is_positive and b.is_negative implies (a * b).is_negative
}

theorem mul_neg_pos(a: Int, b: Int) {
    a.is_negative and b.is_positive implies (a * b).is_negative
}

theorem mul_neg_neg(a: Int, b: Int) {
    a.is_negative and b.is_negative implies (a * b).is_positive
} by {
    (-a).is_positive
    (-a * b).is_negative
    (-(a * b)).is_negative
    (a * b).is_positive
}

theorem mul_int_nat_nat_assoc(a: Int, j: Nat, k: Nat) { a.mul_nat(j * k) = (a.mul_nat(j)).mul_nat(k) } by {
    if a.is_negative {
        // Simplify lhs
        a = -(Int.from_nat(abs(a)))
        (a).mul_nat(j * k) = -(Int.from_nat(abs(a) * (j * k)))
        (a).mul_nat(j * k) = -(Int.from_nat(abs(a) * j * k))

        // Simplify rhs
        (a).mul_nat(j) = -(Int.from_nat(abs(a) * j))
        (a.mul_nat(j)).mul_nat(k) = (-(Int.from_nat(abs(a) * j))).mul_nat(k)
        (a.mul_nat(j)).mul_nat(k) = -(Int.from_nat(abs(a) * j).mul_nat(k))
        (a.mul_nat(j)).mul_nat(k) = -(Int.from_nat(abs(a) * j * k))

        // Conclusion
        a.mul_nat(j * k) = (a.mul_nat(j)).mul_nat(k)
    } else {
        // Simplify lhs
        (a).mul_nat(j * k) = Int.from_nat(abs(a) * (j * k))
        (a).mul_nat(j * k) = Int.from_nat(abs(a) * j * k)

        // Simplify rhs
        (a).mul_nat(j) = Int.from_nat(abs(a) * j)
        (a.mul_nat(j)).mul_nat(k) = Int.from_nat(abs(a) * j).mul_nat(k)
        (a.mul_nat(j)).mul_nat(k) = Int.from_nat(abs(a) * j * k)

        // Conclusion
        a.mul_nat(j * k) = (a.mul_nat(j)).mul_nat(k)
    }
}

theorem mul_int_int_nat_assoc(a: Int, b: Int, n: Nat) { (a * b).mul_nat(n) = a * (b).mul_nat(n) } by {
    if b.is_negative {
        b = -(Int.from_nat(abs(b)))
        (a * b).mul_nat(n) = (a * -(Int.from_nat(abs(b)))).mul_nat(n)
        (a * b).mul_nat(n) = (-(a.mul_nat(abs(b)))).mul_nat(n)
        (a * b).mul_nat(n) = -((a.mul_nat(abs(b))).mul_nat(n))
        (a * b).mul_nat(n) = -(a.mul_nat(abs(b) * n))
        (a * b).mul_nat(n) = -(a * Int.from_nat(abs(b) * n))
        (a * b).mul_nat(n) = a * -(Int.from_nat(abs(b) * n))
        (a * b).mul_nat(n) = a * (-(Int.from_nat(abs(b)))).mul_nat(n)
        (a * b).mul_nat(n) = a * b.mul_nat(n)
    } else {
        a * b = a.mul_nat(abs(b))
        a.mul_nat(abs(b) * n) = (a * b).mul_nat(n)
        Int.from_nat(abs(b) * n) = b.mul_nat(n)
        a.mul_nat(abs(b) * n) = a * b.mul_nat(n)
        (a * b).mul_nat(n) = a * b.mul_nat(n)
    }
}

theorem mul_assoc(a: Int, b: Int, c: Int) { a * b * c = a * (b * c) } by {
    if c.is_negative {
        c = -(Int.from_nat(abs(c)))
        a * b * c = a * b * -(Int.from_nat(abs(c)))
        a * b * c = -(a * b * Int.from_nat(abs(c)))
        a * b * c = -((a * b).mul_nat(abs(c)))
        a * b * c = -(a * (b).mul_nat(abs(c)))
        a * b * c = a * -((b).mul_nat(abs(c)))
        a * b * c = a * -(b * Int.from_nat(abs(c)))
        a * b * c = a * (b * -(Int.from_nat(abs(c))))
        a * b * c = a * (b * c)
    } else {
        c = Int.from_nat(abs(c))
        a * b * c = a * b * Int.from_nat(abs(c))
        a * b * c = (a * b).mul_nat(abs(c))
        a * b * c = a * (b).mul_nat(abs(c))
        a * b * c = a * (b * Int.from_nat(abs(c)))
        a * b * c = a * (b * c)
    }
}

// Comparison operators

attributes Int {
    /// `a <= b` when `(a - b)` is positive or zero.
    define lte(self, b: Int) -> Bool {
        (b - self).is_positive or self = b
    }

    /// True if this integer divides b (equivalently, there exists d such that d * this = b).
    define divides(self, b: Int) -> Bool {
        exists(d: Int) { d * self = b }
    }
}

from util import is_reflexive, is_transitive, is_antisymmetric

theorem int_is_reflexive {
    is_reflexive(Int.lte)
}

theorem lte_trans(a: Int, b: Int, c: Int) {
    a <= b and b <= c implies a <= c
} by {
    if a = b {
        a <= c
    } else {
        (b - a).is_positive
        if b = c {
            a <= c
        } else {
            (c - b).is_positive
            (b - a).is_positive
            ((c - b) + (b - a)).is_positive
            (c - a).is_positive
            a <= c
        }
    }
}

theorem int_is_transitive {
    is_transitive(Int.lte)
}

theorem int_is_antisymmetric {
    is_antisymmetric(Int.lte)
}

from order import PartialOrder, LinearOrder

instance Int: PartialOrder {
    let lte = Int.lte
}

theorem lt_not_ref(a: Int) { not (a < a) } by {
    if a < a {
        (a - a).is_positive
        0.is_positive
        false
    }
}

theorem lte_ref(a: Int) { a <= a }

theorem zero_lt_pos(a: Int) { a.is_positive implies 0 < a }

theorem neg_lt_zero(a: Int) {
    a.is_negative implies a < 0
} by {
    a != 0
    a <= 0
}

theorem nonpos_lt_pos(a: Int, b: Int) {
    not a.is_positive and b.is_positive implies a < b
} by {
    (b - a).is_positive
}

theorem neg_lt_nonneg(a: Int, b: Int) { a.is_negative and not b.is_negative implies a < b }

theorem nonpos_lte_nonneg(a: Int, b: Int) {
    not a.is_positive and not b.is_negative implies a <= b
} by {
    if not a <= b {
        b != a
        not a < b
        not a.is_negative
        not b.is_positive
        false
    }
}

theorem lte_abs(a: Int) { a <= Int.from_nat(abs(a)) } by {
    if a.is_negative {
        not a.is_positive
        a <= Int.from_nat(abs(a))
    } else {
        a <= Int.from_nat(abs(a))
    }
}

theorem lt_add_left(a: Int, b: Int, c: Int) { b < c implies a + b < a + c } by {
    (c - b).is_positive
    (a + c) - (a + b) = c - b
    ((a + c) - (a + b)).is_positive
}

theorem lte_add_left(a: Int, b: Int, c: Int) { b <= c implies a + b <= a + c }

theorem abs_add_nonneg(a: Int, b: Int) {
    not a.is_negative and not b.is_negative implies abs(a + b) = abs(a) + abs(b)
} by {
    Int.from_nat(abs(a)) = a
    Int.from_nat(abs(b)) = b
    Int.from_nat(abs(a)) + Int.from_nat(abs(b)) = Int.from_nat(abs(a) + abs(b))
    a + Int.from_nat(abs(b)) = Int.from_nat(abs(a) + abs(b))
    a + b = Int.from_nat(abs(a) + abs(b))
}

theorem abs_add_nonpos(a: Int, b: Int) {
    not a.is_positive and not b.is_positive implies abs(a + b) = abs(a) + abs(b)
} by {
    not (-a).is_negative
    not (-b).is_negative
    abs(-a + -b) = abs(-a) + abs(-b)
    abs(-(a + b)) = abs(-a) + abs(-b)
    abs(-(a + b)) = abs(a) + abs(b)
}

// One case of the triangle inequality
theorem triangle_nonpos_lte_nonneg(a: Int, b: Int) {
    not a.is_negative and not b.is_positive and abs(b) <= abs(a) implies abs(a + b) <= abs(a) + abs(b)
} by {
    let (n: Nat) satisfy { n + abs(b) = abs(a) }
    Int.from_nat(n) + Int.from_nat(abs(b)) = Int.from_nat(abs(a))
    Int.from_nat(n) + -b = Int.from_nat(abs(a))
    Int.from_nat(n) + -b = a
    a - Int.from_nat(n) = -b
    a + b = Int.from_nat(n)
    abs(a + b) = n
    n <= abs(a)
    abs(a) <= abs(a) + abs(b)
    n <= abs(a) + abs(b)
}

theorem triangle_nonneg_nonpos(a: Int, b: Int) {
    not a.is_negative and not b.is_positive implies abs(a + b) <= abs(a) + abs(b)
} by {
    if abs(b) <= abs(a) {
        abs(a + b) <= abs(a) + abs(b)
    } else {
        abs(a) <= abs(b)
        abs(-a) <= abs(-b)
        not (-b).is_negative
        not (-a).is_positive
        abs(-b + -a) <= abs(-b) + abs(-a)
        abs(-(b + a)) <= abs(-b) + abs(-a)
        abs(b + a) <= abs(-b) + abs(-a)
        abs(b + a) <= abs(b) + abs(a)
        abs(a + b) <= abs(b) + abs(a)
        abs(a + b) <= abs(a) + abs(b)
    }
}

theorem triangle_ineq(a: Int, b: Int) { abs(a + b) <= abs(a) + abs(b) } by {
    if a.is_negative {
        if b.is_negative {
            abs(a + b) = abs(a) + abs(b)
            abs(a + b) <= abs(a) + abs(b)
        } else {
            abs(b + a) <= abs(b) + abs(a)
            abs(b + a) <= abs(a) + abs(b)
            abs(a + b) <= abs(a) + abs(b)
        }
    } else {
        if b.is_negative {
            abs(a + b) <= abs(a) + abs(b)
        } else {
            abs(a + b) = abs(a) + abs(b)
            abs(a + b) <= abs(a) + abs(b)
        }
    }
}

theorem lt_mul_pos(a: Int, b: Int, c: Int) { a < b and c.is_positive implies a * c < b * c } by {
    b * c - a * c = (b - a) * c
    b * c - a * c = c * (b - a)
    (b - a).is_positive
    (b * c - a * c).is_positive
}

theorem lt_mul_neg(a: Int, b: Int, c: Int) { a < b and c.is_negative implies b * c < a * c } by {
    a * c - b * c = c * (a - b)
    (b - a).is_positive
    (a - b).is_negative
    (c * (a - b)).is_positive
    (a * c - b * c).is_positive
}

theorem lt_trans(a: Int, b: Int, c: Int) { a < b and b < c implies a < c } by {
    (b - a).is_positive
    (c - b).is_positive
    (c + -b).is_positive
    not (b - a).is_negative
    -(-(b - a)) = b - a
    -(b - a) = a - b
    a + -b = a - b
    (-(a + -b)).is_negative = (a + -b).is_positive
    not (a + -b).is_positive
    exists(k0: Int) { a + k0 < c + k0 }
    (c - a).is_positive
}

theorem lt_and_lte(a: Int, b: Int, c: Int) { a < b and b <= c implies a < c } by {
    if b = c {
        a < c
    } else {
        a < c
    }
}

theorem lte_and_lt(a: Int, b: Int, c: Int) { a <= b and b < c implies a < c } by {
    if a = b {
        a < c
    } else {
        a < c
    }
}

theorem lt_from_nat(j: Nat, k: Nat) {
    j < k implies Int.from_nat(j) < Int.from_nat(k)
} by {
    let (d: Nat) satisfy { j + d = k and d != Nat.0 }
    Int.from_nat(d) + Int.from_nat(j) = Int.from_nat(k)
    Int.from_nat(k) - Int.from_nat(j) = Int.from_nat(d)
    Int.from_nat(d).is_positive
    Int.from_nat(j) != Int.from_nat(k)
    Int.from_nat(j) <= Int.from_nat(k)
}

theorem lte_from_nat(j: Nat, k: Nat) { j <= k implies Int.from_nat(j) <= Int.from_nat(k) } by {
    if j = k {
        Int.from_nat(j) = Int.from_nat(k)
        Int.from_nat(j) <= Int.from_nat(k)
    } else {
        j < k
        Int.from_nat(j) < Int.from_nat(k)
        Int.from_nat(j) <= Int.from_nat(k)
    }
}

// Units and dividing

define is_unit(a: Int) -> Bool { abs(a) = Nat.1 }

theorem two_units(u: Int) { is_unit(u) implies u = 1 or u = -(1) } by {
    abs(u) = Nat.1
    if Int.from_nat(abs(u)) = u {
        u = 1
    } else {
        u = -(1)
    }
}

theorem unit_squared(u: Int) { is_unit(u) implies u * u = 1 } by {
    if u = 1 {
        u * u = 1
    } else {
        u * u = 1
    }
}

theorem mul_units(u: Int, v: Int) { is_unit(u) and is_unit(v) implies is_unit(u * v) } by {
    abs(u * v) = abs(u) * abs(v)
    abs(u) = Nat.1
    abs(v) = Nat.1
    abs(u * v) = Nat.1
}

// Like the sign function, but we force it to be a unit, by considering 0 to have sign 1
define unit_sign(a: Int) -> Int {
    if a.is_negative {
        -(1)
    } else {
        1
    }
}

theorem unit_sign_is_unit(a: Int) { is_unit(unit_sign(a)) } by {
    if a.is_negative {
        unit_sign(a) = -(1)
        abs(-(1)) = Nat.1
        is_unit(unit_sign(a))
    } else {
        unit_sign(a) = 1
        abs(1) = Nat.1
        is_unit(unit_sign(a))
    }
}

theorem abs_decomp(a: Int) { unit_sign(a) * Int.from_nat(abs(a)) = a } by {
    if a.is_negative {
        unit_sign(a) = -(1)
        unit_sign(a) * Int.from_nat(abs(a)) = -(1) * Int.from_nat(abs(a))
        unit_sign(a) * Int.from_nat(abs(a)) = -(Int.from_nat(abs(a)))
        unit_sign(a) * Int.from_nat(abs(a)) = a
    } else {
        unit_sign(a) = 1
        unit_sign(a) * Int.from_nat(abs(a)) = 1 * Int.from_nat(abs(a))
        unit_sign(a) * Int.from_nat(abs(a)) = Int.from_nat(abs(a))
        unit_sign(a) * Int.from_nat(abs(a)) = a
    }
}

theorem abs_alt_decomp(a: Int) { unit_sign(a) * a = Int.from_nat(abs(a)) } by {
    unit_sign(a) * a = unit_sign(a) * (unit_sign(a) * Int.from_nat(abs(a)))
    unit_sign(a) * a = unit_sign(a) * unit_sign(a) * Int.from_nat(abs(a))
    unit_sign(a) * unit_sign(a) = 1
    unit_sign(a) * a = 1 * Int.from_nat(abs(a))
}


theorem div_trans(a: Int, b: Int, c: Int) {
    a.divides(b) and b.divides(c) implies a.divides(c)
} by {
    let (d: Int) satisfy { d * a = b }
    let (e: Int) satisfy { e * b = c }
    e * (d * a) = c
    e * d * a = c
    a.divides(c)
}

theorem div_imp_div_abs(a: Int, b: Int) {
    a.divides(b) implies abs(a).divides(abs(b))
} by {
    let (d: Int) satisfy { d * a = b }
    abs(d) * abs(a) = abs(b)
    abs(a).divides(abs(b))
}

theorem div_from_nat(j: Nat, k: Nat) {
    j.divides(k) implies Int.from_nat(j).divides(Int.from_nat(k))
} by {
    let (n: Nat) satisfy { n * j = k }
    Int.from_nat(n) * Int.from_nat(j) = Int.from_nat(k)
    Int.from_nat(j).divides(Int.from_nat(k))
}

theorem div_abs(a: Int) {
    a.divides(Int.from_nat(abs(a)))
} by {
    Int.from_nat(abs(a)) = a * unit_sign(a)
}

theorem div_abs_imp_div(a: Int, b: Int) { abs(a).divides(abs(b)) implies a.divides(b) } by {
    Int.from_nat(abs(a)).divides(Int.from_nat(abs(b)))
    a.divides(Int.from_nat(abs(a)))
    a.divides(Int.from_nat(abs(b)))
    Int.from_nat(abs(b)).divides(b)
}

theorem abs_eq_imp_unit(a: Int, b: Int) {
    abs(a) = abs(b) implies exists(u: Int) { is_unit(u) and u * a = b }
} by {
    Int.from_nat(abs(a)) = Int.from_nat(abs(b))
    unit_sign(a) * a = Int.from_nat(abs(a))
    b = unit_sign(b) * Int.from_nat(abs(b))
    b = unit_sign(b) * Int.from_nat(abs(a))
    b = unit_sign(b) * unit_sign(a) * a
    b = unit_sign(b) * unit_sign(a) * a
    is_unit(unit_sign(b))
    is_unit(unit_sign(a))
    is_unit(unit_sign(b) * unit_sign(a))
}

theorem abs_eq_imp_div(a: Int, b: Int) { abs(a) = abs(b) implies a.divides(b) } by {
    exists(u: Int) { is_unit(u) and u * a = b }
}

theorem div_pos_imp_lte(a: Int, b: Int) { a.divides(b) and b.is_positive implies a <= b } by {
    abs(a).divides(abs(b))
    Int.from_nat(abs(a)) <= Int.from_nat(abs(b))
    Int.from_nat(abs(a)) <= b
    a <= Int.from_nat(abs(a))
    a <= b
}

// Theorems that relate to the GCD

attributes Int {
    /// The greatest common divisor of this integer and b.
    define gcd(self, b: Int) -> Int {
        Int.from_nat(abs(self).gcd(abs(b)))
    }
}

theorem gcd_nonneg(a: Int, b: Int) {
    not a.gcd(b).is_negative
}

theorem gcd_comm(a: Int, b: Int) { a.gcd(b) = b.gcd(a) } by {
    Int.from_nat(abs(a).gcd(abs(b))) = Int.from_nat(abs(b).gcd(abs(a)))
}

theorem gcd_div_left(a: Int, b: Int) { a.gcd(b).divides(a) } by {
    Int.from_nat(abs(a).gcd(abs(b))).divides(a)
}

theorem gcd_div_right(a: Int, b: Int) { a.gcd(b).divides(b) }

theorem divides_gcd(a: Int, b: Int, d: Int) { d.divides(a) and d.divides(b) implies d.divides(a.gcd(b)) } by {
    abs(d).divides(abs(a))
    abs(d).divides(abs(b))
    abs(d).divides(abs(a).gcd(abs(b)))
    d.divides(Int.from_nat(abs(a).gcd(abs(b))))
    d.divides(a.gcd(b))
}

theorem gcd_pos(a: Int, b: Int) {
    a != 0 and b != 0 implies a.gcd(b).is_positive
} by {
    abs(a) != Nat.0
    abs(b) != Nat.0
    abs(a).gcd(abs(b)) != Nat.0
    a.gcd(b) != 0
}

theorem gcd_is_gcd(a: Int, b: Int, d: Int) {
    a != 0 and b != 0 and d.divides(a) and d.divides(b) implies d <= a.gcd(b)
} by {
    a.gcd(b).is_positive
    d.divides(a.gcd(b))
}

// Theorems about the span of a linear combination

define spans(a: Int, b: Int, c: Int) -> Bool {
    exists(d: Int, e: Int) {
        d * a + e * b = c
    }
}

theorem spans_zero(a: Int, b: Int) { spans(a, b, 0) } by {
    0 * a + 0 * b = 0
}

theorem spans_left(a: Int, b: Int) { spans(a, b, a) } by {
    1 * a + 0 * b = a
}

theorem spans_comm(a: Int, b: Int, c: Int) { spans(a, b, c) implies spans(b, a, c) } by {
    let (d: Int, e: Int) satisfy { d * a + e * b = c }
    e * b + d * a = c
}

theorem spans_right(a: Int, b: Int) { spans(a, b, b) } by {
    0 * a + 1 * b = b
}

theorem spans_mul_left(a: Int, b: Int, c: Int) { spans(a, b, c * a) } by {
    c * a + 0 * b = c * a
}

theorem spans_div_left(a: Int, b: Int, c: Int) { a.divides(c) implies spans(a, b, c) }

theorem spans_mul_right(a: Int, b: Int, c: Int) { spans(a, b, c * b) }

theorem spans_div_right(a: Int, b: Int, c: Int) { b.divides(c) implies spans(a, b, c) } by {
    spans(b, a, c)
}

theorem spans_mul(a: Int, b: Int, c: Int, d: Int) { spans(a, b, c) implies spans(a, b, d * c) } by {
    let (e: Int, f: Int) satisfy { e * a + f * b = c }
    d * c = d * (e * a + f * b)
    d * c = d * (e * a) + d * (f * b)
    d * c = d * e * a + d * f * b
}

theorem spans_add(a: Int, b: Int, c: Int, d: Int) { spans(a, b, c) and spans(a, b, d) implies spans(a, b, c + d) } by {
    let (e: Int, f: Int) satisfy { e * a + f * b = c }
    let (g: Int, h: Int) satisfy { g * a + h * b = d }
    c + d = (e * a + f * b) + (g * a + h * b)
    c + d = (e * a + g * a) + (f * b + h * b)
    c + d = (e + g) * a + (f + h) * b
}

theorem spans_negate(a: Int, b: Int, c: Int) { spans(a, b, c) implies spans(a, b, -(c)) } by {
    -(1) * c = -(c)
    spans(a, b, -(1) * c)
}

let mod = nat_base.nat_mod

theorem spans_nat_mod(a: Int, b: Int, k: Nat, m: Nat) {
    spans(a, b, Int.from_nat(k)) and spans(a, b, Int.from_nat(m)) implies spans(a, b, Int.from_nat(mod(k, m)))
} by {
    let (d: Nat) satisfy { d * m + mod(k, m) = k }
    Int.from_nat(d * m) + Int.from_nat(mod(k, m)) = Int.from_nat(k)
    Int.from_nat(d) * Int.from_nat(m) + Int.from_nat(mod(k, m)) = Int.from_nat(k)
    -(-(Int.from_nat(d) * Int.from_nat(m))) = Int.from_nat(k) - Int.from_nat(mod(k, m))
    Int.from_nat(mod(k, m)) = Int.from_nat(k) + -(Int.from_nat(d) * Int.from_nat(m))
    spans(a, b, Int.from_nat(d) * Int.from_nat(m))
    spans(a, b, -(Int.from_nat(d) * Int.from_nat(m)))
    spans(a, b, Int.from_nat(k) + -(Int.from_nat(d) * Int.from_nat(m)))
    spans(a, b, Int.from_nat(mod(k, m)))
}

// Bezout's identity
theorem spans_gcd(a: Int, b: Int) { spans(a, b, a.gcd(b)) } by {
    let f = function(n: Nat) {
        spans(a, b, Int.from_nat(n))
    }
    forall(m: Nat, n: Nat) {
        if f(m) and f(n) {
            f(mod(m, n))
        }
    }
    nat_gcd.mod_maintains(f)
    f(abs(a))
    f(abs(b))
    spans(a, b, Int.from_nat(abs(a).gcd(abs(b))))
}

// More theorems analogous to nat theorems

theorem gcd_one_right(n: Int) {
    n.gcd(1) = 1
} by {
    abs(n).gcd(Nat.1) = Nat.1
}

theorem gcd_one_left(n: Int) {
    1.gcd(n) = 1
}

theorem gcd_mult_left(a: Int, b: Int, m: Int) {
    Int.from_nat(abs(m)) * a.gcd(b) = (m * a).gcd(m * b)
}

theorem gcd_mult_right(a: Int, b: Int, m: Int) {
    a.gcd(b) * Int.from_nat(abs(m)) = (a * m).gcd(b * m)
}

theorem cofactor(a: Int, b: Int, af: Int, bf: Int) {
    (
        a.gcd(b) != 0 and
        af * a.gcd(b) = a and
        bf * a.gcd(b) = b
    ) implies af.gcd(bf) = 1
} by {
    abs(a).gcd(abs(b)) != Nat.0
    abs(af) * abs(a).gcd(abs(b)) = abs(a)
    abs(bf) * abs(a).gcd(abs(b)) = abs(b)
    abs(af).gcd(abs(bf)) = Nat.1
}

theorem gcd_nonzero_left(a: Int, b: Int) {
    a != 0 implies a.gcd(b) != 0
} by {
    abs(a) != Nat.0
    abs(a).gcd(abs(b)) != Nat.0
    a.gcd(b) != 0
}

theorem gcd_nonzero_right(a: Int, b: Int) {
    b != 0 implies a.gcd(b) != 0
}

theorem lt_mul_both(a: Int, b: Int, c: Int) {
    a.is_positive and b < c implies a * b < a * c
}

theorem lte_mul_both(a: Int, b: Int, c: Int) {
    a.is_positive and b <= c implies a * b <= a * c
}

theorem lt_mul_both_neg(a: Int, b: Int, c: Int) {
    a.is_negative and b < c implies a * b > a * c
} by {
    a * c < b * a
}

theorem lte_mul_both_neg(a: Int, b: Int, c: Int) {
    a.is_negative and b <= c implies a * b >= a * c
}

theorem lt_cancel_mul(a: Int, b: Int, c: Int) {
    a.is_positive and a * b < a * c implies b < c
} by {
    b != c
    b <= c
}

theorem lte_cancel_mul(a: Int, b: Int, c: Int) {
    a.is_positive and a * b <= a * c implies b <= c
} by {
    if not b <= c {
        not a * c < a * b
        not c < b
        not b < c
        not (c - b).is_positive
        not (b - c).is_negative
        c != b
        b - c != 0
        false
    }
}

theorem lt_cancel_mul_neg(a: Int, b: Int, c: Int) {
    a.is_negative and a * b < a * c implies b > c
} by {
    c < b
}

theorem lte_cancel_mul_neg(a: Int, b: Int, c: Int) {
    a.is_negative and a * b <= a * c implies b >= c
}

theorem mul_pos_cancel_left(a: Int, b: Int, c: Int) {
    a.is_positive and a * b = a * c implies b = c
} by {
    if b != c {
        if b < c {
            a * b < a * c
            false
        } else {
            c < b
            a * c < a * b
            false
        }
    }
}

theorem mul_pos_cancel_right(a: Int, b: Int, c: Int) {
    a.is_positive and b * a = c * a implies b = c
}

theorem mul_neg_cancel_left(a: Int, b: Int, c: Int) {
    a.is_negative and a * b = a * c implies b = c
} by {
    (-a).is_positive
    (-a) * b = (-a) * c
    b = c
}

theorem mul_neg_cancel_right(a: Int, b: Int, c: Int) {
    a.is_negative and b * a = c * a implies b = c
}

theorem mul_cancel_left(a: Int, b: Int, c: Int) {
    a != 0 and a * b = a * c implies b = c
} by {
    if a.is_positive {
        b = c
    } else {
        a.is_negative
        b = c
    }
}

theorem mul_cancel_right(a: Int, b: Int, c: Int) {
    a != 0 and b * a = c * a implies b = c
}

theorem divides_cancel_left(a: Int, b: Int, c: Int) {
    a != 0 and (a * b).divides(a * c) implies b.divides(c)
} by {
    let d: Int satisfy {
        a * b * d = a * c
    }
    a * (b * d) = a * c
    b * d = c
}

theorem divides_cancel_right(a: Int, b: Int, c: Int) {
    a != 0 and (b * a).divides(c * a) implies b.divides(c)
}

theorem divides_mul_left(a: Int, b: Int, m: Int) {
    a.divides(b) implies (m * a).divides(m * b)
} by {
    let d: Int satisfy {
        d * a = b
    }
    m * d * a = m * b
}

theorem divides_mul_right(a: Int, b: Int, m: Int) {
    a.divides(b) implies (a * m).divides(b * m)
}

define is_prime(a: Int) -> Bool {
    abs(a).is_prime
}

theorem gcd_of_prime(p: Int, n: Int) {
    is_prime(p) implies p.gcd(n) = 1 or p.divides(n)
} by {
    abs(p).gcd(abs(n)) = Nat.1 or abs(p).divides(abs(n))
    if abs(p).gcd(abs(n)) = Nat.1 {
        p.gcd(n) = 1
    } else {
        abs(p).divides(abs(n))
        p.divides(n)
    }
}

// Generalized version
theorem euclids_lemma(a: Int, b: Int, c: Int) {
    a.gcd(b) = 1 and a.divides(b * c) implies a.divides(c)
} by {
    spans(a, b, 1)
    let (x: Int, y: Int) satisfy {
        x * a + y * b = 1
    }
    x * a * c + y * b * c = c
    let d: Int satisfy {
        d * a = b * c
    }
    x * a * c + y * d * a = c
    a * x * c + a * y * d = c
    a * (x * c + y * d) = c
    a.divides(c)
}

theorem euclids_lemma_prime(a: Int, b: Int, c: Int) {
    is_prime(a) and a.divides(b * c) implies a.divides(b) or a.divides(c)
} by {
    if a.divides(b) {
        a.divides(b)
    } else {
        a.gcd(b) = 1
        a.divides(c)
    }
}

theorem one_plus_one {
    1 + 1 = 2
} by {
    2 = Int.from_nat(Nat.1 + Nat.1)
}

theorem times_two(a: Int) {
    2 * a = a + a
} by {
    2 = 1 + 1
    2 * a = (1 + 1) * a
    2 * a = 1 * a + 1 * a
}

// This is just the Nat division theorem ported up
theorem positive_division_theorem(m: Int, n: Int) {
    0 <= m and n.is_positive implies exists(q: Int, r: Int) {
        0 <= r and r < n and m = q * n + r
    }
} by {
    let (q: Nat, r: Nat) satisfy {
        r < abs(n) and abs(m) = q * abs(n) + r
    }
    0 <= Int.from_nat(r)
    Int.from_nat(r) < n
    Int.from_nat(abs(m)) = Int.from_nat(q * abs(n) + r)
    m = Int.from_nat(q * abs(n) + r)
    m = Int.from_nat(q) * Int.from_nat(abs(n)) + Int.from_nat(r)
}

// Dividing negative numbers is awkward, sometimes you're off by one
theorem negative_division_theorem(m: Int, n: Int) {
    m.is_negative and n.is_positive implies exists(q: Int, r: Int) {
        0 <= r and r < n and m = q * n + r
    }
} by {
    0 <= -m
    let (qn: Int, rn: Int) satisfy {
        0 <= rn and rn < n and -m = qn * n + rn
    }
    m = (-qn) * n + -rn
    if rn = 0 {
        negative_division_theorem(m, n)
    } else {
        rn > 0
        (-qn + -1) * n = (-qn) * n + -n
        (-qn) * n = (-qn + -1) * n + n
        m = (-qn) * n + -rn
        m = (-qn + -1) * n + (n + -rn)
        rn < n
        0 < n + -rn
        0 <= n + -rn
        -rn < 0
        n + -rn < n
        negative_division_theorem(m, n)
    }
}

// The entire division theorem is combining the two cases
theorem division_theorem(m: Int, n: Int) {
    n.is_positive implies exists(q: Int, r: Int) {
        0 <= r and r < n and m = q * n + r
    }
} by {
    if m.is_negative {
        division_theorem(m, n)
    } else {
        0 <= m
        division_theorem(m, n)
    }
}

theorem add_lte(a: Int, b: Int, c: Int, d: Int) {
    a <= b and c <= d implies a + c <= b + d
} by {
    forall(x0: Int) { x0 + a <= x0 + b }
    forall(x0: Int) { x0 + c <= x0 + d }
    c + b <= b + d
    c + a <= b + d
}

theorem plus_abs_gte_zero(n: Int) {
    n + Int.from_nat(abs(n)) >= 0
} by {
    if n.is_negative {
        Int.from_nat(abs(n)) = -n
        n + Int.from_nat(abs(n)) = 0
    } else {
        n + Int.from_nat(abs(n)) = n + n
        n + Int.from_nat(abs(n)) >= 0
    }
}

attributes Int {
    /// Note that 0^0 = 1.
    /// TODO: we should be able to inherit `pow` from some underlying algebraic structure.
    define exp(self, b: Nat) -> Int {
        match b {
            Nat.0 {
                1
            }
            Nat.suc(pred) {
                self * self.exp(pred)
            }
        }
    }
}

theorem exp_one(a: Int) {
    a.exp(Nat.1) = a
} by {
    a * a.exp(Nat.0) = a
    a.exp(Nat.0.suc) = a
}

theorem exp_zero(a: Int) {
    a.exp(Nat.0) = 1
}

theorem exp_add(a: Int, b: Nat, c: Nat) {
    a.exp(b + c) = a.exp(b) * a.exp(c)
} by {
    // Inductive step
    let f = function(x: Nat) {
        a.exp(b + x) = a.exp(b) * a.exp(x)
    }
    f(Nat.0)
    forall(x: Nat) {
        if f(x) {
            a.exp(b + x) = a.exp(b) * a.exp(x)
            a.exp(b + x.suc) = a.exp(b) * a.exp(x.suc)
            f(x.suc)
        }
    }
    f(c)
}

theorem exp_mul(a: Int, b: Nat, c: Nat) {
    a.exp(b * c) = a.exp(b).exp(c)
} by {
    // Inductive step
    let f = function(x: Nat) {
        a.exp(b * x) = a.exp(b).exp(x)
    }
    f(Nat.0)
    forall(x: Nat) {
        if f(x) {
            a.exp(b * x) = a.exp(b).exp(x)
            a.exp(b * x.suc) = a.exp(b).exp(x.suc)
            f(x.suc)
        }
    }
    f(c)
}

theorem zero_exp(n: Nat) {
    n != Nat.0 implies 0.exp(n) = 0
} by {
    let b: Nat satisfy {
        n = b.suc
    }
}

theorem one_exp(n: Nat) {
    1.exp(n) = 1
} by {
    one_exp(Nat.0)
    one_exp(n)
}

theorem pos_exp(a: Int, n: Nat) {
    a.is_positive implies a.exp(n).is_positive
} by {
    let f = function(x: Nat) {
        a.exp(x).is_positive
    }
    f(Nat.0)
    f(n)
}

theorem sq_eq_mul(a: Int) {
    a * a = a.exp(Nat.2)
}

theorem sq_pos(a: Int) {
    a != 0 implies a.exp(Nat.2).is_positive
}

theorem exp_abs_eq_abs_exp(a: Int, n: Nat) {
    abs(a.exp(n)) = abs(a).exp(n)
} by {
    let f = function(x: Nat) {
        abs(a.exp(x)) = abs(a).exp(x)
    }
    f(Nat.0)
    forall(x: Nat) {
        if f(x) {
            abs(a.exp(x)) = abs(a).exp(x)
            abs(a.exp(x.suc)) = abs(a).exp(x.suc)
            f(x.suc)
        }
    }
    f(n)
}

attributes Int {
    /// The absolute value of an integer.
    define abs(self) -> Int {
        Int.from_nat(abs(self))
    }
}

theorem member_abs_neg(a: Int) {
    a.is_negative implies a.abs = -a
}

theorem member_abs_nonneg(a: Int) {
    not a.is_negative implies a.abs = a
}

theorem member_abs_pos(a: Int) {
    a.is_positive implies a.abs = a
}

theorem member_abs_nonpos(a: Int) {
    not a.is_positive implies a.abs = -a
}

theorem member_triangle(a: Int, b: Int) {
    (a + b).abs <= a.abs + b.abs
} by {
    abs(a + b) <= abs(a) + abs(b)
}

// Connecting Int to its multiplicative algebraic structure.

from semigroup import Semigroup

instance Int: Semigroup {
    let mul: (Int, Int) -> Int = Int.mul
}

from monoid import Monoid

instance Int: Monoid {
    let 1: Int = Int.1
}

from semiring import Semiring

instance Int: Semiring

from ring import Ring

instance Int: Ring

from comm_ring import CommRing

instance Int: CommRing

theorem int_total(a: Int, b: Int) { a <= b or b <= a } by {
    if a = b {
        a <= b
    } else {
        if a - b = 0 {
            sub_eq_zero(a, b)
            false
        } else {
            nonzero_pos_or_neg(a - b)
            if (a - b).is_positive {
                b < a
                b <= a
            } else {
                (a - b).is_negative
                neg_lt_zero(a - b)
                (a - b) < 0
                0 - (a - b) = -(a - b)
                neg_sub(a, b)
                (b - a).is_positive
                a < b
                a <= b
            }
        }
    }
}

instance Int: LinearOrder
