from util import is_reflexive, is_transitive, is_antisymmetric

/// A partial order is a relation that is reflexive, transitive, and antisymmetric.
/// Not all elements need to be comparable.
typeclass P: PartialOrder {
    /// The less-than-or-equal-to relation defining the partial order.
    lte: (P, P) -> Bool

    /// The order relation must be reflexive: every element is `≤` itself.
    reflexive {
        is_reflexive(P.lte)
    }

    /// The order relation must be transitive: if `a ≤ b` and `b ≤ c`, then `a ≤ c`.
    transitive {
        is_transitive(P.lte)
    }

    /// The order relation must be antisymmetric: if `a ≤ b` and `b ≤ a`, then `a = b`.
    antisymmetric {
        is_antisymmetric(P.lte)
    }
}

attributes P: PartialOrder {
    /// Strict less-than comparison.
    define lt(self, other: P) -> Bool {
        self <= other and self != other
    }

    /// Greater-than-or-equal-to comparison.
    define gte(self, other: P) -> Bool {
        other <= self
    }

    /// Strict greater-than comparison.
    define gt(self, other: P) -> Bool {
        other < self
    }
}

/// A linear order (total order) is a partial order where all elements are comparable.
typeclass L: LinearOrder extends PartialOrder {
    /// All elements are comparable: for any two elements `a` and `b`, either `a ≤ b` or `b ≤ a`.
    totality(a: L, b: L) {
        a <= b or b <= a
    }
}

attributes L: LinearOrder {
    /// Yields the smaller of two elements.
    define min(self, other: L) -> L {
        if self <= other {
            self
        } else {
            other
        }
    }

    /// Yields the larger of two elements.
    define max(self, other: L) -> L {
        if other <= self {
            self
        } else {
            other
        }
    }
}

theorem lt_imp_min<L: LinearOrder>(a: L, b: L) {
    a < b implies a.min(b) = a
}

theorem not_lt_imp_min<L: LinearOrder>(a: L, b: L) {
    not a < b implies a.min(b) = b
}

theorem gt_imp_min<L: LinearOrder>(a: L, b: L) {
    a > b implies a.min(b) = b
}

theorem not_gt_imp_min<L: LinearOrder>(a: L, b: L) {
    not a > b implies a.min(b) = a
}

theorem gte_imp_min<L: LinearOrder>(a: L, b: L) {
    a >= b implies a.min(b) = b
}

theorem not_gte_imp_min<L: LinearOrder>(a: L, b: L) {
    not a >= b implies a.min(b) = a
}

theorem lt_imp_max<L: LinearOrder>(a: L, b: L) {
    a < b implies a.max(b) = b
}

theorem not_lt_imp_max<L: LinearOrder>(a: L, b: L) {
    not a < b implies a.max(b) = a
}

theorem gt_imp_max<L: LinearOrder>(a: L, b: L) {
    a > b implies a.max(b) = a
}

theorem not_gt_imp_max<L: LinearOrder>(a: L, b: L) {
    not a > b implies a.max(b) = b
}

theorem gte_imp_max<L: LinearOrder>(a: L, b: L) {
    a >= b implies a.max(b) = a
}

theorem not_gte_imp_max<L: LinearOrder>(a: L, b: L) {
    not a >= b implies a.max(b) = b
}
