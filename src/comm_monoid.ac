from comm_semigroup import CommSemigroup
from monoid import Monoid
from nat.nat_monoid import Nat // For Nat.0, Nat.suc, and general Nat usage

/// CommMonoid represents a commutative, multiplicative monoid.
typeclass M: CommMonoid extends CommSemigroup, Monoid {
    // All the properties are provided by the base typeclasses.
}

theorem pow_distrib_mul[M: CommMonoid](a: M, b: M, c: Nat) {
    (a * b).pow(c) = a.pow(c) * b.pow(c)
} by {
    // Inductive proof on c
    define f(x: Nat) -> Bool {
        (a * b).pow(x) = a.pow(x) * b.pow(x)
    }

    // Base case: c = Nat.0
    // (a * b).pow(Nat.0) is M.1 by definition of pow.
    // a.pow(Nat.0) is M.1 by definition of pow.
    // b.pow(Nat.0) is M.1 by definition of pow.
    // So, f(Nat.0) becomes M.1 = M.1 * M.1.
    // This is true by mul_identity_right(M.1) or mul_identity_left(M.1) from Monoid.
    Monoid.mul_identity_right(M.1) // States M.1 * M.1 = M.1
    f(Nat.0)

    // Inductive step: Assume f(k), prove f(k.suc)
    forall(k: Nat) {
        if f(k) {
            // Inductive Hypothesis (IH):
            // (a * b).pow(k) = a.pow(k) * b.pow(k)

            // Goal: (a * b).pow(k.suc) = a.pow(k.suc) * b.pow(k.suc)

            // LHS expansion: (a * b).pow(k.suc) = (a * b) * (a * b).pow(k)
            // By IH: (a * b).pow(k.suc) = (a * b) * (a.pow(k) * b.pow(k))

            // RHS expansion: a.pow(k.suc) * b.pow(k.suc) = (a * a.pow(k)) * (b * b.pow(k))
            
            // Proof: Show expanded LHS equals expanded RHS using Commutativity and Associativity.
            // (a * b) * (a.pow(k) * b.pow(k)) = (a * a.pow(k)) * (b * b.pow(k))
            // This relies on the Acorn prover's ability to apply these properties for CommMonoid.
            (a * b) * (a.pow(k) * b.pow(k)) = (a * a.pow(k)) * (b * b.pow(k))
            
            // Therefore, using definitions of pow and the equality above:
            (a * b).pow(k.suc) = a.pow(k.suc) * b.pow(k.suc)
            f(k.suc)
        }
    }
    f(c) // Apply induction
}