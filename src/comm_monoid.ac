from comm_semigroup import CommSemigroup
from monoid import Monoid, pow
from nat_base import Nat // For Nat.0, Nat.suc, and general Nat usage

// CommMonoid represents a commutative, multiplicative monoid.
typeclass M: CommMonoid extends CommSemigroup, Monoid {
    // All the properties are provided by the base typeclasses.
}

theorem pow_distrib_mul<M: CommMonoid>(a: M, b: M, c: Nat) {
    pow(a * b, c) = pow(a, c) * pow(b, c)
} by {
    // Inductive proof on c
    define f(x: Nat) -> Bool {
        pow(a * b, x) = pow(a, x) * pow(b, x)
    }

    // Base case: c = Nat.0
    // pow(a * b, Nat.0) is M.1 by definition of pow.
    // pow(a, Nat.0) is M.1 by definition of pow.
    // pow(b, Nat.0) is M.1 by definition of pow.
    // So, f(Nat.0) becomes M.1 = M.1 * M.1.
    // This is true by mul_identity_right(M.1) or mul_identity_left(M.1) from Monoid.
    Monoid.mul_identity_right(M.1) // States M.1 * M.1 = M.1
    f(Nat.0)

    // Inductive step: Assume f(k), prove f(k.suc)
    forall(k: Nat) {
        if f(k) {
            // Inductive Hypothesis (IH):
            // pow(a * b, k) = pow(a, k) * pow(b, k)

            // Goal: pow(a * b, k.suc) = pow(a, k.suc) * pow(b, k.suc)

            // LHS expansion: pow(a * b, k.suc) = (a * b) * pow(a * b, k)
            // By IH: pow(a * b, k.suc) = (a * b) * (pow(a, k) * pow(b, k))

            // RHS expansion: pow(a, k.suc) * pow(b, k.suc) = (a * pow(a, k)) * (b * pow(b, k))
            
            // Proof: Show expanded LHS equals expanded RHS using Commutativity and Associativity.
            // (a * b) * (pow(a, k) * pow(b, k)) = (a * pow(a, k)) * (b * pow(b, k))
            // This relies on the Acorn prover's ability to apply these properties for CommMonoid.
            (a * b) * (pow(a, k) * pow(b, k)) = (a * pow(a, k)) * (b * pow(b, k))
            
            // Therefore, using definitions of pow and the equality above:
            pow(a * b, k.suc) = pow(a, k.suc) * pow(b, k.suc)
            f(k.suc)
        }
    }
    f(c) // Apply induction
}