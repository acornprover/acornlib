from nat import Nat
numerals Nat

inductive List<T> {
    nil
    cons(T, List<T>)
}

attributes List<T> {
    // Adding two lists concatenates them
    define add(self, other: List<T>) -> List<T> {
        match self {
            List.nil {
                other
            }
            List.cons(head, tail) {
                List.cons(head, tail.add(other))
            }
        }
    }

    // Whether this list contains a particular item.
    define contains(self, item: T) -> Bool {
        match self {
            List.nil {
                false
            }
            List.cons(head, tail) {
                if head = item {
                    true
                } else {
                    tail.contains(item)
                }
            }
        }
    }
}

theorem add_nil<T>(list: List<T>) {
    list + List.nil<T> = list
}

theorem nil_add<T>(list: List<T>) {
    List.nil<T> + list = list
}

theorem add_contains_left<T>(left: List<T>, right: List<T>, item: T) {
    left.contains(item) implies (left + right).contains(item)
} by {
    define f(x: List<T>) -> Bool {
        x.contains(item) implies (x + right).contains(item)
    }
    f(List.nil)
    forall(head: T, tail: List<T>) {
        if f(tail) {
            f(List.cons(head, tail))
        }
    }
}

theorem add_contains_right<T>(left: List<T>, right: List<T>, item: T) {
    right.contains(item) implies (left + right).contains(item)
} by {
    define f(x: List<T>) -> Bool {
        (x + right).contains(item)
    }
    f(List.nil)
    forall(head: T, tail: List<T>) {
        if f(tail) {
            f(List.cons(head, tail))
        }
    }
}

attributes List<T> {
    define contains_every(self) -> Bool {
        forall(x: T) {
            self.contains(x)
        }
    }

    define length(self) -> Nat {
        match self {
            List.nil {
                Nat.0
            }
            List.cons(_, tail) {
                tail.length.suc
            }
        }
    }
}

theorem add_length<T>(left: List<T>, right: List<T>) {
    left.length + right.length = (left + right).length
} by {
    define f(x: List<T>) -> Bool {
        x.length + right.length = (x + right).length
    }
    f(List.nil)
    forall(head: T, tail: List<T>) {
        if f(tail) {
            f(List.cons(head, tail))
        }
    }
}

attributes List<T> {
    let singleton: T -> List<T> = function(x: T) {
        List.cons(x, List.nil<T>)
    }

    // Remove all the duplicates in the list.
    // The last one is kept, to make the implementation simpler.
    define unique(self) -> List<T> {
        match self {
            List.nil {
                List.nil<T>
            }
            List.cons(head, tail) {
                if tail.contains(head) {
                    tail.unique
                } else {
                    List.cons(head, tail.unique)
                }
            }
        }
    }
}

theorem unique_length<T>(list: List<T>) {
    list.unique.length <= list.length
} by {
    define f(x: List<T>) -> Bool {
        x.unique.length <= x.length
    }
    f(List.nil)
    forall(head: T, tail: List<T>) {
        if f(tail) {
            tail.unique.length <= tail.length
            if tail.contains(head) {
                List.cons(head, tail).unique.length <= List.cons(head, tail).length
            } else {
                List.cons(head, tail).unique.length <= List.cons(head, tail).length
            }
            f(List.cons(head, tail))
        }
    }
}

attributes List<T> {
    define append(self, item: T) -> List<T> {
        self + List.singleton(item)
    }
}

// A list of the numbers from 0 to n-1.
define range(n: Nat) -> List<Nat> {
    match n {
        Nat.0 {
            List.nil<Nat>
        }
        Nat.suc(n) {
            range(n).append(n)
        }
    }
}

attributes List<T> {
    let range: Nat -> List<Nat> = range

    define filter(self, f: T -> Bool) -> List<T> {
        match self {
            List.nil {
                List.nil<T>
            }
            List.cons(head, tail) {
                if f(head) {
                    List.cons(head, tail.filter(f))
                } else {
                    tail.filter(f)
                }
            }
        }
    }
}

theorem length_range(n: Nat) {
    List.range(n).length = n
} by {
    // Induction on n
    define f(x: Nat) -> Bool {
        List.range(x).length = x
    }

    // Base case: List.range(0).length = 0
    List.range(0) = List.nil<Nat>
    List.nil<Nat>.length = Nat.0
    f(0)

    // Inductive step
    forall(x: Nat) {
        if f(x) {
            // Induction hypothesis: List.range(x).length = x
            List.range(x.suc) = range(x.suc)
            List.range(x.suc) = range(x).append(x)
            List.range(x.suc) = range(x) + List.singleton(x)

            // Use add_length theorem
            range(x).length + List.singleton(x).length = (range(x) + List.singleton(x)).length
            range(x).length + List.singleton(x).length = List.range(x.suc).length

            // Simplify the left side
            List.range(x).length = x
            List.singleton(x).length = Nat.1
            x + Nat.1 = x.suc
            x + List.singleton(x).length = x.suc
            List.range(x).length + List.singleton(x).length = x.suc

            // Therefore
            List.range(x.suc).length = x.suc
            f(x.suc)
        }
    }

    // Conclusion
    f(n)
}

define map<T, U>(items: List<T>, f: T -> U) -> List<U> {
    match items {
        List.nil {
            List.nil<U>
        }
        List.cons(head, tail) {
            List.cons(f(head), map(tail, f))
        }
    }
}

from add_comm_monoid import AddCommMonoid

define sum<A: AddCommMonoid>(items: List<A>) -> A {
    match items {
        List.nil {
            A.0
        }
        List.cons(head, tail) {
            head + sum(tail)
        }
    }
}

// The partial sums of an infinite series.
// partial(a) gives a new infinite sequence, where the nth
// element is the sum of the first n elements of a.
define partial<A: AddCommMonoid>(f: Nat -> A, n: Nat) -> A {
    sum(map(List.range(n), f))
}

theorem sum_add<A: AddCommMonoid>(left: List<A>, right: List<A>) {
    sum(left + right) = sum(left) + sum(right)
} by {
    define p(x: List<A>) -> Bool {
        sum(x + right) = sum(x) + sum(right)
    }

    // Base case: sum(nil + right) = sum(nil) + sum(right)
    sum(List.nil<A> + right) = sum(right)
    sum(List.nil<A>) = A.0
    A.0 + sum(right) = sum(right)
    p(List.nil)

    // Inductive step
    forall(head: A, tail: List<A>) {
        if p(tail) {
            // Induction hypothesis: sum(tail + right) = sum(tail) + sum(right)

            // Left side: sum(List.cons(head, tail) + right)
            sum(List.cons(head, tail) + right) = sum(List.cons(head, tail + right))
            sum(List.cons(head, tail + right)) = head + sum(tail + right)

            // Use induction hypothesis
            head + sum(tail + right) = head + (sum(tail) + sum(right))

            // Right side: sum(List.cons(head, tail)) + sum(right)
            sum(List.cons(head, tail)) = head + sum(tail)
            sum(List.cons(head, tail)) + sum(right) = (head + sum(tail)) + sum(right)

            // Use associativity
            (head + sum(tail)) + sum(right) = head + (sum(tail) + sum(right))

            // Therefore
            sum(List.cons(head, tail) + right) = sum(List.cons(head, tail)) + sum(right)
            p(List.cons(head, tail))
        }
    }
}

theorem map_add<T, U>(left: List<T>, right: List<T>, f: T -> U) {
    map(left + right, f) = map(left, f) + map(right, f)
} by {
    define p(x: List<T>) -> Bool {
        map(x + right, f) = map(x, f) + map(right, f)
    }

    // Base case: map(nil + right, f) = map(nil, f) + map(right, f)
    map(List.nil<T> + right, f) = map(right, f)
    map(List.nil<T>, f) = List.nil<U>
    List.nil<U> + map(right, f) = map(right, f)
    p(List.nil)

    // Inductive step
    forall(head: T, tail: List<T>) {
        if p(tail) {
            // Induction hypothesis: map(tail + right, f) = map(tail, f) + map(right, f)

            // Left side: map(List.cons(head, tail) + right, f)
            map(List.cons(head, tail) + right, f) = map(List.cons(head, tail + right), f)
            map(List.cons(head, tail + right), f) = List.cons(f(head), map(tail + right, f))

            // Use induction hypothesis
            List.cons(f(head), map(tail + right, f)) = List.cons(f(head), map(tail, f) + map(right, f))

            // Right side: map(List.cons(head, tail), f) + map(right, f)
            map(List.cons(head, tail), f) = List.cons(f(head), map(tail, f))
            map(List.cons(head, tail), f) + map(right, f) = List.cons(f(head), map(tail, f)) + map(right, f)
            List.cons(f(head), map(tail, f)) + map(right, f) = List.cons(f(head), map(tail, f) + map(right, f))

            // Therefore
            map(List.cons(head, tail) + right, f) = map(List.cons(head, tail), f) + map(right, f)
            p(List.cons(head, tail))
        }
    }
}

theorem map_append<T, U>(initial: List<T>, last: T, f: T -> U) {
    map(initial.append(last), f) = map(initial, f).append(f(last))
}

theorem sum_append<A: AddCommMonoid>(initial: List<A>, last: A) {
    sum(initial.append(last)) = sum(initial) + last
}

theorem add_assoc<T>(a: List<T>, b: List<T>, c: List<T>) {
    (a + b) + c = a + (b + c)
} by {
    define p(x: List<T>) -> Bool {
        (x + b) + c = x + (b + c)
    }

    // Base case: (nil + b) + c = nil + (b + c)
    (List.nil<T> + b) + c = b + c
    List.nil<T> + (b + c) = b + c
    p(List.nil)

    // Inductive step
    forall(head: T, tail: List<T>) {
        if p(tail) {
            // Induction hypothesis: (tail + b) + c = tail + (b + c)

            // Left side: (List.cons(head, tail) + b) + c
            (List.cons(head, tail) + b) + c = List.cons(head, tail + b) + c
            List.cons(head, tail + b) + c = List.cons(head, (tail + b) + c)

            // Use induction hypothesis
            List.cons(head, (tail + b) + c) = List.cons(head, tail + (b + c))

            // Right side: List.cons(head, tail) + (b + c)
            List.cons(head, tail) + (b + c) = List.cons(head, tail + (b + c))

            // Therefore
            (List.cons(head, tail) + b) + c = List.cons(head, tail) + (b + c)
            p(List.cons(head, tail))
        }
    }
}

theorem map_singleton<T, U>(f: T -> U, x: T) {
    map(List.singleton(x), f) = List.singleton(f(x))
}

theorem length_zero_imp_nil<T>(list: List<T>) {
    list.length = Nat.0 implies list = List.nil<T>
}

theorem add_to_nil<T>(a: List<T>, b: List<T>) {
    a + b = List.nil<T> implies a = List.nil<T> and b = List.nil<T>
}

theorem append_not_nil<T>(a: List<T>, t: T) {
    a.append(t) != List.nil<T>
}

from util import compose

theorem map_map<T, U, V>(items: List<T>, f: T -> U, g: U -> V) {
    map(map(items, f), g) = map(items, compose(g, f))
} by {
    define p(x: List<T>) -> Bool {
        map(map(x, f), g) = map(x, compose(g, f))
    }

    // Base case
    map(map(List.nil<T>, f), g) = map(List.nil<U>, g)
    map(List.nil<U>, g) = List.nil<V>
    map(List.nil<T>, compose(g, f)) = List.nil<V>
    p(List.nil)

    // Inductive step
    forall(head: T, tail: List<T>) {
        if p(tail) {
            // Left side
            map(map(List.cons(head, tail), f), g) = map(List.cons(f(head), map(tail, f)), g)
            map(List.cons(f(head), map(tail, f)), g) = List.cons(g(f(head)), map(map(tail, f), g))

            // Use induction hypothesis
            map(map(tail, f), g) = map(tail, compose(g, f))

            // Right side
            map(List.cons(head, tail), compose(g, f)) = List.cons(compose(g, f)(head), map(tail, compose(g, f)))
            List.cons(compose(g, f)(head), map(tail, compose(g, f))) = List.cons(g(f(head)), map(tail, compose(g, f)))

            // Therefore
            map(map(List.cons(head, tail), f), g) = map(List.cons(head, tail), compose(g, f))
            p(List.cons(head, tail))
        }
    }
}

attributes List<T> {
    // Drop the first element from a list.
    define tail(self) -> List<T> {
        match self {
            List.nil {
                List.nil<T>
            }
            List.cons(h, t) {
                t
            }
        }
    }

    // Drop the first n elements from a list.
    define drop(self, n: Nat) -> List<T> {
        match n {
            Nat.0 {
                self
            }
            Nat.suc(pred) {
                self.tail.drop(pred)
            }
        }
    }
}

theorem tail_cancels_cons<T>(a: T, b: List<T>) {
    List.cons(a, b).tail = b
}

theorem drop_zero<T>(a: List<T>) {
    a.drop(Nat.0) = a
}

theorem drop_one<T>(a: List<T>) {
    a.drop(Nat.1) = a.tail
}

theorem drop_cancels_add<T>(a: List<T>, b: List<T>) {
    (a + b).drop(a.length) = b
} by {
    define p(x: List<T>) -> Bool {
        (x + b).drop(x.length) = b
    }

    // Base case
    (List.nil<T> + b).drop(List.nil<T>.length) = b.drop(Nat.0)
    b.drop(Nat.0) = b
    p(List.nil)

    // Inductive step
    forall(head: T, tail: List<T>) {
        if p(tail) {
            // Induction hypothesis: (tail + b).drop(tail.length) = b

            // Left side
            (List.cons(head, tail) + b).drop(List.cons(head, tail).length) = (List.cons(head, tail + b)).drop(tail.length.suc)
            (List.cons(head, tail + b)).drop(tail.length.suc) = (tail + b).drop(tail.length)

            // Use induction hypothesis
            (tail + b).drop(tail.length) = b

            // Therefore
            p(List.cons(head, tail))
        }
    }
}

theorem drop_twice<T>(a: List<T>, m: Nat, n: Nat) {
    a.drop(m).drop(n) = a.drop(m + n)
} by {
    define f(x: Nat) -> Bool {
        forall(l: List<T>, k: Nat) {
            l.drop(x).drop(k) = l.drop(x + k)
        }
    }

    Nat.induction(f)

    forall(l: List<T>, k: Nat) {
        l.drop(Nat.0) = l
        drop_zero(l)
        l.drop(Nat.0).drop(k) = l.drop(k)
        Nat.0 + k = k
        l.drop(Nat.0 + k) = l.drop(k)
    }
    f(Nat.0)

    forall(x: Nat) {
        if f(x) {
            forall(l: List<T>, k: Nat) {
                // Induction hypothesis: l.drop(x).drop(k) = l.drop(x + k)
                l.drop(x.suc).drop(k) = l.tail.drop(x).drop(k)
                f(x)
                l.tail.drop(x).drop(k) = l.tail.drop(x + k)
                x.suc + k = (x + k).suc
                l.drop(x.suc + k) = l.drop((x + k).suc)
                l.drop((x + k).suc) = l.tail.drop(x + k)
                l.drop(x.suc).drop(k) = l.drop(x.suc + k)
            }
            f(x.suc)
        }
    }

    f(m)
}
