from semigroup import Semigroup

// A multiplicative monoid is a multiplicative semigroup with an identity element.
typeclass M: Monoid extends Semigroup {
    1: M
    
    // The identity element must satisfy the identity property
    mul_identity_right(a: M) {
        a * M.1 = a
    }
    
    // Other direction of the identity property
    mul_identity_left(a: M) {
        M.1 * a = a
    }
}

from nat_base import Nat

define pow<M: Monoid>(base: M, exp: Nat) -> M {
    match exp {
        Nat.0 {
            M.1
        }
        Nat.suc(n) {
            base * pow(base, n)
        }
    }
}

// Proof that a^n * a^m = a^(n+m)
theorem pow_add<M: Monoid>(a: M, n: Nat, m: Nat) {
    pow(a, n) * pow(a, m) = pow(a, n + m)
} by {
    // Define a helper function for induction
    define f(x: Nat) -> Bool { pow_add(a, x, m) }

    // Base case: a^0 * a^m = a^(0+m)
    pow(a, Nat.0) * pow(a, m) = M.1 * pow(a, m)
    pow(a, Nat.0) * pow(a, m) = pow(a, m)
    pow(a, Nat.0 + m) = pow(a, m)
    pow_add(a, Nat.0, m)
    f(Nat.0)

    // Inductive step
    forall(x: Nat) {
        if f(x) {
            pow_add(a, x, m)
            pow(a, x) * pow(a, m) = pow(a, x + m)

            // Now prove for x.suc
            pow(a, x.suc) * pow(a, m) = (a * pow(a, x)) * pow(a, m)
            pow(a, x.suc) * pow(a, m) = a * (pow(a, x) * pow(a, m))
            pow(a, x.suc) * pow(a, m) = a * pow(a, x + m)
            pow(a, x.suc) * pow(a, m) = pow(a, (x + m).suc)
            pow(a, x.suc) * pow(a, m) = pow(a, x.suc + m)
            pow_add(a, x.suc, m)
            f(x.suc)
        }
    }

    pow_add(a, n, m)
}

// Proof that a^1 = a
theorem pow_one<M: Monoid>(a: M) {
    pow(a, Nat.1) = a
} by {
    pow(a, Nat.1) = pow(a, Nat.0.suc) // by definition of Nat.1
    pow(a, Nat.0.suc) = a * pow(a, Nat.0) // by definition of pow
    a * pow(a, Nat.0) = a * M.1 // by definition of pow (base case)
    a * M.1 = a // by mul_identity_right
    pow(a, Nat.1) = a // transitivity
}