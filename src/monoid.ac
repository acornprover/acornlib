from semigroup import Semigroup

/// A multiplicative monoid is a multiplicative semigroup with an identity element.
/// Note that you need the identity to work on the right side as well as the left.
/// One doesn't imply the other.
typeclass M: Monoid extends Semigroup {
    /// The identity element of the monoid.
    1: M
    
    /// The identity element must satisfy the identity property on the right.
    mul_identity_right(a: M) {
        a * M.1 = a
    }
    
    /// The identity element must satisfy the identity property on the left.
    mul_identity_left(a: M) {
        M.1 * a = a
    }
}

from nat.nat_base import Nat

attributes M: Monoid {
    /// Raises a monoid element to a natural number power using repeated multiplication.
    define pow(self, exp: Nat) -> M {
        match exp {
            Nat.0 {
                M.1
            }
            Nat.suc(n) {
                self * self.pow(n)
            }
        }
    }
}

// Proof that a^n * a^m = a^(n+m)
theorem pow_add[M: Monoid](a: M, n: Nat, m: Nat) {
    a.pow(n) * a.pow(m) = a.pow(n + m)
} by {
    // Define a helper function for induction
    define f(x: Nat) -> Bool { pow_add(a, x, m) }

    // Base case: a^0 * a^m = a^(0+m)
    a.pow(Nat.0) * a.pow(m) = M.1 * a.pow(m)
    a.pow(Nat.0) * a.pow(m) = a.pow(m)
    a.pow(Nat.0 + m) = a.pow(m)
    pow_add(a, Nat.0, m)
    f(Nat.0)

    // Inductive step
    forall(x: Nat) {
        if f(x) {
            pow_add(a, x, m)
            a.pow(x) * a.pow(m) = a.pow(x + m)

            // Now prove for x.suc
            a.pow(x.suc) * a.pow(m) = (a * a.pow(x)) * a.pow(m)
            a.pow(x.suc) * a.pow(m) = a * (a.pow(x) * a.pow(m))
            a.pow(x.suc) * a.pow(m) = a * a.pow(x + m)
            a.pow(x.suc) * a.pow(m) = a.pow((x + m).suc)
            a.pow(x.suc) * a.pow(m) = a.pow(x.suc + m)
            pow_add(a, x.suc, m)
            f(x.suc)
        }
    }

    pow_add(a, n, m)
}

// Proof that a^1 = a
theorem pow_one[M: Monoid](a: M) {
    a.pow(Nat.1) = a
} by {
    a.pow(Nat.1) = a.pow(Nat.0.suc) // by definition of Nat.1
    a.pow(Nat.0.suc) = a * a.pow(Nat.0) // by definition of pow
    a * a.pow(Nat.0) = a * M.1 // by definition of pow (base case)
    a * M.1 = a // by mul_identity_right
    a.pow(Nat.1) = a // transitivity
}

// Proof that (a^n)^m = a ^ (n * m)
theorem pow_pow[M: Monoid](a: M, n: Nat, m: Nat) {
    a.pow(n).pow(m) = a.pow(n * m)
} by {
    // Define a helper function for induction
    define f(x: Nat) -> Bool { pow_pow(a, n, x) }

    // Base case
    f(Nat.0)

    // Inductive step
    forall(x: Nat) {
        if f(x) {
            a.pow(n).pow(x.suc) = a.pow(n).pow(x) * a.pow(n)
            a.pow(n).pow(x.suc) = a.pow(n * x) * a.pow(n)
            a.pow(n).pow(x.suc) = a.pow(n * x + n)
            f(x.suc)
        }
    }
}

// Proof that 1^n = 1
theorem one_pow[M: Monoid](n: Nat) {
    M.1.pow(n) = M.1
}