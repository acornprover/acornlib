// MulCommMonoid represents a commutative, multiplicative monoid.
typeclass M: MulCommMonoid {
    one: M

    mul: (M, M) -> M

    associative(a: M, b: M, c: M) {
        (a * b) * c = a * (b * c)
    }

    // The identity element must satisfy the identity property
    identity_right(a: M) {
        a * M.one = a
    }

    // Other direction of the identity property
    identity_left(a: M) {
        M.one * a = a
    }

    commutative(a: M, b: M) {
        a * b = b * a
    }
}

from nat import Nat

define pow<M: MulCommMonoid>(base: M, exp: Nat) -> M {
    match exp {
        Nat.0 {
            M.one
        }
        Nat.suc(n) {
            base * pow(base, n)
        }
    }
}

// Proof that a^n * a^m = a^(n+m)
theorem pow_add<M: MulCommMonoid>(a: M, n: Nat, m: Nat) {
    pow(a, n) * pow(a, m) = pow(a, n + m)
} by {
    // Define a helper function for induction
    define f(x: Nat) -> Bool { pow_add(a, x, m) }

    // Base case: a^0 * a^m = a^(0+m)
    pow(a, Nat.0) * pow(a, m) = M.one * pow(a, m)
    M.identity_left(pow(a, m))
    pow(a, Nat.0) * pow(a, m) = pow(a, m)
    pow(a, Nat.0 + m) = pow(a, m)
    pow_add(a, Nat.0, m)
    f(Nat.0)

    // Inductive step
    forall(x: Nat) {
        if f(x) {
            pow_add(a, x, m)
            pow(a, x) * pow(a, m) = pow(a, x + m)

            // Now prove for x.suc
            pow(a, x.suc) * pow(a, m) = (a * pow(a, x)) * pow(a, m)
            M.associative(a, pow(a, x), pow(a, m))
            pow(a, x.suc) * pow(a, m) = a * (pow(a, x) * pow(a, m))
            pow(a, x.suc) * pow(a, m) = a * pow(a, x + m)
            pow(a, x.suc) * pow(a, m) = pow(a, (x + m).suc)
            pow(a, x.suc) * pow(a, m) = pow(a, x.suc + m)
            pow_add(a, x.suc, m)
            f(x.suc)
        }
    }

    pow_add(a, n, m)
}

// Proof that (a*b)^n = a^n * b^n
theorem pow_mul_distrib<M: MulCommMonoid>(a: M, b: M, n: Nat) {
    pow(a * b, n) = pow(a, n) * pow(b, n)
} by {
    // Define a helper function for induction
    define f(x: Nat) -> Bool { pow_mul_distrib(a, b, x) }

    // Base case: (a*b)^0 = a^0 * b^0
    pow(a * b, Nat.0) = M.one
    pow(a, Nat.0) * pow(b, Nat.0) = M.one * M.one
    M.identity_right(M.one)
    pow(a, Nat.0) * pow(b, Nat.0) = M.one
    pow_mul_distrib(a, b, Nat.0)
    f(Nat.0)

    // Inductive step
    forall(x: Nat) {
        if f(x) {
            pow_mul_distrib(a, b, x)
            pow(a * b, x) = pow(a, x) * pow(b, x)

            // Now prove for x.suc
            pow(a * b, x.suc) = (a * b) * pow(a * b, x)
            pow(a * b, x.suc) = (a * b) * (pow(a, x) * pow(b, x))
            M.associative(a, b, pow(a, x) * pow(b, x))
            // (a * b) * (pow(a, x) * pow(b, x)) = a * (b * (pow(a, x) * pow(b, x)))
            M.associative(b, pow(a, x), pow(b, x))
            // b * (pow(a, x) * pow(b, x)) = b * pow(a, x) * pow(b, x)
            M.commutative(b, pow(a, x))
            // b * pow(a, x) * pow(b, x) = pow(a, x) * b * pow(b, x)
            M.associative(pow(a, x), b, pow(b, x))
            // pow(a, x) * b * pow(b, x) = pow(a, x) * (b * pow(b, x))
            // b * pow(b,x) = pow(b, x.suc)
            // So far: pow(a*b, x.suc) = a * (pow(a,x) * pow(b, x.suc))
            M.associative(a, pow(a,x), pow(b, x.suc))
            // a * (pow(a,x) * pow(b, x.suc)) = (a * pow(a,x)) * pow(b, x.suc)
            // a * pow(a,x) = pow(a, x.suc)
            // So far: pow(a*b, x.suc) = pow(a, x.suc) * pow(b, x.suc)
            pow(a * b, x.suc) = pow(a, x.suc) * pow(b, x.suc)
            pow_mul_distrib(a, b, x.suc)
            f(x.suc)
        }
    }

    pow_mul_distrib(a, b, n)
}