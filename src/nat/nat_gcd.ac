from nat.nat_base import strong_induction, true_below
from nat.basic_addition import Nat
from pair import Pair
numerals Nat

/// Performs one step of the Euclidean algorithm for computing GCD.
/// Takes the pair (a, b) and replaces it with (b, a mod b).
define gcd_step(p: Pair[Nat, Nat]) -> Pair[Nat, Nat] {
    if p.second = 0 {
        p
    } else {
        Pair.new(p.second, p.first.mod(p.second))
    }
}

/// Performs n steps of the Euclidean GCD algorithm.
define gcd_step_n(p: Pair[Nat, Nat], n: Nat) -> Pair[Nat, Nat] {
    match n {
        Nat.0 {
            p
        }
        Nat.suc(pred) {
            gcd_step(gcd_step_n(p, pred))
        }
    }
}

/// True if a predicate is false for all values below n.
define false_below(f: Nat -> Bool, n: Nat) -> Bool { forall(x: Nat) { x < n implies not f(x) } }

theorem all_false_below(f: Nat -> Bool) {
    forall(x: Nat) { false_below(f, x) } implies forall(x: Nat) { not f(x) }
}

/// True if m is the smallest natural number for which the predicate f is true.
define is_min(f: Nat -> Bool, m: Nat) -> Bool {
    f(m) and false_below(f, m)
}

// If f is true anywhere on the naturals, it has a min.
theorem has_min(f: Nat -> Bool, n: Nat) {
    f(n) implies exists(m: Nat) { is_min(f, m) }
} by {
    define g(x: Nat) -> Bool { has_min(f, x) }
    strong_induction(g)
    forall(k: Nat) {
        if true_below(g, k) {
            if f(k) {
                if false_below(f, k) {
                    is_min(f, k)
                    has_min(f, k)
                } else {
                    exists(a: Nat) { a < k and f(a) }
                    has_min(f, k)
                }
            } else {
                has_min(f, k)
            }
            g(k)
        }
    }
    g(n)
}

// A decreasing_to_zero function strictly decreases until it hits zero.
define decreasing_to_zero(f: Nat -> Nat) -> Bool {
    forall(x: Nat) {
        f(x) = 0 or f(x.suc) < f(x)
    }
}

theorem no_infinite_decreasing(f: Nat -> Nat) {
    exists(x: Nat) { f(x) <= f(x.suc) }
} by {
    if not no_infinite_decreasing(f) {
        forall(x: Nat) {
            not (f(x) <= f(x.suc))
        }
        let h = function(x: Nat) { x + f(x) <= f(0) }
        Nat.induction(h)
        0 + f(0) <= f(0)
        h(0)
        forall(x: Nat) {
            if h(x) {
                x + f(x) <= f(0)
                not (f(x) <= f(x.suc))
                f(x.suc) < f(x)
                x + f(x.suc) < x + f(x)
                (x + f(x.suc)).suc <= x + f(x)
                x.suc + f(x.suc) <= x + f(x)
                x.suc + f(x.suc) <= f(0)
                h(x.suc)
            }
        }
        forall(x: Nat) {
            h(x)
        }
        h(f(0).suc)
        f(0).suc + f(f(0).suc) <= f(0)
        f(0).suc <= f(0).suc + f(f(0).suc)
        let z = f(0).suc + f(f(0).suc)
        z <= f(0)
        f(0).suc <= z
        f(0).suc <= f(0)
        false
    }
}

theorem dtz_terminates(f: Nat -> Nat) {
    decreasing_to_zero(f) implies exists(n: Nat) { f(n) = 0 }
} by {
    let (n: Nat) satisfy { f(n) <= f(n.suc) }
    f(n) = 0 or f(n.suc) < f(n)
    f(n) = 0
}

theorem gcd_terminates(p: Pair[Nat, Nat]) {
    exists(n: Nat) { gcd_step_n(p, n).second = 0 }
} by {
    let f = function(x: Nat) { gcd_step_n(p, x).second }
    forall(x: Nat) {
        if f(x) != 0 {
            let q = gcd_step_n(p, x)
            gcd_step_n(p, x.suc) = gcd_step(gcd_step_n(p, x))
            gcd_step_n(p, x.suc) = gcd_step(q)
            f(x.suc) = gcd_step_n(p, x.suc).second
            f(x.suc) = gcd_step(q).second
            q.second != 0
            gcd_step(q) = Pair.new(q.second, q.first.mod(q.second))
            q.first.mod(q.second) = gcd_step(q).second
            f(x.suc) = q.first.mod(q.second)
            f(x.suc) = q.first.mod(f(x))
            q.first.mod(f(x)) < f(x)
            f(x.suc) < f(x)
        }
    }
    decreasing_to_zero(f)
}

define gcd_termination(p: Pair[Nat, Nat]) -> (Nat -> Bool) {
    function(n: Nat) {
        gcd_step_n(p, n).second = 0
    }
}

let num_gcd_steps(p: Pair[Nat, Nat]) -> n: Nat satisfy {
    is_min(gcd_termination(p), n)
} by {
    exists(k: Nat) { gcd_termination(p, k) }
}

theorem num_gcd_steps_terminates(p: Pair[Nat, Nat]) {
    gcd_step_n(p, num_gcd_steps(p)).second = 0
} by {
    exists(n: Nat) { is_min(gcd_termination(p), n) }
    let f = gcd_termination(p)
    is_min(f, num_gcd_steps(p))
    gcd_termination(p)(num_gcd_steps(p))
}

define gcd_pair(p: Pair[Nat, Nat]) -> Nat { gcd_step_n(p, num_gcd_steps(p)).first }

define gcd(a: Nat, b: Nat) -> Nat { gcd_pair(Pair.new(a, b)) }

define divides_both(a: Nat, p: Pair[Nat, Nat]) -> Bool {
    a.divides(p.first) and a.divides(p.second)
}

theorem divides_both_step(a: Nat, p: Pair[Nat, Nat]) {
    divides_both(a, p) implies divides_both(a, gcd_step(p))
} by {
    a.divides(p.first)
    a.divides(p.second)
    a.divides(p.first.mod(p.second))
    if p.second = 0 {
        gcd_step(p) = p
        divides_both(a, gcd_step(p))
    } else {
        gcd_step(p) = Pair[Nat, Nat].new(p.second, p.first.mod(p.second))
        gcd_step(p).second = p.first.mod(p.second)
        a.divides(gcd_step(p).second)
        gcd_step(p).first = p.second
        a.divides(gcd_step(p).first)
        divides_both(a, gcd_step(p))
    }
}

theorem divides_gcd_step_n(d: Nat, p: Pair[Nat, Nat], n: Nat) {
    divides_both(d, p) implies divides_both(d, gcd_step_n(p, n))
} by {
    let f = function(x: Nat) { divides_both(d, gcd_step_n(p, x)) }
    divides_both(d, gcd_step_n(p, 0))
    f(0)
    forall(x: Nat) {
        if f(x) {
            divides_both(d, gcd_step_n(p, x))
            divides_both(d, gcd_step(gcd_step_n(p, x)))
            divides_both(d, gcd_step_n(p, x.suc))
            f(x.suc)
        }
    }
    divides_both(d, gcd_step_n(p, n))
}

theorem divides_gcd_pair(d: Nat, p: Pair[Nat, Nat]) {
    divides_both(d, p) implies d.divides(gcd_pair(p))
} by {
    divides_both(d, gcd_step_n(p, num_gcd_steps(p)))
    d.divides(gcd_step_n(p, num_gcd_steps(p)).first)
}

theorem divides_gcd(d: Nat, a: Nat, b: Nat) {
    d.divides(a) and d.divides(b) implies d.divides(gcd(a, b))
} by {
    d.divides(Pair[Nat, Nat].new(a, b).first)
    d.divides(Pair[Nat, Nat].new(a, b).second)
    divides_both(d, Pair[Nat, Nat].new(a, b))
    divides_gcd_pair(d, Pair[Nat, Nat].new(a, b))

    d.divides(gcd_pair(Pair[Nat, Nat].new(a, b)))
    d.divides(gcd(a, b))
}

theorem divides_both_unstep(a: Nat, p: Pair[Nat, Nat]) {
    divides_both(a, gcd_step(p)) implies divides_both(a, p)
} by {
    if p.second = 0 {
        p = gcd_step(p)
        divides_both(a, p)
    } else {
        gcd_step(p) = Pair[Nat, Nat].new(p.second, p.first.mod(p.second))
        a.divides(gcd_step(p).first)
        exists(k0: Nat) { a.divides(Pair[Nat, Nat].new(p.second, k0).first) }
        a.divides(p.second)
        a.divides(gcd_step(p).second)
        exists(k0: Nat) { a.divides(Pair[Nat, Nat].new(k0, p.first.mod(p.second)).second) }
        a.divides(p.first.mod(p.second))
        a.divides(p.first)
        divides_both(a, p)
    }
}

theorem divides_gcd_step_n_converse(d: Nat, p: Pair[Nat, Nat], n: Nat) {
    divides_both(d, gcd_step_n(p, n)) implies divides_both(d, p)
} by {
    let f = function(x: Nat) {
        divides_gcd_step_n_converse(d, p, x)
    }
    Nat.induction(f)
    if divides_both(d, gcd_step_n(p, 0)) {
        divides_both(d, p)
    }
    divides_gcd_step_n_converse(d, p, 0)
    f(0)
    forall(x: Nat) {
        if f(x) {
            if divides_both(d, gcd_step_n(p, x.suc)) {
                divides_gcd_step_n_converse(d, p, x)
                divides_both(d, gcd_step_n(p, x))
                divides_both(d, p)
            }
            divides_gcd_step_n_converse(d, p, x.suc)
            f(x.suc)
        }
    }
}

theorem divides_gcd_pair_converse(d: Nat, p: Pair[Nat, Nat]) {
    d.divides(gcd_pair(p)) implies divides_both(d, p)
} by {
    gcd_pair(p) = gcd_step_n(p, num_gcd_steps(p)).first
    0 = gcd_step_n(p, num_gcd_steps(p)).second
    d.divides(gcd_step_n(p, num_gcd_steps(p)).first)
    d.divides(gcd_step_n(p, num_gcd_steps(p)).second)
    divides_both(d, gcd_step_n(p, num_gcd_steps(p)))
    divides_both(d, p)
}

theorem gcd_divides(d: Nat, a: Nat, b: Nat) {
    d.divides(gcd(a, b)) implies d.divides(a) and d.divides(b)
} by {
    let p = Pair[Nat, Nat].new(a, b)
    p.first = a
    p.second = b
    d.divides(gcd_pair(p))
    divides_both(d, p)
    d.divides(p.first)
    d.divides(a)
    d.divides(p.second)
    d.divides(b)
    d.divides(a) and d.divides(b)
}

theorem gcd_divides_left(a: Nat, b: Nat) {
    gcd(a, b).divides(a)
} by {
    gcd(a, b).divides(gcd(a, b))
}

theorem gcd_divides_right(a: Nat, b: Nat) {
    gcd(a, b).divides(b)
} by {
    gcd(a, b).divides(gcd(a, b))
}

theorem gcd_is_gcd(a: Nat, b: Nat, d: Nat) {
    a != 0 and b != 0 and d.divides(a) and d.divides(b) implies d <= gcd(a, b)
} by {
    not 0.divides(a)
    gcd(a, b) != 0
    d.divides(gcd(a, b))
    d <= gcd(a, b)
}

theorem gcd_nonzero_left(a: Nat, b: Nat) {
    a != 0 implies gcd(a, b) != 0
} by {
    if gcd(a, b) = 0 {
        0.divides(a)
        a = 0
        false
    }
}

theorem gcd_zero_right(a: Nat) { gcd(a, 0) = a } by {
    a.divides(a)
    a.divides(0)
    a.divides(gcd(a, 0))
    gcd(a, 0).divides(a)
}

theorem gcd_zero_left(a: Nat) { gcd(0, a) = a } by {
    gcd(a, 0).divides(gcd(0, a))
    a.divides(gcd(0, a))
    gcd(0, a).divides(a)
}

theorem gcd_comm(a: Nat, b: Nat) { gcd(a, b) = gcd(b, a) } by {
    gcd(b, a).divides(gcd(a, b))
    gcd(a, b).divides(gcd(b, a))
}

theorem gcd_nonzero_right(a: Nat, b: Nat) { b != 0 implies gcd(a, b) != 0 }

define mod_maintains(f: Nat -> Bool) -> Bool {
    forall(a: Nat, b: Nat) { f(a) and f(b) implies f(a.mod(b)) }
}

theorem mod_maintains_imp_gcd(f: Nat -> Bool, a: Nat, b: Nat) {
    mod_maintains(f) and f(a) and f(b) implies f(gcd(a, b))
} by {
    let p = Pair[Nat, Nat].new(a, b)
    let g = function(n: Nat) {
        f(gcd_step_n(p, n).first) and f(gcd_step_n(p, n).second)
    }
    gcd_step_n(p, 0).first = a
    gcd_step_n(p, 0).second = b
    f(gcd_step_n(p, 0).second)
    f(gcd_step_n(p, 0).first)
    g(0)
    forall(x: Nat) {
        if g(x) {
            gcd_step_n(p, x.suc) = gcd_step(gcd_step_n(p, x))
            f(gcd_step_n(p, x).first)
            f(gcd_step_n(p, x).second)

            if gcd_step_n(p, x).second = 0 {
                gcd_step_n(p, x.suc) = gcd_step_n(p, x)
                f(gcd_step_n(p, x.suc).first)
                f(gcd_step_n(p, x.suc).second)
                g(x.suc)
            } else {
                Pair.new(gcd_step_n(p, x).second,
                         gcd_step_n(p, x).first.mod(gcd_step_n(p, x).second)) = gcd_step(gcd_step_n(p, x))
                gcd_step_n(p, x.suc).first = gcd_step_n(p, x).second
                gcd_step_n(p, x).first.mod(gcd_step_n(p, x).second) = gcd_step(gcd_step_n(p, x)).second
                gcd_step_n(p, x.suc).second = gcd_step_n(p, x).first.mod(gcd_step_n(p, x).second)
                f(gcd_step_n(p, x.suc).first)
                f(gcd_step_n(p, x).first.mod(gcd_step_n(p, x).second))
                f(gcd_step_n(p, x.suc).second)
                g(x.suc)
            }
        }
    }
    g(num_gcd_steps(p))
    f(gcd_step_n(p, num_gcd_steps(p)).first)
    f(gcd(a, b))
}

theorem gcd_one_right(a: Nat) {
    gcd(a, 1) = 1
}

theorem gcd_one_left(a: Nat) {
    gcd(1, a) = 1
}

theorem gcd_mult_left_nonzero(a: Nat, b: Nat, m: Nat) {
    m != 0 implies m * gcd(a, b) = gcd(m * a, m * b)
} by {
    m.divides(m * a)
    m.divides(m * b)
    m.divides(gcd(m * a, m * b))
    let d: Nat satisfy {
        m * d = gcd(m * a, m * b)
    }

    // Overall we will prove equality by proving both sides divide the other.
    // First we prove that d equals gcd(a, b), to prove that right divides left.
    (m * d).divides(m * a)
    d.divides(a)
    (m * d).divides(m * b)
    d.divides(b)
    d.divides(gcd(a, b))
    (m * d).divides(m * gcd(a, b))
    gcd(m * a, m * b).divides(m * gcd(a, b))

    // Now we prove left divides right.
    (m * gcd(a, b)).divides(m * a)
    (m * gcd(a, b)).divides(m * b)
    (m * gcd(a, b)).divides(gcd(m * a, m * b))
}

theorem gcd_mult_left(a: Nat, b: Nat, m: Nat) {
    m * gcd(a, b) = gcd(m * a, m * b)
} by {
    if m = 0 {
        m * gcd(a, b) = 0
        gcd(m * a, m * b) = 0
    } else {
        m * gcd(a, b) = gcd(m * a, m * b)
    }
}

theorem gcd_mult_right(a: Nat, b: Nat, m: Nat) {
    gcd(a, b) * m = gcd(a * m, b * m)
} by {
    gcd_mult_left(a, b, m)
    gcd_comm(a, b)
    gcd_comm(m * a, m * b)
}

theorem cofactor(a: Nat, b: Nat, af: Nat, bf: Nat) {
    (
        gcd(a, b) != 0 and
        af * gcd(a, b) = a and
        bf * gcd(a, b) = b
    ) implies gcd(af, bf) = 1
} by {
    gcd(af, bf).divides(af)
    (gcd(a, b) * gcd(af, bf)).divides(a)
    gcd(af, bf).divides(bf)
    (gcd(a, b) * gcd(af, bf)).divides(b)
    (gcd(a, b) * gcd(af, bf)).divides(gcd(a, b))
    (gcd(a, b) * gcd(af, bf)).divides(gcd(a, b) * 1)
    gcd(af, bf).divides(1)
    gcd(af, bf) = 1
}

theorem gcd_of_prime(p: Nat, n: Nat) {
    p.is_prime implies gcd(p, n) = 1 or p.divides(n)
} by {
    gcd(p, n).divides(p)
    let d: Nat satisfy {
        d * gcd(p, n) = p
    }
    d != 0
    if d = 1 {
        gcd(p, n) = p
        p.divides(n)
    } else {
        if gcd(p, n) > 1 {
            d > 1
            p.is_composite
            false
        }
        gcd(p, n) != 0
        gcd(p, n) = 1
    }
}
