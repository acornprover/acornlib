from nat import Nat
from rat import Rat
from util import compose
from real.real_base import is_lower, is_greatest, has_greatest, is_dedekind_cut
from real.real_seq import Real, limit_rat, mul_rat_seq, rat_seq, eq_seq, converges, lift_seq, converges_to, limit, add_rat_seq, const_rat_seq, zero_rat_seq, eventual_lb

attributes Real {
    /// The product of two real numbers.
    define mul(self, other: Real) -> Real {
        limit_rat(mul_rat_seq(rat_seq(self), rat_seq(other)))
    }
}

theorem real_mul_comm(x: Real, y: Real) {
    x * y = y * x
} by {
    x * y = limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y)))
    y * x = limit_rat(mul_rat_seq(rat_seq(y), rat_seq(x)))
    mul_rat_seq(rat_seq(x), rat_seq(y)) = mul_rat_seq(rat_seq(y), rat_seq(x))
}

theorem mul3_as_seq(x: Real, y: Real, z: Real) {
    x * y * z = limit_rat(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))
} by {
    x * y * z = limit_rat(mul_rat_seq(rat_seq(x * y), rat_seq(z)))
    eq_seq(rat_seq(x * y), mul_rat_seq(rat_seq(x), rat_seq(y)))
    eq_seq(mul_rat_seq(rat_seq(x * y), rat_seq(z)), mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))
    converges(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))))
    converges_to(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))), x * y * z)
    limit(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))) = x * y * z
}

theorem mul_seq_assoc(a: Nat -> Rat, b: Nat -> Rat, c: Nat -> Rat) {
    mul_rat_seq(mul_rat_seq(a, b), c) = mul_rat_seq(a, mul_rat_seq(b, c))
}

theorem mul_assoc(x: Real, y: Real, z: Real) {
    x * (y * z) = (x * y) * z
} by {
    mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)) = mul_rat_seq(rat_seq(x), mul_rat_seq(rat_seq(y), rat_seq(z)))
    (x * y) * z = limit_rat(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))
    (x * y) * z = limit_rat(mul_rat_seq(rat_seq(x), mul_rat_seq(rat_seq(y), rat_seq(z))))
    (y * z) * x = limit_rat(mul_rat_seq(mul_rat_seq(rat_seq(y), rat_seq(z)), rat_seq(x)))
    mul_rat_seq(rat_seq(x), mul_rat_seq(rat_seq(y), rat_seq(z))) = mul_rat_seq(mul_rat_seq(rat_seq(y), rat_seq(z)), rat_seq(x))
    x * y * z = y * z * x
}

theorem limit_rat_rat_seq(x: Real) {
    x = limit_rat(rat_seq(x))
}

theorem limit_definition_of_add(x: Real, y: Real) {
    x + y = limit_rat(add_rat_seq(rat_seq(x), rat_seq(y)))
} by {
    converges_to(lift_seq(rat_seq(x)), x)
    converges_to(lift_seq(rat_seq(y)), y)
    converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), limit_rat(rat_seq(x)) + limit_rat(rat_seq(y)))
    converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), limit_rat(rat_seq(x)) + y)
    converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), x + y)
}

theorem eq_seq_rat_seq_limit(a: Nat -> Rat) {
    converges(lift_seq(a)) implies
    eq_seq(a, rat_seq(limit_rat(a)))
} by {
    converges_to(lift_seq(a), limit_rat(a))
    converges_to(lift_seq(rat_seq(limit_rat(a))), limit_rat(a))
    limit(lift_seq(a)) = limit(lift_seq(rat_seq(limit_rat(a))))
    converges_to(lift_seq(rat_seq(limit_rat(a))), limit(lift_seq(rat_seq(limit_rat(a)))))
}

theorem eq_seq_imp_limit_rat_eq(a: Nat -> Rat, b: Nat -> Rat) {
    eq_seq(a, b) implies
    limit_rat(a) = limit_rat(b)
}

theorem limit_rat_add(a: Nat -> Rat, b: Nat -> Rat) {
    converges(lift_seq(a)) and converges(lift_seq(b))
    implies
    limit_rat(add_rat_seq(a, b)) = limit_rat(a) + limit_rat(b)
}

theorem mul_distrib_right(x: Real, y: Real, z: Real) {
    x * (y + z) = x * y + x * z
} by {
    // Reduce the lhs to sequence form.
    y + z = limit_rat(add_rat_seq(rat_seq(y), rat_seq(z)))
    x * (y + z) = limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y + z)))
    let syz: Nat -> Rat = add_rat_seq(rat_seq(y), rat_seq(z))
    y + z = limit_rat(syz)
    converges(lift_seq(add_rat_seq(rat_seq(y), rat_seq(z))))
    converges(lift_seq(syz))
    eq_seq(syz, rat_seq(y + z))
    eq_seq(add_rat_seq(rat_seq(y), rat_seq(z)), rat_seq(y + z))
    eq_seq(rat_seq(y + z), add_rat_seq(rat_seq(y), rat_seq(z)))
    eq_seq(mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z))), mul_rat_seq(rat_seq(x), rat_seq(y + z)))
    limit_rat(mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z)))) = limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y + z)))
    x * (y + z) = limit_rat(mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z))))

    // Reduce the rhs to sequence form.
    x * y = limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y)))
    x * z = limit_rat(mul_rat_seq(rat_seq(x), rat_seq(z)))
    let s1: Nat -> Rat = mul_rat_seq(rat_seq(x), rat_seq(y))
    let s2: Nat -> Rat = mul_rat_seq(rat_seq(x), rat_seq(z))
    x * y = limit_rat(s1)
    x * z = limit_rat(s2)
    converges(lift_seq(s1))
    converges(lift_seq(s2))
    limit_rat(s1) + limit_rat(s2) = limit_rat(add_rat_seq(s1, s2))
    x * y + x * z = limit_rat(add_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), mul_rat_seq(rat_seq(x), rat_seq(z))))

    // Now observe that the sequences themselves are equal.
    mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z))) = add_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), mul_rat_seq(rat_seq(x), rat_seq(z)))
}

theorem mul_distrib_left(x: Real, y: Real, z: Real) {
    (x + y) * z = x * z + y * z
}

theorem limit_rat_mul_rat_seq(a: Nat -> Rat, b: Nat -> Rat) {
    converges(lift_seq(a)) and converges(lift_seq(b))
    implies
    limit_rat(mul_rat_seq(a, b)) = limit_rat(a) * limit_rat(b)
} by {
    converges_to(lift_seq(mul_rat_seq(a, b)), limit_rat(a) * limit_rat(b))
    converges_to(lift_seq(mul_rat_seq(a, b)), limit(lift_seq(mul_rat_seq(a, b))))
    limit(lift_seq(mul_rat_seq(a, b))) = limit_rat(a) * limit_rat(b)
}

theorem limit_rat_const_rat_seq(r: Rat) {
    limit_rat(const_rat_seq(r)) = Real.from_rat(r)
} by {
    converges_to(lift_seq(const_rat_seq(r)), limit_rat(rat_seq(Real.from_rat(r))))
    eq_seq(rat_seq(Real.from_rat(r)), const_rat_seq(r))
    limit_rat(rat_seq(Real.from_rat(r))) = limit_rat(const_rat_seq(r))
}

theorem mul_one_right(x: Real) {
    x * Real.1 = x
} by {
    converges(lift_seq(const_rat_seq(Rat.1)))
    limit_rat(rat_seq(x)) * limit_rat(const_rat_seq(Rat.1)) = limit_rat(mul_rat_seq(rat_seq(x), const_rat_seq(Rat.1)))
    mul_rat_seq(rat_seq(x), const_rat_seq(Rat.1)) = rat_seq(x)
    limit_rat(rat_seq(x)) = x
    x * limit_rat(const_rat_seq(Rat.1)) = x
    limit_rat(const_rat_seq(Rat.1)) = Real.from_rat(Rat.1)
}

theorem mul_one_left(x: Real) {
    Real.1 * x = x
}

theorem mul_zero_right(x: Real) {
    x * Real.0 = Real.0
} by {
    limit_rat(rat_seq(x)) * limit_rat(zero_rat_seq) = limit_rat(mul_rat_seq(rat_seq(x), zero_rat_seq))
    mul_rat_seq(rat_seq(x), zero_rat_seq) = zero_rat_seq
}

theorem mul_zero_left(x: Real) {
    Real.0 * x = Real.0
}

theorem mul_neg_one_left(x: Real) {
    -Real.1 * x = -x
} by {
    (Real.1 + -Real.1) * x = Real.0
    Real.1 * x + -Real.1 * x = Real.0
    x + -Real.1 * x = Real.0
}

theorem mul_neg_one_right(x: Real) {
    x * -Real.1 = -x
}

theorem mul_neg_left(x: Real, y: Real) {
    -x * y = -(x * y)
}

theorem mul_neg_right(x: Real, y: Real) {
    x * -y = -(x * y)
}

theorem mul_sub_distrib_right(x: Real, y: Real, z: Real) {
    x * (y - z) = x * y - x * z
}

theorem mul_sub_distrib_left(x: Real, y: Real, z: Real) {
    (x - y) * z = x * z - y * z
}

theorem real_lte_imp_rat_lte(p: Rat, q: Rat) {
    Real.from_rat(p) <= Real.from_rat(q) implies
    p <= q
}

theorem pos_lte_imp_pos(x: Real, y: Real) {
    x.is_positive and x <= y implies
    y.is_positive
}

theorem mul_pos_pos(x: Real, y: Real) {
    x.is_positive and y.is_positive
    implies
    (x * y).is_positive
} by {
    let x_lb: Rat satisfy {
        x_lb.is_positive and Real.from_rat(x_lb) < x
    }
    eventual_lb(lift_seq(rat_seq(x)), Real.from_rat(x_lb))
    let nx: Nat satisfy {
        forall(i: Nat) {
            nx <= i implies
            Real.from_rat(x_lb) <= lift_seq(rat_seq(x))(i)
        }
    }
    let y_lb: Rat satisfy {
        y_lb.is_positive and Real.from_rat(y_lb) < y
    }
    eventual_lb(lift_seq(rat_seq(y)), Real.from_rat(y_lb))
    let ny: Nat satisfy {
        forall(i: Nat) {
            ny <= i implies
            Real.from_rat(y_lb) <= lift_seq(rat_seq(y))(i)
        }
    }
    let n: Nat satisfy {
        nx <= n and ny <= n
    }
    forall(i: Nat) {
        if n <= i {
            nx <= i
            Real.from_rat(x_lb) <= lift_seq(rat_seq(x))(i)
            Real.from_rat(x_lb) <= Real.from_rat(rat_seq(x)(i))
            x_lb <= rat_seq(x)(i)
            ny <= i
            Real.from_rat(y_lb) <= lift_seq(rat_seq(y))(i)
            y_lb <= rat_seq(y)(i)
            x_lb * y_lb <= rat_seq(x)(i) * rat_seq(y)(i)
            x_lb * y_lb <= mul_rat_seq(rat_seq(x), rat_seq(y))(i)
            Real.from_rat(x_lb * y_lb) <= lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y)))(i)
        }
    }
    eventual_lb(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))), Real.from_rat(x_lb * y_lb))
    Real.from_rat(x_lb * y_lb) <= limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y)))
    Real.from_rat(x_lb * y_lb) <= x * y
    (x_lb * y_lb).is_positive
    Real.from_rat(x_lb * y_lb).is_positive
}

theorem mul_neg_pos(x: Real, y: Real) {
    x.is_negative and y.is_positive
    implies
    (x * y).is_negative
}

theorem mul_pos_neg(x: Real, y: Real) {
    x.is_positive and y.is_negative
    implies
    (x * y).is_negative
}

theorem mul_neg_neg(x: Real, y: Real) {
    x.is_negative and y.is_negative
    implies
    (x * y).is_positive
}

theorem mul_nonneg_nonneg(x: Real, y: Real) {
    not x.is_negative and not y.is_negative
    implies
    not (x * y).is_negative
} by {
    if x = Real.0 {
        x * y = Real.0
        not (x * y).is_negative
    } else {
        x.is_positive
        if y = Real.0 {
            x * y = Real.0
            not (x * y).is_negative
        } else {
            (x * y).is_positive
            not (x * y).is_negative
        }
    }
}

theorem square_nonneg(x: Real) {
    x * x >= Real.0
} by {
    if x = Real.0 {
        x * x = Real.0
        x * x >= Real.0
    } else {
        if x.is_positive {
            x.is_positive
            (x * x).is_positive
            (x * x) > Real.0
            (x * x) >= Real.0
        } else {
            x.is_negative
            (x * x).is_positive
            (x * x) > Real.0
            (x * x) >= Real.0
        }
    }
}

theorem lt_mul_pos_right(x: Real, y: Real, z: Real) {
    z.is_positive and x < y implies
    x * z < y * z
}

theorem lt_mul_pos_left(x: Real, y: Real, z: Real) {
    z.is_positive and x < y implies
    z * x < z * y
}

theorem lte_mul_nonneg_right(x: Real, y: Real, z: Real) {
    not z.is_negative and x <= y implies
    x * z <= y * z
} by {
    if z = Real.0 {
        x * z = Real.0
        y * z = Real.0
        x * z = y * z
        x * z <= y * z
    } else {
        z.is_positive
        if x = y {
            x * z = y * z
            x * z <= y * z
        } else {
            x < y
            x * z < y * z
            x * z <= y * z
        }
    }
}

theorem lte_mul_nonneg_left(x: Real, y: Real, z: Real) {
    not z.is_negative and x <= y implies
    z * x <= z * y
}

theorem lt_mul_neg_right(x: Real, y: Real, z: Real) {
    z.is_negative and x < y implies
    y * z < x * z
} by {
    not y < x
    y != x
    x - y != Real.0
    (x - y).is_negative
    ((x - y) * z).is_positive
}

theorem lt_mul_neg_left(x: Real, y: Real, z: Real) {
    z.is_negative and x < y implies
    z * y < z * x
}

theorem add_neg_neg(x: Real, y: Real) {
    x.is_negative and y.is_negative implies (x + y).is_negative
}

theorem zero_lte_imp_non_neg(x: Real) {
    Real.0 <= x implies not x.is_negative
}

theorem non_neg_imp_zero_lte(x: Real) {
    not x.is_negative implies Real.0 <= x
}

theorem mul_from_rat(a: Rat, b: Rat) {
    Real.from_rat(a) * Real.from_rat(b) = Real.from_rat(a * b)
} by {
    // Represent the lhs as a limit
    let mr: Nat -> Rat = mul_rat_seq(rat_seq(Real.from_rat(a)), rat_seq(Real.from_rat(b)))
    Real.from_rat(a) * Real.from_rat(b) = limit_rat(mr)

    // Simplify the lhs
    eq_seq(rat_seq(Real.from_rat(a)), const_rat_seq(a))
    eq_seq(rat_seq(Real.from_rat(b)), const_rat_seq(b))
    eq_seq(mul_rat_seq(const_rat_seq(a), const_rat_seq(b)), mr)
    mul_rat_seq(const_rat_seq(a), const_rat_seq(b)) = const_rat_seq(a * b)
}

theorem gt_pos_is_pos(a: Real, b: Real) {
    a.is_positive and a < b implies b.is_positive
}

theorem exists_small_mul(a: Real, b: Real) {
    not a.is_negative and b.is_positive implies
    exists(c: Real) {
        c.is_positive and a * c < b
    }
} by {
    let a_ub: Rat satisfy {
        a < Real.from_rat(a_ub)
    }
    Real.from_rat(a_ub).is_positive
    a_ub.is_positive
    let b_lb: Rat satisfy {
        b_lb.is_positive and Real.from_rat(b_lb) < b
    }
    let r: Rat satisfy {
        a_ub * r = b_lb
    }
    r.is_positive
    let c: Real = Real.from_rat(r)
    c.is_positive
    Real.from_rat(a_ub) * Real.from_rat(r) = Real.from_rat(b_lb)
    Real.from_rat(a_ub) * c = Real.from_rat(b_lb)
    Real.from_rat(a_ub) * c < b
    a * c < Real.from_rat(a_ub) * c
    a * c < b
}

theorem exists_small_mul_variant(a: Real, b: Real) {
    b.is_positive implies
    exists(c: Real) {
        c.is_positive and a.abs * c < b
    }
} by {
    not a.abs.is_negative
}

theorem exists_small_mul_variant_2(a: Real, b: Real) {
    a.is_positive and b.is_positive implies
    exists(c: Real) {
        c.is_positive and c * a < b
    }
} by {
    not a.is_negative
}

theorem mul_abs(a: Real, b: Real) {
    a.abs * b.abs = (a * b).abs
} by {
    if a.is_negative {
        a.abs = -a
        if b.is_negative {
            b.abs = -b
            a.abs * b.abs = (a * b).abs
        } else {
            b.abs = b
            not a.is_positive
            not (-a).is_negative
            ((-a) * b).abs = (-a) * b
            a.abs * b.abs = (a * b).abs
        }
    } else {
        a.abs = a
        if b.is_negative {
            b.abs = -b
            not b.is_positive
            not (-b).is_negative
            (a * -b).abs = a * -b
            a.abs * b.abs = (a * b).abs
        } else {
            b.abs = b
            a.abs * b.abs = (a * b).abs
        }
    }
}

theorem square_zero_imp_zero(a: Real) {
    a * a = Real.0 implies a = Real.0
} by {
    if a.is_positive {
        (a * a).is_positive
        false
    }
    if a.is_negative {
        (a * a).is_positive
        false
    }
}

// Multiplicative algebraic structure.

from semigroup import Semigroup

instance Real: Semigroup {
    let mul: (Real, Real) -> Real = Real.mul
}

from monoid import Monoid

instance Real: Monoid {
    let 1: Real = Real.1
}

from semiring import Semiring

instance Real: Semiring

from ring import Ring

instance Real: Ring

from comm_ring import CommRing

instance Real: CommRing