from util import constant, compose
from nat import Nat
from rat import Rat
from list import partial, sum, map, List
from real.real_set import Real
from real.real_seq import cauchy_bound, tail_bound, add_seq, neg_rat_seq
from real.real_ring import converges, converges_to, limit, lift_seq

numerals Real

// This file defines infinite series and proves theorems about them.

attributes Real {
    // Placeholder to let other modules import Real from here.
}

// seq_lte is whether every element of the sequence is lte.
define seq_lte(a: Nat -> Real, b: Nat -> Real) -> Bool {
    forall(n: Nat) {
        a(n) <= b(n)
    }
}

theorem partial_suc(a: Nat -> Real, n: Nat) {
    partial(a, n.suc) = partial(a, n) + a(n)
} by {
    // Simplify the left hand side.
    partial(a, n.suc) = sum(map(n.suc.range, a))
    n.suc.range = n.range + List.singleton(n)
    map(n.suc.range, a) = map(n.range, a) + map(List.singleton(n), a)
    sum(map(n.suc.range, a)) = sum(map(n.range, a)) + sum(map(List.singleton(n), a))
}

// Theorem: If seq_lte(a, b), then their partials also obey seq_lte.
theorem partial_seq_lte(a: Nat -> Real, b: Nat -> Real) {
    seq_lte(a, b) implies seq_lte(partial(a), partial(b))
} by {
    // Define a predicate for our induction
    define p(n: Nat) -> Bool {
        partial(a)(n) <= partial(b)(n)
    }

    partial(a)(Nat.0) <= partial(b)(Nat.0)
    p(Nat.0)

    // Inductive step
    forall(n: Nat) {
        if p(n) {
            partial(a, n) <= partial(b, n)
            a(n) <= b(n)
            partial(a, n) + a(n) <= partial(b, n) + a(n)
            partial(a, n) + a(n) <= partial(b, n) + b(n)
            partial(a)(n.suc) <= partial(b)(n.suc)
            p(n.suc)
        }
    }

    // By induction, p holds for all n
    forall(n: Nat) {
        p(n)
    }
}

// This definition of increasing is not strict.
// It includes less-than-or-equal.
define is_increasing(a: Nat -> Real) -> Bool {
    forall(n: Nat) {
        a(n) <= a(n.suc)
    }
}

theorem distant_increasing(a: Nat -> Real, m: Nat, n: Nat) {
    is_increasing(a) and m <= n implies a(m) <= a(n)
} by {
    // Define a predicate for our induction
    define p(k: Nat) -> Bool {
        forall(j: Nat) {
            j + k <= n implies a(j) <= a(j + k)
        }
    }

    // Base case: k = 0
    forall(j: Nat) {
        if j + Nat.0 <= n {
            j <= n
            j + Nat.0 = j
            a(j) <= a(j)
        }
    }
    p(Nat.0)

    // Inductive step: if p(k) holds, prove p(k.suc)
    forall(k: Nat) {
        if p(k) {
            forall(j: Nat) {
                if j + k.suc <= n {
                    // This means j+k+1 <= n, which means j+k <= n-1 < n
                    j + k <= n

                    // Apply p(k) to get a(j) <= a(j+k)
                    a(j) <= a(j + k)

                    // Apply the definition of is_increasing to the point j+k
                    a(j + k) <= a(j + k.suc)

                    // Combine the inequalities
                    a(j) <= a(j + k.suc)
                }
            }
            p(k.suc)
        }
    }

    // Apply the predicate with j=m, k=n-m
    if m <= n {
        let k: Nat satisfy { m + k = n }
        p(k)
        m + k <= n
        a(m) <= a(m + k)
        a(m) <= a(n)
    }
}

define is_upper_bound(a: Nat -> Real, b: Real) -> Bool {
    forall(n: Nat) {
        a(n) <= b
    }
}

define is_least_upper_bound(a: Nat -> Real, l: Real) -> Bool {
    is_upper_bound(a, l) and forall(x: Real) {
        x < l implies not is_upper_bound(a, x)
    }
}

define is_lower_bound(a: Nat -> Real, b: Real) -> Bool {
    forall(n: Nat) {
        b <= a(n)
    }
}

// Theorem: If a sequence is increasing and converges, then its limit is an upper bound
theorem increasing_convergent_bounded_by_limit(a: Nat -> Real) {
    is_increasing(a) and converges(a)
    implies is_upper_bound(a, limit(a))
} by {
    // We'll prove that for any n, a(n) <= limit(a)
    forall(n: Nat) {
        // Suppose for contradiction that a(n) > limit(a)
        if a(n) > limit(a) {
            limit(a) < a(n)

            // Find a value that's between limit(a) and a(n)
            let ub: Real satisfy {
                limit(a) < ub and ub < a(n)
            }

            // Since the sequence converges to limit(a), there must be a point
            // after which all sequence values are < ub
            let eps = ub - limit(a)
            eps.is_positive

            // By the definition of convergence, find a point where the sequence
            // is within eps of the limit for all indices beyond that point
            let (big_n: Nat) satisfy {
                forall(i: Nat) {
                    big_n <= i implies a(i).is_close(limit(a), eps)
                }
            }

            // Since a(n) > ub, we know n can't be >= big_n (or a(n) would be within eps of limit(a))
            // So either n < big_n or we have a contradiction
            // Case 1: n < big_n
            if n < big_n {
                // Since sequence is increasing, a(n) <= a(big_n)
                a(n) <= a(big_n)

                // But since a(big_n) is within eps of limit(a), we have a(big_n) < ub
                a(big_n).is_close(limit(a), eps)
                // Being close means the absolute difference is < eps
                (a(big_n) - limit(a)).abs < eps
                // For real numbers, if they're close and one is less than another plus epsilon
                // then the first is less than the second plus epsilon
                a(big_n) < limit(a) + eps
                // And since eps = ub - limit(a), we have limit(a) + eps = ub
                limit(a) + eps = ub
                a(big_n) < ub

                // So a(n) <= a(big_n) < ub, contradicting our assumption that a(n) > ub
                a(n) < ub
                false
            } else {
                // Case 2: n >= big_n
                // Then a(n) is within eps of limit(a)
                a(n).is_close(limit(a), eps)
                // Being close means the absolute difference is < eps
                (a(n) - limit(a)).abs < eps
                // For real numbers, if they're close and one is less than another plus epsilon
                // then the first is less than the second plus epsilon
                a(n) < limit(a) + eps
                // And since eps = ub - limit(a), we have limit(a) + eps = ub
                limit(a) + eps = ub
                a(n) < ub

                // Contradicting our assumption that a(n) > ub
                false
            }

            // Either way, we get a contradiction, so a(n) <= limit(a)
        }

        // Therefore, a(n) <= limit(a)
        a(n) <= limit(a)
    }
}

define image(a: Nat -> Real, x: Real) -> Bool {
    exists(n: Nat) {
        a(n) = x
    }
}

theorem ub_imp_image_ub(a: Nat -> Real, b: Real) {
    is_upper_bound(a, b)
    implies b.is_set_upper_bound(image(a))
}

// If there's an upper bound, there's a least upper bound.
theorem ub_imp_lub(a: Nat -> Real, b: Real) {
    is_upper_bound(a, b) implies exists(c: Real) {
        is_least_upper_bound(a, c)
    }
} by {
    b.is_set_upper_bound(image(a))
    let c: Real satisfy {
        c.is_set_least_upper_bound(image(a))
    }
    is_upper_bound(a, c)
    forall(x: Real) {
        if x < c {
            if is_upper_bound(a, x) {
                x.is_set_upper_bound(image(a))
                false
            }
        }
    }
    is_least_upper_bound(a, c)
}

// The monotone convergence principle states that any increasing sequence 
// that is bounded above converges
theorem monotone_convergence_principle(a: Nat -> Real, b: Real) {
    is_increasing(a) and is_upper_bound(a, b) implies converges(a)
} by {
    let l: Real satisfy {
        is_least_upper_bound(a, l)
    }
    
    forall(eps: Real) {
        if eps.is_positive {
            // Find epsilon/2 for triangle inequality
            let eps2: Real satisfy {
                eps2.is_positive and eps2 + eps2 < eps
            }
            
            // Since l is the least upper bound, l-eps2 is not an upper bound
            let x = l - eps2
            x < l
            not is_upper_bound(a, x)
            
            // If x is not an upper bound, there exists some n such that a(n) > x
            let n: Nat satisfy {
                not a(n) <= x
            }
            // We know a(n) > x = l - eps2
            l - eps2 < a(n)
            
            // For all indices i,j ≥ n, prove they're within epsilon of each other
            forall(i: Nat, j: Nat) {
                if n <= i and n <= j {
                    n <= i
                    a(n) <= a(i)
                    n <= j
                    a(n) <= a(j)
                    a(i) <= l
                    a(j) <= l
                    l - eps2 < a(n)
                    l - eps2 < a(i)
                    l - eps2 < a(j)
                    a(i) < l + eps2
                    (l - a(i)).abs < eps2
                    (a(i) - l).abs < eps2
                    l - eps2 < a(j)
                    a(j) <= l
                    a(j) < l + eps2
                    (a(j) - l).abs < eps2
                    (a(i) - a(j)).abs < eps2 + eps2
                    eps2 + eps2 < eps
                    (a(i) - a(j)).abs < eps
                    a(i).is_close(a(j), eps)
                }
            }
            
            // We've proven that for all i,j ≥ n,
            // a(i) and a(j) are within epsilon of each other.
            // This is exactly the definition of cauchy_condition
            cauchy_bound(a, n, eps)
        }
    }
}

theorem nonneg_partial_increasing(a: Nat -> Real) {
    is_lower_bound(a, Real.0) implies is_increasing(partial(a))
}

theorem nonneg_partial_bounded_above(a: Nat -> Real) {
    is_lower_bound(a, Real.0) and converges(partial(a))
    implies is_upper_bound(partial(a), limit(partial(a)))
} by {
    is_increasing(partial(a))
}

theorem seq_lte_ub(a: Nat -> Real, b: Nat -> Real, ub: Real) {
    seq_lte(a, b) and is_upper_bound(b, ub)
    implies is_upper_bound(a, ub)
}

theorem comparison_test(a: Nat -> Real, b: Nat -> Real) {
    is_lower_bound(a, Real.0)
    and seq_lte(a, b)
    and converges(partial(b))
    implies converges(partial(a))
} by { 
    is_lower_bound(b, Real.0)  
    seq_lte(partial(a), partial(b))
    is_upper_bound(partial(b), limit(partial(b)))
    is_upper_bound(partial(a), limit(partial(b)))
}

define mul_seq(a: Real, b: Nat -> Real, n: Nat) -> Real {
    a * b(n)
}

theorem const_converges(a: Real) {
    converges(constant[Nat, Real](a))
}

theorem const_limit(a: Real) {
    limit(constant[Nat, Real](a)) = a
}

theorem const_converges_to(a: Real) {
    converges_to(constant[Nat, Real](a), a)
}

theorem mul_seq_zero(a: Nat -> Real) {
    mul_seq(Real.0, a) = constant[Nat, Real](Real.0)
}

theorem mul_seq_converges_to(a: Real, b: Nat -> Real) {
    converges(b) implies converges_to(mul_seq(a, b), a * limit(b))
} by {
    converges_to(b, limit(b))
    forall(eps: Real) {
        if eps.is_positive {
            let eps2: Real satisfy {
                eps2.is_positive and a.abs * eps2 < eps
            }
            let n: Nat satisfy {
                tail_bound(b, limit(b), n, eps2)
            }
            forall(i: Nat) {
                if n <= i {
                    b(i).is_close(limit(b), eps2)
                    (b(i) - limit(b)).abs < eps2
                    a.abs * (b(i) - limit(b)).abs <= a.abs * eps2
                    (a * b(i) - a * limit(b)).abs <= a.abs * eps2
                    (a * b(i) - a * limit(b)).abs < eps
                    mul_seq(a, b)(i).is_close(a * limit(b), eps)
                }
            }
            tail_bound(mul_seq(a, b), a * limit(b), n, eps)
        }
    }
}

theorem mul_seq_one(a: Nat -> Real) {
    mul_seq(Real.1, a) = a
}

theorem mul_seq_neg_one_converges_converse(a: Nat -> Real) {
    converges(mul_seq(-Real.1, a)) implies converges(a)
} by {
    converges(mul_seq(-Real.1, mul_seq(-Real.1, a)))
    mul_seq(-Real.1, mul_seq(-Real.1, a)) = mul_seq((-Real.1) * -Real.1, a)
    converges(mul_seq((-Real.1) * -Real.1, a))
    -Real.1 * -Real.1 = Real.1
    converges(mul_seq(Real.1, a))
    mul_seq(Real.1, a) = a
}

theorem mul_seq_comm(a: Real, b: Real, c: Nat -> Real) {
    mul_seq(a, mul_seq(b, c)) = mul_seq(b, mul_seq(a, c))
}

theorem mul_seq_combine(a: Real, b: Real, c: Nat -> Real) {
    mul_seq(a * b, c) = mul_seq(a, mul_seq(b, c))
}

theorem converges_mul_seq(a: Real, b: Nat -> Real) {
    converges(b) implies converges(mul_seq(a, b))
}

// Maybe it would have been better to not define partial this way.
theorem partial_zero(a: Nat -> Real) {
    partial(a, Nat.0) = Real.0
}

theorem partial_add_seq_comm(a: Nat -> Real, b: Nat -> Real) {
    partial(add_seq(a, b)) = add_seq(partial(a), partial(b))
} by {
    // Define a predicate for induction on n
    define p(n: Nat) -> Bool {
        partial(add_seq(a, b), n) = add_seq(partial(a), partial(b))(n)
    }
    
    // Base case: n = 0
    add_seq(partial(a), partial(b))(Nat.0) = Real.0 + Real.0
    add_seq(partial(a), partial(b))(Nat.0) = Real.0
    p(Nat.0)
    
    // Inductive step
    forall(n: Nat) {
        if p(n) {
            // By the induction hypothesis
            partial(add_seq(a, b), n) = add_seq(partial(a), partial(b))(n)
            
            // Now we need to prove for n.suc
            partial(add_seq(a, b), n.suc) = partial(add_seq(a, b), n) + add_seq(a, b)(n)
            partial(add_seq(a, b), n.suc) = add_seq(partial(a), partial(b))(n) + (a(n) + b(n))
            
            partial(a, n.suc) = partial(a, n) + a(n)
            partial(b, n.suc) = partial(b, n) + b(n)
            
            add_seq(partial(a), partial(b))(n.suc) = partial(a)(n.suc) + partial(b)(n.suc)
            add_seq(partial(a), partial(b))(n.suc) = (partial(a, n) + a(n)) + (partial(b, n) + b(n))
            
            // Rearranging using associativity and commutativity of addition
            (partial(a, n) + a(n)) + (partial(b, n) + b(n)) = (partial(a, n) + partial(b, n)) + (a(n) + b(n))
            (partial(a, n) + partial(b, n)) + (a(n) + b(n)) = add_seq(partial(a), partial(b))(n) + (a(n) + b(n))
            
            // Therefore
            partial(add_seq(a, b), n.suc) = add_seq(partial(a), partial(b))(n.suc)
            p(n.suc)
        }
    }
}

theorem partial_mul_seq_comm(a: Real, b: Nat -> Real) {
    partial(mul_seq(a, b)) = mul_seq(a, partial(b))
} by {
    // Define a predicate for induction on n
    define p(n: Nat) -> Bool {
        partial(mul_seq(a, b), n) = mul_seq(a, partial(b))(n)
    }
    
    // Base case: n = 0
    partial(mul_seq(a, b), Nat.0) = Real.0
    mul_seq(a, partial(b))(Nat.0) = a * partial(b)(Nat.0)
    partial(b, Nat.0) = Real.0
    a * Real.0 = Real.0
    p(Nat.0)
    
    // Inductive step
    forall(n: Nat) {
        if p(n) {
            // By the induction hypothesis
            partial(mul_seq(a, b), n) = mul_seq(a, partial(b))(n)
            
            // Now prove for n.suc
            partial(mul_seq(a, b), n.suc) = partial(mul_seq(a, b), n) + mul_seq(a, b)(n)
            partial(mul_seq(a, b), n.suc) = mul_seq(a, partial(b))(n) + mul_seq(a, b)(n)
            mul_seq(a, partial(b))(n) = a * partial(b)(n)
            mul_seq(a, b)(n) = a * b(n)
            partial(mul_seq(a, b), n.suc) = a * partial(b)(n) + a * b(n)
            partial(mul_seq(a, b), n.suc) = a * (partial(b)(n) + b(n))
            
            // Use the definition of partial for the successor case
            partial(b, n.suc) = partial(b, n) + b(n)
            a * (partial(b)(n) + b(n)) = a * partial(b)(n.suc)
            partial(mul_seq(a, b), n.suc) = a * partial(b)(n.suc)
            partial(mul_seq(a, b), n.suc) = mul_seq(a, partial(b))(n.suc)
            p(n.suc)
        }
    }
}

define tail[T](a: Nat -> T, n: Nat, i: Nat) -> T {
    a(n + i)
}

theorem tail_zero[T](a: Nat -> T) {
    tail(a, Nat.0) = a
}

// Two different ways of adding the first m items, and the next n.
theorem partial_tail(a: Nat -> Real, m: Nat, n: Nat) {
    partial(a, m + n) = partial(a, m) + partial(tail(a, m), n)
} by {
    // Define a predicate for induction on n
    define p(k: Nat) -> Bool {
        partial(a, m + k) = partial(a, m) + partial(tail(a, m), k)
    }
    
    // Base case: n = 0
    partial(a, m + Nat.0) = partial(a, m)
    partial(tail(a, m), Nat.0) = Real.0
    partial(a, m) + Real.0 = partial(a, m)
    p(Nat.0)
    
    // Inductive step
    forall(k: Nat) {
        if p(k) {
            // By the induction hypothesis
            partial(a, m + k) = partial(a, m) + partial(tail(a, m), k)
            
            // Now prove for k.suc
            // First, simplify the left side
            m + k.suc = (m + k).suc
            partial(a, m + k.suc) = partial(a, (m + k).suc)
            partial(a, (m + k).suc) = partial(a, m + k) + a(m + k)
            
            // Substitute using induction hypothesis
            partial(a, m + k) + a(m + k) = (partial(a, m) + partial(tail(a, m), k)) + a(m + k)
            
            // For the right side
            partial(tail(a, m), k.suc) = partial(tail(a, m), k) + tail(a, m)(k)
            tail(a, m)(k) = a(m + k)
            partial(tail(a, m), k.suc) = partial(tail(a, m), k) + a(m + k)
            
            // Combine with partial(a, m)
            partial(a, m) + partial(tail(a, m), k.suc) = partial(a, m) + (partial(tail(a, m), k) + a(m + k))
            
            // By associativity
            partial(a, m) + (partial(tail(a, m), k) + a(m + k)) = (partial(a, m) + partial(tail(a, m), k)) + a(m + k)
            
            // Therefore
            partial(a, m + k.suc) = partial(a, m) + partial(tail(a, m), k.suc)
            p(k.suc)
        }
    }
    p(n)
}

theorem partial_tail_sub(a: Nat -> Real, m: Nat, n: Nat) {
    partial(tail(a, m), n) = partial(a, m + n) - partial(a, m)
}

let const_seq = constant[Nat, Real]

theorem const_seq_n(a: Real, n: Nat) {
    const_seq(a)(n) = a
} by {
    const_seq(a) = constant[Nat, Real](a)
}

// The sequence-operations version of partial_tail.
// Partial and tail don't quite commute, there's an additive shift.
theorem tail_partial(a: Nat -> Real, n: Nat) {
    tail(partial(a), n) = add_seq(partial(tail(a, n)), const_seq(partial(a, n)))
} by {
    forall(i: Nat) {
        tail(partial(a), n)(i) = partial(tail(a, n))(i) + partial(a, n)
        tail(partial(a), n)(i) = partial(tail(a, n))(i) + const_seq(partial(a, n))(i)
        tail(partial(a), n)(i) = add_seq(partial(tail(a, n)), const_seq(partial(a, n)))(i)
    }
}

theorem partial_tail_rewrite(a: Nat -> Real, n: Nat) {
    partial(tail(a, n)) = add_seq(tail(partial(a), n), const_seq(-partial(a, n)))
}

theorem tail_converges_to(a: Nat -> Real, n: Nat) {
    converges(a) implies
    converges_to(tail(a, n), limit(a))
} by {
    converges_to(a, limit(a))
    forall(eps: Real) {
        if eps.is_positive {
            let n1: Nat satisfy {
                tail_bound(a, limit(a), n1, eps)
            }
            let n2: Nat satisfy {
                n <= n2 and n1 <= n2
            }
            tail_bound(a, limit(a), n2, eps)
            
            forall(i: Nat) {
                if n2 <= i {
                    n2 <= n + i
                    a(n + i).is_close(limit(a), eps)
                    tail(a, n)(i).is_close(limit(a), eps)
                }
            }
            
            tail_bound(tail(a, n), limit(a), n2, eps)
        }
    }
    
    // By the definition of converges_to, we've proven that tail(a, n) converges to limit(a)
    converges_to(tail(a, n), limit(a))
}

theorem tail_imp_converges_to(a: Nat -> Real, n: Nat) {
    converges(tail(a, n)) implies
    converges_to(a, limit(tail(a, n)))
} by {
    converges_to(tail(a, n), limit(tail(a, n)))
    forall(eps: Real) {
        if eps.is_positive {
            let n1: Nat satisfy {
                tail_bound(tail(a, n), limit(tail(a, n)), n1, eps)
            }
            let n2 = n + n1

            forall(i: Nat) {
                if n2 <= i {
                    let d: Nat satisfy {
                        n + n1 + d = i
                    }
                    tail(a, n)(n1 + d) = a(i)
                    tail(a, n)(n1 + d).is_close(limit(tail(a, n)), eps)
                    a(i).is_close(limit(tail(a, n)), eps)
                }
            }

            tail_bound(a, limit(tail(a, n)), n2, eps)
        }
    }
}

// Maybe we could just use tail_converges_to to prove this,
// along with sequence ops, and it would be simpler.
theorem tail_partial_converges(a: Nat -> Real, k: Nat) {
    converges(partial(a)) implies
    converges_to(partial(tail(a, k)), limit(partial(a)) - partial(a, k))
} by {
    let target = limit(partial(a)) - partial(a, k)
    forall(eps: Real) {
        if eps.is_positive {
            let n: Nat satisfy {
                tail_bound(partial(a), limit(partial(a)), n, eps)
            }
            forall(i: Nat) {
                if n <= i {
                    partial(a)(i).is_close(limit(partial(a)), eps)
                    partial(a, k + i).is_close(limit(partial(a)), eps)
                    partial(a, k + i).is_close(partial(a, k) + limit(partial(a)) - partial(a, k), eps)
                    (partial(a, k + i) - partial(a, k)).is_close(limit(partial(a)) - partial(a, k), eps)
                    (partial(a, k) + partial(tail(a, k), i) - partial(a, k)).is_close(target, eps)
                    partial(tail(a, k), i).is_close(target, eps)
                }
            }
            tail_bound(partial(tail(a, k)), target, n, eps)
        }
    }
    converges_to(partial(tail(a, k)), target)
}

theorem converges_const_seq(a: Real) {
    converges(const_seq(a))
}

theorem add_seq_converges(a: Nat -> Real, b: Nat -> Real) {
    converges(a) and converges(b) implies converges(add_seq(a, b))
}

define neg_seq(a: Nat -> Real) -> (Nat -> Real) {
    mul_seq(-Real.1, a)
}

theorem neg_seq_neg_seq(a: Nat -> Real) {
    neg_seq(neg_seq(a)) = a
}

theorem neg_seq_lifts(a: Nat -> Rat) {
    neg_seq(lift_seq(a)) = lift_seq(neg_rat_seq(a))
}

theorem neg_seq_cancels(a: Nat -> Real, b: Nat -> Real) {
    add_seq(add_seq(a, b), neg_seq(b)) = a
} by {
    forall(i: Nat) {
        add_seq(a, b, i) - b(i) = a(i)
        add_seq(a, b, i) + neg_seq(b, i) = a(i)
        add_seq(add_seq(a, b), neg_seq(b))(i) = a(i)
    }
}

theorem neg_seq_converges_to(a: Nat -> Real) {
    converges(a) implies converges_to(neg_seq(a), -limit(a))
} by {
    converges_to(mul_seq(-Real.1, a), -Real.1 * limit(a))
    neg_seq(a) = mul_seq(-Real.1, a)
    converges_to(neg_seq(a), -Real.1 * limit(a))
}

theorem neg_seq_converges(a: Nat -> Real) {
    converges(a) implies converges(neg_seq(a))
}

theorem neg_seq_converges_converse(a: Nat -> Real) {
    converges(neg_seq(a)) implies converges(a)
} by {
    converges(neg_seq(neg_seq(a)))
    neg_seq(neg_seq(a)) = a
}

theorem conv_add_imp_conv_right(a: Nat -> Real, b: Nat -> Real) {
    converges(add_seq(a, b)) and converges(a) implies converges(b)
} by {
    converges(neg_seq(a))
    converges(add_seq(add_seq(a, b), neg_seq(a)))
    add_seq(a, b) = add_seq(b, a)
    add_seq(add_seq(b, a), neg_seq(a)) = b
    add_seq(add_seq(a, b), neg_seq(a)) = b
}

theorem conv_add_imp_conv_left(a: Nat -> Real, b: Nat -> Real) {
    converges(add_seq(a, b)) and converges(b) implies converges(a)
} by {
    add_seq(a, b) = add_seq(b, a)
}

theorem partial_tail_conv_imp_partial_conv(a: Nat -> Real, n: Nat) {
    converges(partial(tail(a, n))) implies converges(partial(a))
} by {
    partial(tail(a, n)) = add_seq(tail(partial(a), n), const_seq(-partial(a, n)))
    converges(add_seq(tail(partial(a), n), const_seq(-partial(a, n))))
    converges(const_seq(-partial(a, n)))
    converges(tail(partial(a), n))
}

theorem triangle_ineq(a: Real, b: Real) {
    (a + b).abs <= a.abs + b.abs
} by {
    if (a + b).is_negative {
        (a + b).abs = -(a + b)
        -(a + b) = -a + -b

        // Show -a + -b <= a.abs + b.abs
        -b <= b.abs
        -a + -b <= -a + b.abs

        -a <= a.abs
        -a + b.abs <= a.abs + b.abs

        (a + b).abs <= a.abs + b.abs
    } else {
        (a + b).abs = a + b

        b <= b.abs
        a + b <= a + b.abs

        a <= a.abs
        a + b.abs <= a.abs + b.abs

        (a + b).abs <= a.abs + b.abs
    }
}

theorem sum_abs_le_abs_sum(items: List[Real]) {
    sum(items).abs <= sum(map(items, Real.abs))
} by {
    define p(xs: List[Real]) -> Bool {
        sum(xs).abs <= sum(map(xs, Real.abs))
    }

    // Base case
    sum(List.nil[Real]).abs = Real.0
    map(List.nil[Real], Real.abs) = List.nil[Real]
    sum(map(List.nil[Real], Real.abs)) = Real.0
    Real.0 <= Real.0
    p(List.nil)

    // Inductive step
    forall(head: Real, rest: List[Real]) {
        if p(rest) {
            sum(rest).abs <= sum(map(rest, Real.abs))
            (head + sum(rest)).abs <= head.abs + sum(rest).abs
            head.abs + sum(rest).abs <= head.abs + sum(map(rest, Real.abs))
            sum(List.cons(head, rest)) = head + sum(rest)
            map(List.cons(head, rest), Real.abs) = List.cons(Real.abs(head), map(rest, Real.abs))
            map(List.cons(head, rest), Real.abs) = List.cons(head.abs, map(rest, Real.abs))
            sum(map(List.cons(head, rest), Real.abs)) = head.abs + sum(map(rest, Real.abs))
            p(List.cons(head, rest))
        }
    }
}

// Maybe we also want the abs version.
theorem diff_partial(a: Nat -> Real, m: Nat, n: Nat) {
    m <= n implies
    partial(a, n) - partial(a, m) = sum(map(m.until(n), a))
} by {
    partial(a, n) = sum(map(n.range, a))
    partial(a, m) = sum(map(m.range, a))
    m.range + m.until(n) = n.range
    map(m.range, a) + map(m.until(n), a) = map(n.range, a)
    sum(map(n.range, a)) - sum(map(m.range, a)) = sum(map(m.until(n), a))
}

// Prove diff_partial first so that we can simplify partial closeness.
theorem abs_conv_imp_conv(a: Nat -> Real) {
    converges(partial(compose(Real.abs, a)))
    implies
    converges(partial(a))
} by {
    let p = partial(a)
    let q = partial(compose(Real.abs, a))
    forall(eps: Real) {
        if eps.is_positive {
            let n: Nat satisfy {
                cauchy_bound(q, n, eps)
            }
            forall(i: Nat, j: Nat) {
                if n <= i and n <= j {
                    q(i).is_close(q(j), eps)
                    (q(i) - q(j)).abs < eps
                    if i <= j {
                        partial(compose(Real.abs, a), j) - partial(compose(Real.abs, a), i) = sum(map(i.until(j), compose(Real.abs, a)))
                        q(j) - q(i) = sum(map(i.until(j), compose(Real.abs, a)))
                        q(j) - q(i) = sum(map(map(i.until(j), a), Real.abs))
                        sum(map(i.until(j), a)).abs <= q(j) - q(i)
                        partial(a, j) - partial(a, i) = sum(map(i.until(j), a))
                        p(j) - p(i) = sum(map(i.until(j), a))
                        (p(j) - p(i)).abs <= q(j) - q(i)
                        q(j).is_close(q(i), eps)
                        (p(j) - p(i)).abs <= (q(j) - q(i)).abs
                        (p(j) - p(i)).abs < eps
                        p(i).is_close(p(j), eps)
                    } else {
                        j <= i
                        partial(compose(Real.abs, a), i) - partial(compose(Real.abs, a), j) = sum(map(j.until(i), compose(Real.abs, a)))
                        q(i) - q(j) = sum(map(j.until(i), compose(Real.abs, a)))
                        q(i) - q(j) = sum(map(map(j.until(i), a), Real.abs))
                        sum(map(j.until(i), a)).abs <= q(i) - q(j)
                        partial(a, i) - partial(a, j) = sum(map(j.until(i), a))
                        p(i) - p(j) = sum(map(j.until(i), a))
                        (p(i) - p(j)).abs <= q(i) - q(j)
                        q(i).is_close(q(j), eps)
                        (p(i) - p(j)).abs <= (q(i) - q(j)).abs
                        (p(i) - p(j)).abs < eps
                        p(i).is_close(p(j), eps)
                    }
                }
            }
            cauchy_bound(partial(a), n, eps)
        }
    }
}

theorem pow_nonneg(r: Real, n: Nat) {
    0 <= r implies 0 <= r.pow(n)
} by {
    // Proof by induction
    define p(k: Nat) -> Bool {
        0 <= r.pow(k)
    }
    1 >= 0
    0 <= r.pow(Nat.0)
    p(Nat.0)
    forall(k: Nat) {
        if p(k) {
            0 <= r.pow(k)
            not r.pow(k).is_negative
            not r.is_negative
            not r.pow(k.suc).is_negative
            0 <= r.pow(k.suc)
            p(k.suc)
        }
    }
    p(n)
}

theorem pos_geom_indirect_upper_bound(r: Real, n: Nat) {
    0 <= r and r < 1 implies
    partial(r.pow, n) * (1 - r) <= 1
} by {
    (r + -1) * sum(map(n.range, r.pow)) = r.pow(n) + -1
    (1 - r) * sum(map(n.range, r.pow)) = 1 - r.pow(n)
    sum(map(n.range, r.pow)) * (1 - r) = 1 - r.pow(n)
    let x = r.pow(n)
    0 <= x
    0 + (1 - x) <= x + (1 - x)
    sum(map(n.range, r.pow)) * (1 - r) <= 1
}

theorem pos_mul_eq_pos(a: Real, b: Real) {
    a.is_positive and (a * b).is_positive implies b.is_positive
}

theorem exists_large_mul(a: Real, b: Real) {
    a.is_positive and b.is_positive implies exists(c: Real) {
        a < b * c
    }
} by {
    let ra: Rat satisfy {
        a < Real.from_rat(ra)
    }
    Real.from_rat(ra).is_positive
    ra.is_positive
    let rb: Rat satisfy {
        rb.is_positive and Real.from_rat(rb) < b
    }
    let rc = ra / rb
    rc.is_positive
    ra = rb * rc
    ra <= rb * rc
    Real.from_rat(ra) <= Real.from_rat(rb) * Real.from_rat(rc)
    a < Real.from_rat(rb) * Real.from_rat(rc)
    Real.from_rat(rb) * Real.from_rat(rc) < b * Real.from_rat(rc)
    a < b * Real.from_rat(rc)
}

define nonneg_seq(a: Nat -> Real) -> Bool {
    forall(n: Nat) {
        not a(n).is_negative
    }
}

theorem nonneg_imp_partial_increasing(a: Nat -> Real) {
    nonneg_seq(a) implies is_increasing(partial(a))
} by {
    forall(n: Nat) {
        not a(n).is_negative
        0 <= a(n)
        partial(a, n.suc) = partial(a, n) + a(n)
        partial(a, n) <= partial(a, n) + a(n)
        partial(a, n) <= partial(a, n.suc)
    }
}

theorem increasing_from_nonneg_start(a: Nat -> Real) {
    not a(Nat.0).is_negative and is_increasing(a) implies nonneg_seq(a)
}

theorem nonneg_partial_nonneg(a: Nat -> Real) {
    nonneg_seq(a) implies
    nonneg_seq(partial(a))
}

theorem nonneg_pow(r: Real) {
    0 <= r implies nonneg_seq(r.pow)
}

theorem pos_geom_has_upper_bound(r: Real) {
    0 <= r and r < 1 implies
    exists(ub: Real) {
        is_upper_bound(partial(r.pow), ub)
    }
} by {
    (1 - r).is_positive
    1.is_positive
    let ub: Real satisfy {
        1 < ub * (1 - r)
    }
    (ub * (1 - r)).is_positive
    ub.is_positive
    forall(n: Nat) {
        partial(r.pow, n) * (1 - r) <= 1
        partial(r.pow, n) * (1 - r) * ub <= ub
        nonneg_seq(partial(r.pow))
        0 <= partial(r.pow, n)
        partial(r.pow, n) * 1 <= partial(r.pow, n) * ((1 - r) * ub)
        partial(r.pow, n) <= ub
    }
    is_upper_bound(partial(r.pow), ub)
}

theorem pos_geom_converges(r: Real) {
    0 <= r and r < 1 implies converges(partial(r.pow))
} by {
    let ub: Real satisfy {
        is_upper_bound(partial(r.pow), ub)
    }
    is_increasing(partial(r.pow))
}

theorem abs_pow(r: Real, n: Nat) {
    r.abs.pow(n) = r.pow(n).abs
} by {
    // Proof by induction on n
    define p(k: Nat) -> Bool {
        r.abs.pow(k) = r.pow(k).abs
    }

    // Base case: n = 0
    r.abs.pow(Nat.0) = Real.1
    r.pow(Nat.0) = Real.1
    r.pow(Nat.0).abs = Real.1.abs
    Real.1.abs = Real.1
    r.abs.pow(Nat.0) = r.pow(Nat.0).abs
    p(Nat.0)

    // Inductive step
    forall(k: Nat) {
        if p(k) {
            // Induction hypothesis: r.abs.pow(k) = r.pow(k).abs
            r.abs.pow(k) = r.pow(k).abs

            // Need to prove: r.abs.pow(k.suc) = r.pow(k.suc).abs
            r.abs.pow(k.suc) = r.abs * r.abs.pow(k)
            r.abs.pow(k.suc) = r.abs * r.pow(k).abs
            r.pow(k.suc) = r * r.pow(k)
            r.pow(k.suc).abs = (r * r.pow(k)).abs
            (r * r.pow(k)).abs = r.abs * r.pow(k).abs
            r.pow(k.suc).abs = r.abs * r.pow(k).abs
            r.abs.pow(k.suc) = r.pow(k.suc).abs
            p(k.suc)
        }
    }

    // By induction, p holds for all k
    p(n)
}

theorem abs_geom_comm(r: Real) {
    compose(Real.abs, r.pow) = r.abs.pow
}

theorem geom_converges(r: Real) {
    r.abs < 1 implies converges(partial(r.pow))
} by {
    0 <= r.abs
    converges(partial(r.abs.pow))
    compose(Real.abs, r.pow) = r.abs.pow
    partial(r.abs.pow) = partial(compose(Real.abs, r.pow))
    converges(partial(compose(Real.abs, r.pow)))
}

theorem partial_tail_decomp(a: Nat -> Real, m: Nat) {
    converges(partial(a)) implies
    limit(partial(a)) = partial(a, m) + limit(partial(tail(a, m)))
} by {
    converges_to(partial(tail(a, m)), limit(partial(a)) - partial(a, m))
    limit(partial(tail(a, m))) = limit(partial(a)) - partial(a, m)
}

theorem pow_tail(r: Real) {
    tail(r.pow, Nat.1) = mul_seq(r, r.pow)
}

theorem partial_one(a: Nat -> Real) {
    partial(a, Nat.1) = a(Nat.0)
}

theorem geom_series_no_div(r: Real) {
    r.abs < 1 implies
    1 + r * limit(partial(r.pow)) = limit(partial(r.pow))
} by {
    converges(partial(r.pow))
    converges(partial(tail(r.pow, Nat.1)))
    limit(partial(r.pow)) = partial(r.pow, Nat.1) + limit(partial(tail(r.pow, Nat.1)))
    partial(r.pow, Nat.1) = r.pow(Nat.0)
    partial(r.pow, Nat.1) = Real.1
    let t = tail(r.pow, Nat.1)
    t = mul_seq(r, r.pow)
    partial(t) = partial(mul_seq(r, r.pow))
    partial(tail(r.pow, Nat.1)) = partial(mul_seq(r, r.pow))
    limit(partial(tail(r.pow, Nat.1))) = limit(partial(mul_seq(r, r.pow)))
    partial(mul_seq(r, r.pow)) = mul_seq(r, partial(r.pow))
    limit(partial(mul_seq(r, r.pow))) = limit(mul_seq(r, partial(r.pow)))
    converges(partial(r.pow))
    converges(mul_seq(r, partial(r.pow)))
    limit(mul_seq(r, partial(r.pow))) = r * limit(partial(r.pow))
    limit(partial(mul_seq(r, r.pow))) = r * limit(partial(r.pow))
}