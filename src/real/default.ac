from nat import Nat
from rat import Rat
from util import compose, is_constant
from real.real_seq import cauchy_bound, seq_close, tail_bound, eps_smaller_than_both
from real.real_ring import lift_seq, converges, converges_to, limit, rat_seq, limit_rat
from real.real_field import Real
 
// This file proves theorems about uniform convergence.

attributes Real {
    // Placeholder to let other modules import Real from here.
}

/// True if f satisfies the delta-epsilon condition for uniform continuity on rationals.
define rat_condition(f: Rat -> Real, delta: Rat, eps: Real) -> Bool {
    forall(r1: Rat, r2: Rat) {
        r1.is_close(r2, delta) implies f(r1).is_close(f(r2), eps)
    }
}

/// True if f is uniformly continuous on the rational numbers.
define rat_uniform(f: Rat -> Real) -> Bool {
    forall(eps: Real) {
        eps.is_positive implies exists(delta: Rat) {
            delta.is_positive and rat_condition(f, delta, eps)
        }
    }
}

// Uniform continuity implies sequential continuity.
theorem uniform_imp_seq(f: Rat -> Real, q: Nat -> Rat) {
    rat_uniform(f) and converges(lift_seq(q))
    implies
    converges(compose(f, q))
} by {
    forall(eps: Real) {
        if eps.is_positive {
            let delta: Rat satisfy { 
                delta.is_positive and rat_condition(f, delta, eps)
            }
            let n: Nat satisfy {
                cauchy_bound(lift_seq(q), n, Real.from_rat(delta))
            }

            forall(i: Nat, j: Nat) {
                if n <= i and n <= j {
                    lift_seq(q)(i).is_close(lift_seq(q)(j), Real.from_rat(delta))
                    Real.from_rat(q(i)).is_close(Real.from_rat(q(j)), Real.from_rat(delta))
                    q(i).is_close(q(j), delta)
                    f(q(i)).is_close(f(q(j)), eps)
                    compose(f, q)(i).is_close(compose(f, q)(j), eps)
                }
            }

            cauchy_bound(compose(f, q), n, eps)
        }
    }
}

/// True if f satisfies the delta-epsilon condition for uniform continuity on reals.
define uniform_condition(f: Real -> Real, delta: Real, eps: Real) -> Bool {
    forall(r1: Real, r2: Real) {
        r1.is_close(r2, delta) implies f(r1).is_close(f(r2), eps)
    }
}

/// True if f is uniformly continuous on the real numbers.
define uniform(f: Real -> Real) -> Bool {
    forall(eps: Real) {
        eps.is_positive implies exists(delta: Real) {
            delta.is_positive and uniform_condition(f, delta, eps)
        }
    }
}

theorem limit_compose_uniform(f: Real -> Real, a: Nat -> Real) {
    uniform(f) and converges(a)
    implies
    converges_to(compose(f, a), f(limit(a)))
} by {
    let fa = compose(f, a)
    forall(eps: Real) {
        if eps.is_positive {
            let delta: Real satisfy {
                delta.is_positive and uniform_condition(f, delta, eps)
            }
            let n: Nat satisfy {
                forall(i: Nat) {
                    n <= i implies a(i).is_close(limit(a), delta)
                }
            }

            forall(i: Nat) {
                if n <= i {
                    a(i).is_close(limit(a), delta)
                    compose(f, a)(i).is_close(f(limit(a)), eps)
                    fa(i).is_close(f(limit(a)), eps)
                }
            }
            tail_bound(fa, f(limit(a)), n, eps)
        }
    }
    converges_to(fa, f(limit(a)))
}

theorem limit_compose_rat_uniform(f: Rat -> Real, a: Nat -> Rat, r: Rat) {
    rat_uniform(f)
    and converges_to(lift_seq(a), Real.from_rat(r))
    implies
    converges_to(compose(f, a), f(r))
} by {
    let fa = compose(f, a)
    forall(eps: Real) {
        if eps.is_positive {
            let delta: Rat satisfy {
                delta.is_positive and rat_condition(f, delta, eps)
            }
            Real.from_rat(delta).is_positive
            let n: Nat satisfy {
                tail_bound(lift_seq(a), Real.from_rat(r), n, Real.from_rat(delta))
            }

            forall(i: Nat) {
                if n <= i {
                    let s = lift_seq(a)
                    tail_bound(s, Real.from_rat(r), n, Real.from_rat(delta))
                    s(i).is_close(Real.from_rat(r), Real.from_rat(delta))
                    a(i).is_close(r, delta)
                    f(a(i)).is_close(f(r), eps)
                    compose(f, a)(i).is_close(f(r), eps)
                    fa(i).is_close(f(r), eps)
                }
            }
            tail_bound(fa, f(r), n, eps)
        }
    }
    converges_to(fa, f(r))
}

/// Extends a uniformly continuous function on rationals to a function on reals.
define lift_uc(f: Rat -> Real, x: Real) -> Real {
    limit(compose(f, rat_seq(x)))
}

theorem lift_fixes_rats(f: Rat -> Real, r: Rat) {
    rat_uniform(f)
    implies
    lift_uc(f, Real.from_rat(r)) = f(r)
} by {
    converges_to(lift_seq(rat_seq(Real.from_rat(r))), Real.from_rat(r))
    converges_to(compose(f, rat_seq(Real.from_rat(r))), f(r))
    limit(compose(f, rat_seq(Real.from_rat(r)))) = f(r)
}

theorem lift_uniform_is_uniform(f: Rat -> Real) {
    rat_uniform(f)
    implies
    uniform(lift_uc(f))
} by {
    forall(eps: Real) {
        if eps.is_positive {
            // We split epsilon into three because we have three approximations to combine:
            // f(a) is close to f(a_i) is close to f(b_i) is close to f(b).
            let eps3: Real satisfy {
                eps3.is_positive and eps3 + eps3 + eps3 < eps
            }

            let delta: Rat satisfy {
                delta.is_positive and rat_condition(f, delta, eps3)
            }

            forall(a: Real, b: Real) {
                if a.is_close(b, Real.from_rat(delta)) {
                    // f(a_i) is approximately f(a)
                    let fas = compose(f, rat_seq(a))
                    converges(fas)
                    converges_to(fas, limit(fas))
                    let n1: Nat satisfy {
                        forall(i: Nat) {
                            n1 <= i implies
                            fas(i).is_close(limit(fas), eps3)
                        }
                    }

                    // f(b_i) is approximately f(b)
                    let fbs = compose(f, rat_seq(b))
                    converges(fbs)
                    converges_to(fbs, limit(fbs))
                    let n2: Nat satisfy {
                        forall(i: Nat) {
                            n2 <= i implies
                            fbs(i).is_close(limit(fbs), eps3)
                        }
                    }

                    // f(a_i) and f(b_i) are close
                    limit(lift_seq(rat_seq(a))) = a
                    limit_rat(rat_seq(a)) = a
                    limit(lift_seq(rat_seq(b))) = b
                    limit_rat(rat_seq(b)) = b
                    limit_rat(rat_seq(a)).is_close(limit_rat(rat_seq(b)), Real.from_rat(delta))
                    converges(lift_seq(rat_seq(a)))
                    converges(lift_seq(rat_seq(b)))
                    seq_close(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta))
                    let n3: Nat satisfy {
                        forall(i: Nat) {
                            n3 <= i implies
                            lift_seq(rat_seq(a))(i).is_close(lift_seq(rat_seq(b))(i), Real.from_rat(delta))
                        }
                    }

                    let n: Nat satisfy {
                        n1 <= n and n2 <= n and n3 <= n
                    }
                    fas(n).is_close(limit(fas), eps3)
                    fbs(n).is_close(limit(fbs), eps3)
                    lift_seq(rat_seq(a))(n).is_close(lift_seq(rat_seq(b))(n), Real.from_rat(delta))
                    rat_seq(a)(n).is_close(rat_seq(b)(n), delta)
                    f(rat_seq(a)(n)).is_close(f(rat_seq(b)(n)), eps3)
                    limit(fas).is_close(fas(n), eps3)
                    fas(n).is_close(fbs(n), eps3)
                    limit(fas).is_close(fbs(n), eps3 + eps3)
                    limit(fas).is_close(limit(fbs), eps3 + eps3 + eps3)
                    limit(fas).is_close(limit(fbs), eps)

                    lift_uc(f)(a).is_close(lift_uc(f)(b), eps)
                }
            }

            uniform_condition(lift_uc(f), Real.from_rat(delta), eps)
            delta.is_positive and uniform_condition(lift_uc(f), Real.from_rat(delta), eps)
        }
    }
}

// When two uniform functions are not equal, they differ on some rational number.
theorem uniform_ne_imp_rat_ne(f: Real -> Real, g: Real -> Real) {
    uniform(f) and uniform(g) and f != g implies
    exists(r: Rat) {
        f(Real.from_rat(r)) != g(Real.from_rat(r))
    }
} by {
    let x: Real satisfy {
        f(x) != g(x)
    }
    let eps = (f(x) - g(x)).abs
    eps.is_positive
    not f(x).is_close(g(x), eps)
    let eps2: Real satisfy {
        eps2.is_positive and eps2 + eps2 < eps
    }

    let delta1: Real satisfy {
        delta1.is_positive and uniform_condition(f, delta1, eps2)
    }
    let delta2: Real satisfy {
        delta2.is_positive and uniform_condition(g, delta2, eps2)
    }
    let delta: Real satisfy {
        delta.is_positive and delta < delta1 and delta < delta2
    }

    let r: Rat satisfy {
        Real.from_rat(r).is_close(x, delta)
    }
    Real.from_rat(r).is_close(x, delta1)
    f(Real.from_rat(r)).is_close(f(x), eps2)
    Real.from_rat(r).is_close(x, delta2)
    g(Real.from_rat(r)).is_close(g(x), eps2)
    if f(Real.from_rat(r)) = g(Real.from_rat(r)) {
        f(x).is_close(f(Real.from_rat(r)), eps2)
        f(Real.from_rat(r)).is_close(g(x), eps2)
        f(x).is_close(g(x), eps2 + eps2)
        f(x).is_close(g(x), eps)
        false
    }
}

/// True if f is strictly increasing on the rational numbers.
define rat_increasing(f: Rat -> Real) -> Bool {
    forall(r1: Rat, r2: Rat) {
        r1 < r2 implies f(r1) < f(r2)
    }
}

/// True if f is strictly increasing on the real numbers.
define increasing(f: Real -> Real) -> Bool {
    forall(x: Real, y: Real) {
        x < y implies f(x) < f(y)
    }
}

theorem uni_cond_imp_rat_cond(f: Real -> Real, delta: Rat, eps: Real) {
    uniform_condition(f, Real.from_rat(delta), eps)
    implies
    rat_condition(compose(f, Real.from_rat), delta, eps)
}

theorem uniform_imp_rat_uniform(f: Real -> Real) {
    uniform(f)
    implies
    rat_uniform(compose(f, Real.from_rat))
} by {
    forall(eps: Real) {
        if eps.is_positive {
            let delta: Real satisfy {
                delta.is_positive and uniform_condition(f, delta, eps)
            }
            Real.0 < delta
            let rdelta: Rat satisfy {
                rdelta.is_positive and Real.from_rat(rdelta) < delta
            }
            uniform_condition(f, Real.from_rat(rdelta), eps)
            rdelta.is_positive and rat_condition(compose(f, Real.from_rat), rdelta, eps)
        }
    }
}

theorem tighten_uc(f: Real -> Real, delta1: Real, delta2: Real, eps: Real) {
    delta1.is_positive and delta2.is_positive and
    uniform_condition(f, delta1, eps) and delta2 < delta1
    implies
    uniform_condition(f, delta2, eps)
}

theorem add_real_eps_between(a: Real, b: Real) {
    a < b implies
    exists(eps: Real) {
        eps.is_positive and a + eps < b
    }
} by {
    let eps: Real satisfy {
        eps.is_positive and a + eps < b
    }
    a + eps < b
}

theorem lift_inc_is_inc(f: Rat -> Real) {
    rat_uniform(f) and rat_increasing(f)
    implies
    increasing(lift_uc(f))
} by {
    let lf = lift_uc(f)
    uniform(lf)
    forall(r: Rat) {
        lf(Real.from_rat(r)) = f(r)
    }
    forall(x: Real, y: Real) {
        if x < y {
            let r1: Rat satisfy {
                x < Real.from_rat(r1) and Real.from_rat(r1) < y
            }
            let r2: Rat satisfy {
                r1 < r2 and Real.from_rat(r2) < y
            }
            f(r1) < f(r2)
            let eps: Real satisfy {
                eps.is_positive and f(r1) + eps < f(r2)
            }
            let eps2: Real satisfy {
                eps2.is_positive and eps2 + eps2 < eps
            }

            // Pick delta1 so that f(xr) is close to f(x)
            let delta1: Real satisfy {
                delta1.is_positive and
                uniform_condition(lf, delta1, eps2)
            }

            // Pick delta2 so that xr is close to x and yr is close to y
            let delta2a: Real satisfy {
                delta2a.is_positive and
                x + delta2a < Real.from_rat(r1) 
            }
            let delta2b: Real satisfy {
                delta2b.is_positive and
                Real.from_rat(r2) + delta2b < y
            }
            eps_smaller_than_both(delta2a, delta2b)
            let delta2: Real satisfy {
                delta2.is_positive and
                delta2 < delta2a and
                delta2 < delta2b
            }

            // Delta satisfies all these conditions
            let delta_min = delta1.min(delta2)
            delta_min.is_positive
            let delta: Real satisfy {
                delta.is_positive and
                delta < delta_min
            }
            delta < delta1
            delta < delta2
            delta < delta2a
            delta < delta2b

            let xr: Rat satisfy {
                Real.from_rat(xr).is_close(x, delta)
            }
            Real.from_rat(xr) < x + delta
            x + delta <= x + delta2a
            Real.from_rat(xr) < x + delta2a
            Real.from_rat(xr) < Real.from_rat(r1)
            xr < r1

            let yr: Rat satisfy {
                Real.from_rat(yr).is_close(y, delta)
            }
            Real.from_rat(r2) + delta < Real.from_rat(r2) + delta2b
            Real.from_rat(r2) + delta < y
            y < Real.from_rat(yr) + delta
            Real.from_rat(r2) + delta < Real.from_rat(yr) + delta
            Real.from_rat(r2) < Real.from_rat(yr)
            r2 < yr

            forall(z: Real, zr: Rat) {
                if Real.from_rat(zr).is_close(z, delta1) {
                    lf(Real.from_rat(zr)).is_close(lf(z), eps2)
                    f(zr).is_close(lf(z), eps2)
                }
            }
            Real.from_rat(xr).is_close(x, delta1)
            f(xr).is_close(lf(x), eps2)
            Real.from_rat(yr).is_close(y, delta1)
            f(yr).is_close(lf(y), eps2)

            f(xr) < f(r1)
            f(r2) < f(yr)
            f(r1) + eps <= f(r2)
            f(xr) + eps < f(r1) + eps
            f(r2) <= f(yr)
            f(r1) + eps < f(yr)
            f(xr) + eps < f(yr)

            lf(x) < f(xr) + eps2
            f(xr) + (eps2 + eps2) < f(xr) + eps
            f(xr) + eps2 + eps2 < f(xr) + eps
            f(xr) + eps2 + eps2 < f(yr)
            lf(x) + eps2 < f(xr) + eps2 + eps2
            lf(x) + eps2 < f(yr)
            f(yr) < lf(y) + eps2
            lf(x) + eps2 < lf(y) + eps2
            lf(x) < lf(y)

            lift_uc(f)(x) < lift_uc(f)(y)
        }
    }
}

theorem constant_is_rat_uniform(f: Rat -> Real) {
    is_constant(f)
    implies
    rat_uniform(f)
} by {
    forall(eps: Real) {
        if eps.is_positive {
            Rat.1.is_positive and rat_condition(f, Rat.1, eps)
        }
    }
}

theorem constant_is_uniform(f: Real -> Real) {
    is_constant(f)
    implies
    uniform(f)
} by {
    forall(eps: Real) {
        if eps.is_positive {
            forall(x: Real, y: Real) {
                f(x).is_close(f(y), eps)
            }
            uniform_condition(f, eps, eps)
        }
    }
}

theorem lift_constant_is_constant(f: Rat -> Real) {
    is_constant(f)
    implies
    is_constant(lift_uc(f))
} by {
    rat_uniform(f)
    let (y: Real) satisfy {
        forall(r: Rat) {
            f(r) = y
        }
    }
    forall(x: Real) {
        forall(n: Nat) {
            compose(f, rat_seq(x))(n) = y
        }
        limit(compose(f, rat_seq(x))) = y
        lift_uc(f)(x) = y
    }
}

theorem compose_uniform(f: Real -> Real, g: Real -> Real) {
    uniform(f) and uniform(g)
    implies
    uniform(compose(f, g))
} by {
    forall(eps: Real) {
        if eps.is_positive {
            let delta1: Real satisfy {
                delta1.is_positive and uniform_condition(f, delta1, eps)
            }
            let delta2: Real satisfy {
                delta2.is_positive and uniform_condition(g, delta2, delta1)
            }

            forall(x: Real, y: Real) {
                if x.is_close(y, delta2) {
                    g(x).is_close(g(y), delta1)
                    f(g(x)).is_close(f(g(y)), eps)
                    compose(f, g)(x).is_close(compose(f, g)(y), eps)
                }
            }

            delta2.is_positive and uniform_condition(compose(f, g), delta2, eps)
        }
    }
}

theorem rat_mul_uniform(r: Rat) {
    rat_uniform(compose(Real.from_rat, r.mul))
} by {
    let mul_r = compose(Real.from_rat, r.mul)
    forall(eps: Real) {
        if eps.is_positive {
            Real.0 < eps
            let reps1: Rat satisfy {
                Real.from_rat(reps1) < eps and reps1.is_positive
            }
            let reps2: Rat satisfy {
                reps2 < reps1 and reps2.is_positive
            }
            Rat.0 <= r.abs
            let delta: Rat satisfy {
                delta.is_positive and r.abs * delta < reps2
            }
            forall(r1: Rat, r2: Rat) {
                if r1.is_close(r2, delta) {
                    (r1 - r2).abs < delta
                    (r1 - r2).abs <= delta
                    (r1 - r2).abs * r.abs <= delta * r.abs
                    r.abs * (r1 - r2).abs <= r.abs * delta
                    (r * (r1 - r2)).abs <= r.abs * delta
                    (r * r1 - r * r2).abs <= r.abs * delta
                    r.abs * delta <= reps2
                    (r * r1 - r * r2).abs <= reps2
                    (r * r1 - r * r2).abs < reps1
                    Real.from_rat(r * r1).is_close(Real.from_rat(r * r2), Real.from_rat(reps1))
                    Real.from_rat(r * r1).is_close(Real.from_rat(r * r2), eps)
                    mul_r(r1).is_close(mul_r(r2), eps)
                }
            }
            delta.is_positive and rat_condition(mul_r, delta, eps)
        }
    }
    rat_uniform(mul_r)
}

theorem close_add(a: Real, b: Real, c: Real, eps: Real) {
    a.is_close(b, eps)
    implies
    (a + c).is_close(b + c, eps)
} by {
    (a - b).abs < eps
    (a + c - (c + b)).abs < eps
    (a + c - (b + c)).abs < eps
}

theorem add_real_uniform(x: Real) {
    uniform(x.add)
} by {
    forall(eps: Real) {
        if eps.is_positive {
            forall(a: Real, b: Real) {
                if a.is_close(b, eps) {
                    (x + a).is_close(x + b, eps)
                    x.add(a).is_close(x.add(b), eps)
                }
            }
            uniform_condition(x.add, eps, eps)
        }
    }
}

theorem neg_uniform {
    uniform(Real.neg)
} by {
    forall(eps: Real) {
        if eps.is_positive {
            forall(x: Real, y: Real) {
                if x.is_close(y, eps) {
                    (-x).is_close(-y, eps)
                    Real.neg(x).is_close(Real.neg(y), eps)
                }
            }
            uniform_condition(Real.neg, eps, eps)
        }
    }
}



/// Pointwise addition of two real-valued functions.
define add_fns[T](f: T -> Real, g: T -> Real, t: T) -> Real {
    f(t) + g(t)
}

theorem add_fns_uniform(f: Real -> Real, g: Real -> Real) {
    uniform(f) and uniform(g)
    implies
    uniform(add_fns(f, g))
} by {
    forall(eps: Real) {
        if eps.is_positive {
            let eps2: Real satisfy {
                eps2.is_positive and eps2 + eps2 < eps
            }
            let delta1: Real satisfy {
                delta1.is_positive and uniform_condition(f, delta1, eps2)
            }
            let delta2: Real satisfy {
                delta2.is_positive and uniform_condition(g, delta2, eps2)
            }
            let delta: Real satisfy {
                delta.is_positive and delta < delta1 and delta < delta2
            }

            forall(x: Real, y: Real) {
                if x.is_close(y, delta) {
                    x.is_close(y, delta1)
                    f(x).is_close(f(y), eps2)
                    x.is_close(y, delta2)
                    g(x).is_close(g(y), eps2)
                    (f(x) + g(x)).is_close(f(y) + g(y), eps2 + eps2)
                    (f(x) + g(x)).is_close(f(y) + g(y), eps)
                    add_fns(f, g, x).is_close(add_fns(f, g, y), eps)
                }
            }
            uniform_condition(add_fns(f, g), delta, eps)
            delta.is_positive and uniform_condition(add_fns(f, g), delta, eps)
        }
    }
}

// Historically we proved some theorems around continuity and 2d continuity here.
// But this might not be the best order to prove things in.
// Same for the uniform continuity theorems.
/// True if f satisfies the delta-epsilon condition for continuity at (x,y).
define continuous2_condition(f: (Real, Real) -> Real, x: Real, y: Real, delta: Real, eps: Real) -> Bool {
    forall(x1: Real, y1: Real) {
        x1.is_close(x, delta) and y1.is_close(y, delta) implies
        f(x1, y1).is_close(f(x, y), eps)
    }
}

/// True if the two-variable function f is continuous at the point (x,y).
define continuous2_at(f: (Real, Real) -> Real, x: Real, y: Real) -> Bool {
    forall(eps: Real) {
        eps.is_positive implies exists(delta: Real) {
            delta.is_positive and
            continuous2_condition(f, x, y, delta, eps)
        }
    }
}

/// True if the two-variable function f is continuous everywhere.
define continuous2(f: (Real, Real) -> Real) -> Bool {
    forall(x: Real, y: Real) {
        continuous2_at(f, x, y)
    }
}

// Addition is continuous.
theorem add_continuous2 {
    continuous2(Real.add)
} by {
    forall(x: Real, y: Real) {
        forall(eps: Real) {
            if eps.is_positive {
                let delta: Real satisfy {
                    delta.is_positive and delta + delta < eps
                }
                forall(x1: Real, y1: Real) {
                    if x1.is_close(x, delta) and y1.is_close(y, delta) {
                        (x1 + y1).is_close(x + y, delta + delta)
                        Real.add(x1, y1).is_close(Real.add(x, y), eps)
                    }
                }
                continuous2_condition(Real.add, x, y, delta, eps)
                delta.is_positive and continuous2_condition(Real.add, x, y, delta, eps)
            }
        }
        continuous2_at(Real.add, x, y)
    }
}

/// True if f satisfies the delta-epsilon condition for continuity at x.
define continuous_condition(f: Real -> Real, x: Real, delta: Real, eps: Real) -> Bool {
    forall(x1: Real) {
        x1.is_close(x, delta) implies
        f(x1).is_close(f(x), eps)
    }
}

/// True if f is continuous at the point x.
define continuous_at(f: Real -> Real, x: Real) -> Bool {
    forall(eps: Real) {
        eps.is_positive implies exists(delta: Real) {
            delta.is_positive and continuous_condition(f, x, delta, eps)
        }
    }
}

/// True if f is continuous everywhere on the reals.
define continuous(f: Real -> Real) -> Bool {
    forall(x: Real) {
        continuous_at(f, x)
    }
}

theorem uniform_imp_continuous(f: Real -> Real) {
    uniform(f)
    implies
    continuous(f)
} by {
    forall(x: Real) {
        forall(eps: Real) {
            if eps.is_positive {
                let delta: Real satisfy {
                    delta.is_positive and uniform_condition(f, delta, eps)
                }
                forall(x1: Real) {
                    if x1.is_close(x, delta) {
                        f(x1).is_close(f(x), eps)
                    }
                }
                continuous_condition(f, x, delta, eps)
                delta.is_positive and continuous_condition(f, x, delta, eps)
            }
        }
        continuous_at(f, x)
    }
}