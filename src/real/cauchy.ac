from util import constant, compose
from nat import Nat
from rat import Rat
from list import partial, sum, map, List
from list.list_functional import reverse, sum_reverse, reverse_get_idx
from list.list_sum import map_range, list_extensionality, sum_scalar_mul, map_sum_add, scalar_mul
from option import Option
from real.real_ring import Real, converges, converges_to, limit, lift_seq
from real.real_series import seq_lte, is_lower_bound, add_seq, mul_seq
from real.real_base import lte_add_left
from semigroup import mul_fn
from add_semigroup import add_fn
from add_comm_monoid import AddCommMonoid

numerals Real

// This file defines the Cauchy product of two series and proves theorems about it.

attributes Real {
    // Placeholder to let other modules import Real from here.
}

/// The coefficient function for the Cauchy product at index n.
/// For a fixed n, this returns a function mapping k to a(k) * b(n-k).
define cauchy_coefficient(a: Nat -> Real, b: Nat -> Real, n: Nat) -> (Nat -> Real) {
    function(k: Nat) { a(k) * b(n - k) }
}

/// The Cauchy product of two sequences at index n.
/// This computes âˆ‘_{k=0}^{n} a(k) * b(n-k).
define cauchy_product(a: Nat -> Real, b: Nat -> Real, n: Nat) -> Real {
    sum(map(n.suc.range, cauchy_coefficient(a, b, n)))
}

/// The sequence of Cauchy products.
define cauchy_seq(a: Nat -> Real, b: Nat -> Real) -> (Nat -> Real) {
    function(n: Nat) { cauchy_product(a, b, n) }
}

theorem cauchy_product_zero(a: Nat -> Real, b: Nat -> Real) {
    cauchy_product(a, b, Nat.0) = a(Nat.0) * b(Nat.0)
} by {
    Nat.0.suc = Nat.1
    Nat.1.range = List.singleton(Nat.0)
    let mapped = map(Nat.1.range, function(k: Nat) { a(k) * b(Nat.0 - k) })
    Nat.0 - Nat.0 = Nat.0
    mapped = List.singleton(a(Nat.0) * b(Nat.0))
    sum(mapped) = a(Nat.0) * b(Nat.0)
}

/// If we map a list with a function that always returns zero, the sum is zero.
theorem sum_map_zero[T](items: List[T], f: T -> Real) {
    (forall(x: T) { f(x) = Real.0 })
    implies
    sum(map(items, f)) = Real.0
} by {
    define p(xs: List[T]) -> Bool {
        (forall(x: T) { f(x) = Real.0 })
        implies
        sum(map(xs, f)) = Real.0
    }

    // Base case: empty list
    map(List.nil[T], f) = List.nil[Real]
    sum(List.nil[Real]) = Real.0
    p(List.nil)

    // Inductive step
    forall(head: T, tail: List[T]) {
        if p(tail) {
            if forall(x: T) { f(x) = Real.0 } {
                // Apply the hypothesis to tail
                sum(map(tail, f)) = Real.0

                // Now work on the cons case
                map(List.cons(head, tail), f) = List.cons(f(head), map(tail, f))
                sum(List.cons(f(head), map(tail, f))) = f(head) + sum(map(tail, f))
                f(head) = Real.0
                sum(List.cons(f(head), map(tail, f))) = Real.0 + Real.0
                sum(List.cons(f(head), map(tail, f))) = Real.0
                sum(map(List.cons(head, tail), f)) = Real.0
            }
            p(List.cons(head, tail))
        }
    }
}

/// If a is the constant zero function, then cauchy_coefficient returns constant zero.
theorem cauchy_coefficient_zero_left(b: Nat -> Real, n: Nat, k: Nat) {
    cauchy_coefficient(constant[Nat, Real](Real.0), b, n)(k) = Real.0
} by {
    let a = constant[Nat, Real](Real.0)
    cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)
    a(k) = Real.0
    Real.0 * b(n - k) = Real.0
}

/// If a is constant zero, then cauchy_coefficient is the constant zero function.
theorem cauchy_coefficient_zero_left_fn(b: Nat -> Real, n: Nat) {
    cauchy_coefficient(constant[Nat, Real](Real.0), b, n) = constant[Nat, Real](Real.0)
} by {
    let a = constant[Nat, Real](Real.0)
    forall(k: Nat) {
        cauchy_coefficient(a, b, n)(k) = Real.0
        constant[Nat, Real](Real.0)(k) = Real.0
    }
}

/// If b is the constant zero function, then cauchy_coefficient returns constant zero.
theorem cauchy_coefficient_zero_right(a: Nat -> Real, n: Nat, k: Nat) {
    cauchy_coefficient(a, constant[Nat, Real](Real.0), n)(k) = Real.0
} by {
    let b = constant[Nat, Real](Real.0)
    cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)
    b(n - k) = Real.0
    a(k) * Real.0 = Real.0
}

/// If b is constant zero, then cauchy_coefficient is the constant zero function.
theorem cauchy_coefficient_zero_right_fn(a: Nat -> Real, n: Nat) {
    cauchy_coefficient(a, constant[Nat, Real](Real.0), n) = constant[Nat, Real](Real.0)
} by {
    let b = constant[Nat, Real](Real.0)
    forall(k: Nat) {
        cauchy_coefficient(a, b, n)(k) = Real.0
        constant[Nat, Real](Real.0)(k) = Real.0
    }
}

/// Helper lemma: reverse of mapped range with cauchy_coefficient equals mapped range with swapped coefficients.
theorem cauchy_reverse_map_eq(a: Nat -> Real, b: Nat -> Real, n: Nat) {
    reverse(map(n.suc.range, cauchy_coefficient(a, b, n))) =
    map(n.suc.range, cauchy_coefficient(b, a, n))
} by {
    let left_list = reverse(map(n.suc.range, cauchy_coefficient(a, b, n)))
    let right_list = map(n.suc.range, cauchy_coefficient(b, a, n))

    // Both lists have the same length
    left_list.length = map(n.suc.range, cauchy_coefficient(a, b, n)).length
    map(n.suc.range, cauchy_coefficient(a, b, n)).length = n.suc.range.length
    n.suc.range.length = n.suc
    right_list.length = map(n.suc.range, cauchy_coefficient(b, a, n)).length
    map(n.suc.range, cauchy_coefficient(b, a, n)).length = n.suc.range.length
    left_list.length = right_list.length

    // Show they agree at every index
    forall(idx: Nat) {
        if idx < left_list.length {
            // idx < n.suc
            idx < n.suc

            // Element of left_list at idx using reverse_get_idx
            let mapped = map(n.suc.range, cauchy_coefficient(a, b, n))
            reverse_get_idx(mapped, idx)
            mapped.length = n.suc
            left_list.get_idx(idx) = mapped.get_idx(mapped.length - Nat.1 - idx)

            // mapped.length - 1 - idx = n - idx
            mapped.length - Nat.1 - idx = n - idx

            // Show n - idx < n.suc
            n - idx <= n
            n < n.suc
            n - idx < n.suc

            // Apply map_range with cauchy_coefficient
            map_range(n.suc, n - idx, cauchy_coefficient(a, b, n))
            mapped.get_idx(n - idx) = Option.some(cauchy_coefficient(a, b, n)(n - idx))

            // Expand cauchy_coefficient
            cauchy_coefficient(a, b, n)(n - idx) = a(n - idx) * b(n - (n - idx))
            n - (n - idx) = idx
            cauchy_coefficient(a, b, n)(n - idx) = a(n - idx) * b(idx)

            left_list.get_idx(idx) = Option.some(a(n - idx) * b(idx))

            // By commutativity
            a(n - idx) * b(idx) = b(idx) * a(n - idx)

            // Element of right_list at idx
            map_range(n.suc, idx, cauchy_coefficient(b, a, n))
            right_list.get_idx(idx) = Option.some(cauchy_coefficient(b, a, n)(idx))

            // Expand cauchy_coefficient
            cauchy_coefficient(b, a, n)(idx) = b(idx) * a(n - idx)

            // Therefore they're equal
            left_list.get_idx(idx) = Option.some(b(idx) * a(n - idx))
            left_list.get_idx(idx) = right_list.get_idx(idx)
        }
    }

    // Apply list extensionality
    list_extensionality(left_list, right_list)
    left_list = right_list
}

/// Cauchy product is commutative.
theorem cauchy_product_comm(a: Nat -> Real, b: Nat -> Real, n: Nat) {
    cauchy_product(a, b, n) = cauchy_product(b, a, n)
} by {
    // Expand definitions
    cauchy_product(a, b, n) = sum(map(n.suc.range, cauchy_coefficient(a, b, n)))
    cauchy_product(b, a, n) = sum(map(n.suc.range, cauchy_coefficient(b, a, n)))

    // Use sum_reverse
    sum(map(n.suc.range, cauchy_coefficient(a, b, n))) = sum(reverse(map(n.suc.range, cauchy_coefficient(a, b, n))))

    // Use helper lemma
    cauchy_reverse_map_eq(a, b, n)
    reverse(map(n.suc.range, cauchy_coefficient(a, b, n))) = map(n.suc.range, cauchy_coefficient(b, a, n))

    // Combine
    sum(map(n.suc.range, cauchy_coefficient(a, b, n))) = sum(map(n.suc.range, cauchy_coefficient(b, a, n)))
}

/// Cauchy product with a zero sequence on the left.
theorem cauchy_product_zero_left(b: Nat -> Real, n: Nat) {
    cauchy_product(constant[Nat, Real](Real.0), b, n) = Real.0
} by {
    let a = constant[Nat, Real](Real.0)

    // Show that cauchy_coefficient equals the constant zero function
    cauchy_coefficient(a, b, n) = constant[Nat, Real](Real.0)

    // Therefore every application returns zero
    forall(k: Nat) {
        cauchy_coefficient(a, b, n)(k) = Real.0
    }

    // Apply sum_map_zero
    sum(map(n.suc.range, cauchy_coefficient(a, b, n))) = Real.0

    // This is the definition of cauchy_product
    cauchy_product(a, b, n) = sum(map(n.suc.range, cauchy_coefficient(a, b, n)))
    cauchy_product(a, b, n) = Real.0
}

/// Cauchy product with a zero sequence on the right.
theorem cauchy_product_zero_right(a: Nat -> Real, n: Nat) {
    cauchy_product(a, constant[Nat, Real](Real.0), n) = Real.0
} by {
    let b = constant[Nat, Real](Real.0)

    // Show that cauchy_coefficient equals the constant zero function
    cauchy_coefficient(a, b, n) = constant[Nat, Real](Real.0)

    // Therefore every application returns zero
    forall(k: Nat) {
        cauchy_coefficient(a, b, n)(k) = Real.0
    }

    // Apply sum_map_zero
    sum(map(n.suc.range, cauchy_coefficient(a, b, n))) = Real.0

    // This is the definition of cauchy_product
    cauchy_product(a, b, n) = sum(map(n.suc.range, cauchy_coefficient(a, b, n)))
    cauchy_product(a, b, n) = Real.0
}

/// Helper lemma: cauchy_coefficient distributes scalar multiplication in the first argument.
theorem cauchy_coefficient_scalar_left(c: Real, a: Nat -> Real, b: Nat -> Real, n: Nat, k: Nat) {
    cauchy_coefficient(mul_fn(c, a), b, n)(k) = c * cauchy_coefficient(a, b, n)(k)
} by {
    // Expand cauchy_coefficient definition
    cauchy_coefficient(mul_fn(c, a), b, n)(k) = mul_fn(c, a)(k) * b(n - k)
    mul_fn(c, a)(k) = c * a(k)
    cauchy_coefficient(mul_fn(c, a), b, n)(k) = (c * a(k)) * b(n - k)

    // Use associativity
    (c * a(k)) * b(n - k) = c * (a(k) * b(n - k))

    // Recognize the right side as the original coefficient
    cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)
    c * (a(k) * b(n - k)) = c * cauchy_coefficient(a, b, n)(k)
}

/// Linearity in the first argument: scalar multiplication factors out.
theorem cauchy_product_scalar_left(c: Real, a: Nat -> Real, b: Nat -> Real, n: Nat) {
    cauchy_product(mul_fn(c, a), b, n) = c * cauchy_product(a, b, n)
} by {
    // Expand cauchy_product definitions
    cauchy_product(mul_fn(c, a), b, n) = sum(map(n.suc.range, cauchy_coefficient(mul_fn(c, a), b, n)))
    cauchy_product(a, b, n) = sum(map(n.suc.range, cauchy_coefficient(a, b, n)))

    // Show that the coefficient functions are related by scalar multiplication
    forall(k: Nat) {
        cauchy_coefficient(mul_fn(c, a), b, n)(k) = c * cauchy_coefficient(a, b, n)(k)
        scalar_mul(c)(cauchy_coefficient(a, b, n)(k)) = c * cauchy_coefficient(a, b, n)(k)
    }

    // The two functions are equal
    cauchy_coefficient(mul_fn(c, a), b, n) = compose(scalar_mul(c), cauchy_coefficient(a, b, n))

    // Use sum_scalar_mul to factor out the constant
    sum(map(n.suc.range, cauchy_coefficient(mul_fn(c, a), b, n))) = sum(map(n.suc.range, compose(scalar_mul(c), cauchy_coefficient(a, b, n))))
    sum(map(n.suc.range, compose(scalar_mul(c), cauchy_coefficient(a, b, n)))) = sum(map(map(n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c)))
    sum(map(map(n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c))) = c * sum(map(n.suc.range, cauchy_coefficient(a, b, n)))
}

/// Helper lemma: cauchy_coefficient distributes scalar multiplication in the second argument.
theorem cauchy_coefficient_scalar_right(c: Real, a: Nat -> Real, b: Nat -> Real, n: Nat, k: Nat) {
    cauchy_coefficient(a, mul_fn(c, b), n)(k) = c * cauchy_coefficient(a, b, n)(k)
} by {
    // Expand cauchy_coefficient definition
    cauchy_coefficient(a, mul_fn(c, b), n)(k) = a(k) * mul_fn(c, b)(n - k)
    mul_fn(c, b)(n - k) = c * b(n - k)
    cauchy_coefficient(a, mul_fn(c, b), n)(k) = a(k) * (c * b(n - k))

    // Use associativity and commutativity
    a(k) * (c * b(n - k)) = a(k) * (b(n - k) * c)
    a(k) * (b(n - k) * c) = (a(k) * b(n - k)) * c
    (a(k) * b(n - k)) * c = c * (a(k) * b(n - k))

    // Recognize the right side as the original coefficient
    cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)
    c * (a(k) * b(n - k)) = c * cauchy_coefficient(a, b, n)(k)
}

/// Linearity in the second argument: scalar multiplication factors out.
theorem cauchy_product_scalar_right(c: Real, a: Nat -> Real, b: Nat -> Real, n: Nat) {
    cauchy_product(a, mul_fn(c, b), n) = c * cauchy_product(a, b, n)
} by {
    // Expand cauchy_product definitions
    cauchy_product(a, mul_fn(c, b), n) = sum(map(n.suc.range, cauchy_coefficient(a, mul_fn(c, b), n)))
    cauchy_product(a, b, n) = sum(map(n.suc.range, cauchy_coefficient(a, b, n)))

    // Show that the coefficient functions are related by scalar multiplication
    forall(k: Nat) {
        cauchy_coefficient(a, mul_fn(c, b), n)(k) = c * cauchy_coefficient(a, b, n)(k)
        scalar_mul(c)(cauchy_coefficient(a, b, n)(k)) = c * cauchy_coefficient(a, b, n)(k)
    }

    // The two functions are equal
    cauchy_coefficient(a, mul_fn(c, b), n) = compose(scalar_mul(c), cauchy_coefficient(a, b, n))

    // Use sum_scalar_mul to factor out the constant
    sum(map(n.suc.range, cauchy_coefficient(a, mul_fn(c, b), n))) = sum(map(n.suc.range, compose(scalar_mul(c), cauchy_coefficient(a, b, n))))
    sum(map(n.suc.range, compose(scalar_mul(c), cauchy_coefficient(a, b, n)))) = sum(map(map(n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c)))
    sum(map(map(n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c))) = c * sum(map(n.suc.range, cauchy_coefficient(a, b, n)))
}

/// Helper lemma: cauchy_coefficient distributes addition in the first argument.
theorem cauchy_coefficient_add_left(a: Nat -> Real, aa: Nat -> Real, b: Nat -> Real, n: Nat, k: Nat) {
    cauchy_coefficient(add_fn(a, aa), b, n)(k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(aa, b, n)(k)
} by {
    // Expand cauchy_coefficient definition
    cauchy_coefficient(add_fn(a, aa), b, n)(k) = add_fn(a, aa)(k) * b(n - k)
    add_fn(a, aa)(k) = a(k) + aa(k)
    cauchy_coefficient(add_fn(a, aa), b, n)(k) = (a(k) + aa(k)) * b(n - k)

    // Use distributivity
    (a(k) + aa(k)) * b(n - k) = a(k) * b(n - k) + aa(k) * b(n - k)

    // Recognize the right side as the sum of coefficients
    cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)
    cauchy_coefficient(aa, b, n)(k) = aa(k) * b(n - k)
    a(k) * b(n - k) + aa(k) * b(n - k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(aa, b, n)(k)
}

/// Distributivity in the first argument: addition distributes through the Cauchy product.
theorem cauchy_product_add_left(a: Nat -> Real, aa: Nat -> Real, b: Nat -> Real, n: Nat) {
    cauchy_product(add_fn(a, aa), b, n) = cauchy_product(a, b, n) + cauchy_product(aa, b, n)
} by {
    // Expand cauchy_product definitions
    cauchy_product(add_fn(a, aa), b, n) = sum(map(n.suc.range, cauchy_coefficient(add_fn(a, aa), b, n)))
    cauchy_product(a, b, n) = sum(map(n.suc.range, cauchy_coefficient(a, b, n)))
    cauchy_product(aa, b, n) = sum(map(n.suc.range, cauchy_coefficient(aa, b, n)))

    // Show that the coefficient functions are related by addition
    forall(k: Nat) {
        cauchy_coefficient(add_fn(a, aa), b, n)(k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(aa, b, n)(k)
        add_fn(cauchy_coefficient(a, b, n), cauchy_coefficient(aa, b, n))(k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(aa, b, n)(k)
    }

    // The two functions are equal
    cauchy_coefficient(add_fn(a, aa), b, n) = add_fn(cauchy_coefficient(a, b, n), cauchy_coefficient(aa, b, n))

    // Use map_sum_add to split the sum
    sum(map(n.suc.range, cauchy_coefficient(add_fn(a, aa), b, n))) = sum(map(n.suc.range, add_fn(cauchy_coefficient(a, b, n), cauchy_coefficient(aa, b, n))))
    sum(map(n.suc.range, add_fn(cauchy_coefficient(a, b, n), cauchy_coefficient(aa, b, n)))) = sum(map(n.suc.range, cauchy_coefficient(a, b, n))) + sum(map(n.suc.range, cauchy_coefficient(aa, b, n)))
}

/// Helper lemma: cauchy_coefficient distributes addition in the second argument.
theorem cauchy_coefficient_add_right(a: Nat -> Real, b: Nat -> Real, bb: Nat -> Real, n: Nat, k: Nat) {
    cauchy_coefficient(a, add_fn(b, bb), n)(k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(a, bb, n)(k)
} by {
    // Expand cauchy_coefficient definition
    cauchy_coefficient(a, add_fn(b, bb), n)(k) = a(k) * add_fn(b, bb)(n - k)
    add_fn(b, bb)(n - k) = b(n - k) + bb(n - k)
    cauchy_coefficient(a, add_fn(b, bb), n)(k) = a(k) * (b(n - k) + bb(n - k))

    // Use distributivity
    a(k) * (b(n - k) + bb(n - k)) = a(k) * b(n - k) + a(k) * bb(n - k)

    // Recognize the right side as the sum of coefficients
    cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)
    cauchy_coefficient(a, bb, n)(k) = a(k) * bb(n - k)
    a(k) * b(n - k) + a(k) * bb(n - k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(a, bb, n)(k)
}

/// Distributivity in the second argument: addition distributes through the Cauchy product.
theorem cauchy_product_add_right(a: Nat -> Real, b: Nat -> Real, bb: Nat -> Real, n: Nat) {
    cauchy_product(a, add_fn(b, bb), n) = cauchy_product(a, b, n) + cauchy_product(a, bb, n)
} by {
    // Expand cauchy_product definitions
    cauchy_product(a, add_fn(b, bb), n) = sum(map(n.suc.range, cauchy_coefficient(a, add_fn(b, bb), n)))
    cauchy_product(a, b, n) = sum(map(n.suc.range, cauchy_coefficient(a, b, n)))
    cauchy_product(a, bb, n) = sum(map(n.suc.range, cauchy_coefficient(a, bb, n)))

    // Show that the coefficient functions are related by addition
    forall(k: Nat) {
        cauchy_coefficient(a, add_fn(b, bb), n)(k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(a, bb, n)(k)
        add_fn(cauchy_coefficient(a, b, n), cauchy_coefficient(a, bb, n))(k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(a, bb, n)(k)
    }

    // The two functions are equal
    cauchy_coefficient(a, add_fn(b, bb), n) = add_fn(cauchy_coefficient(a, b, n), cauchy_coefficient(a, bb, n))

    // Use map_sum_add to split the sum
    sum(map(n.suc.range, cauchy_coefficient(a, add_fn(b, bb), n))) = sum(map(n.suc.range, add_fn(cauchy_coefficient(a, b, n), cauchy_coefficient(a, bb, n))))
    sum(map(n.suc.range, add_fn(cauchy_coefficient(a, b, n), cauchy_coefficient(a, bb, n)))) = sum(map(n.suc.range, cauchy_coefficient(a, b, n))) + sum(map(n.suc.range, cauchy_coefficient(a, bb, n)))
}

/// Partial sum of Cauchy product with zero sequence on the left is zero.
theorem partial_cauchy_zero_left(b: Nat -> Real, n: Nat) {
    partial(cauchy_seq(constant[Nat, Real](Real.0), b), n) = Real.0
} by {
    let a = constant[Nat, Real](Real.0)
    let c = cauchy_seq(a, b)

    // Show that cauchy_seq(a, b) is the constant zero function
    forall(k: Nat) {
        c(k) = cauchy_product(a, b, k)
        cauchy_product(a, b, k) = Real.0
        c(k) = Real.0
        constant[Nat, Real](Real.0)(k) = Real.0
    }
    c = constant[Nat, Real](Real.0)

    // Partial sum of constant zero is zero
    partial(c, n) = sum(map(n.range, c))
    partial(c, n) = sum(map(n.range, constant[Nat, Real](Real.0)))

    forall(k: Nat) {
        constant[Nat, Real](Real.0)(k) = Real.0
    }

    sum(map(n.range, constant[Nat, Real](Real.0))) = Real.0
    partial(c, n) = Real.0
}

/// Partial sum of Cauchy product with zero sequence on the right is zero.
theorem partial_cauchy_zero_right(a: Nat -> Real, n: Nat) {
    partial(cauchy_seq(a, constant[Nat, Real](Real.0)), n) = Real.0
} by {
    let b = constant[Nat, Real](Real.0)
    let c = cauchy_seq(a, b)

    // Show that cauchy_seq(a, b) is the constant zero function
    forall(k: Nat) {
        c(k) = cauchy_product(a, b, k)
        cauchy_product(a, b, k) = Real.0
        c(k) = Real.0
        constant[Nat, Real](Real.0)(k) = Real.0
    }
    c = constant[Nat, Real](Real.0)

    // Partial sum of constant zero is zero
    partial(c, n) = sum(map(n.range, c))
    partial(c, n) = sum(map(n.range, constant[Nat, Real](Real.0)))

    forall(k: Nat) {
        constant[Nat, Real](Real.0)(k) = Real.0
    }

    sum(map(n.range, constant[Nat, Real](Real.0))) = Real.0
    partial(c, n) = Real.0
}

/// Partial sum distributes over addition in the first argument.
theorem partial_cauchy_add_left(a: Nat -> Real, aa: Nat -> Real, b: Nat -> Real, n: Nat) {
    partial(cauchy_seq(add_fn(a, aa), b), n) = partial(cauchy_seq(a, b), n) + partial(cauchy_seq(aa, b), n)
} by {
    // Show that cauchy_seq distributes over addition
    forall(k: Nat) {
        cauchy_seq(add_fn(a, aa), b)(k) = cauchy_product(add_fn(a, aa), b, k)
        cauchy_product(add_fn(a, aa), b, k) = cauchy_product(a, b, k) + cauchy_product(aa, b, k)
        cauchy_seq(a, b)(k) = cauchy_product(a, b, k)
        cauchy_seq(aa, b)(k) = cauchy_product(aa, b, k)
        cauchy_seq(add_fn(a, aa), b)(k) = cauchy_seq(a, b)(k) + cauchy_seq(aa, b)(k)
        add_fn(cauchy_seq(a, b), cauchy_seq(aa, b))(k) = cauchy_seq(a, b)(k) + cauchy_seq(aa, b)(k)
    }

    // Therefore the sequences are equal
    cauchy_seq(add_fn(a, aa), b) = add_fn(cauchy_seq(a, b), cauchy_seq(aa, b))

    // Use partial_add to distribute the partial sum
    partial(cauchy_seq(add_fn(a, aa), b), n) = partial(add_fn(cauchy_seq(a, b), cauchy_seq(aa, b)), n)
    partial(add_fn(cauchy_seq(a, b), cauchy_seq(aa, b)), n) = partial(cauchy_seq(a, b), n) + partial(cauchy_seq(aa, b), n)
}

/// Partial sum distributes over addition in the second argument.
theorem partial_cauchy_add_right(a: Nat -> Real, b: Nat -> Real, bb: Nat -> Real, n: Nat) {
    partial(cauchy_seq(a, add_fn(b, bb)), n) = partial(cauchy_seq(a, b), n) + partial(cauchy_seq(a, bb), n)
} by {
    // Show that cauchy_seq distributes over addition
    forall(k: Nat) {
        cauchy_seq(a, add_fn(b, bb))(k) = cauchy_product(a, add_fn(b, bb), k)
        cauchy_product(a, add_fn(b, bb), k) = cauchy_product(a, b, k) + cauchy_product(a, bb, k)
        cauchy_seq(a, b)(k) = cauchy_product(a, b, k)
        cauchy_seq(a, bb)(k) = cauchy_product(a, bb, k)
        cauchy_seq(a, add_fn(b, bb))(k) = cauchy_seq(a, b)(k) + cauchy_seq(a, bb)(k)
        add_fn(cauchy_seq(a, b), cauchy_seq(a, bb))(k) = cauchy_seq(a, b)(k) + cauchy_seq(a, bb)(k)
    }

    // Therefore the sequences are equal
    cauchy_seq(a, add_fn(b, bb)) = add_fn(cauchy_seq(a, b), cauchy_seq(a, bb))

    // Use partial_add to distribute the partial sum
    partial(cauchy_seq(a, add_fn(b, bb)), n) = partial(add_fn(cauchy_seq(a, b), cauchy_seq(a, bb)), n)
    partial(add_fn(cauchy_seq(a, b), cauchy_seq(a, bb)), n) = partial(cauchy_seq(a, b), n) + partial(cauchy_seq(a, bb), n)
}

/// Scalar multiplication factors out of partial sum in the first argument.
theorem partial_cauchy_scalar_left(c: Real, a: Nat -> Real, b: Nat -> Real, n: Nat) {
    partial(cauchy_seq(mul_fn(c, a), b), n) = c * partial(cauchy_seq(a, b), n)
} by {
    // Show that cauchy_seq factors out scalar multiplication
    forall(k: Nat) {
        cauchy_seq(mul_fn(c, a), b)(k) = cauchy_product(mul_fn(c, a), b, k)
        cauchy_product(mul_fn(c, a), b, k) = c * cauchy_product(a, b, k)
        cauchy_seq(a, b)(k) = cauchy_product(a, b, k)
        cauchy_seq(mul_fn(c, a), b)(k) = c * cauchy_seq(a, b)(k)
        mul_fn(c, cauchy_seq(a, b))(k) = c * cauchy_seq(a, b)(k)
    }

    // Therefore the sequences are equal
    cauchy_seq(mul_fn(c, a), b) = mul_fn(c, cauchy_seq(a, b))

    // Use partial_scalar_mul to factor out the constant
    partial(cauchy_seq(mul_fn(c, a), b), n) = partial(mul_fn(c, cauchy_seq(a, b)), n)
    partial(mul_fn(c, cauchy_seq(a, b)), n) = c * partial(cauchy_seq(a, b), n)
}

/// Scalar multiplication factors out of partial sum in the second argument.
theorem partial_cauchy_scalar_right(c: Real, a: Nat -> Real, b: Nat -> Real, n: Nat) {
    partial(cauchy_seq(a, mul_fn(c, b)), n) = c * partial(cauchy_seq(a, b), n)
} by {
    // Show that cauchy_seq factors out scalar multiplication
    forall(k: Nat) {
        cauchy_seq(a, mul_fn(c, b))(k) = cauchy_product(a, mul_fn(c, b), k)
        cauchy_product(a, mul_fn(c, b), k) = c * cauchy_product(a, b, k)
        cauchy_seq(a, b)(k) = cauchy_product(a, b, k)
        cauchy_seq(a, mul_fn(c, b))(k) = c * cauchy_seq(a, b)(k)
        mul_fn(c, cauchy_seq(a, b))(k) = c * cauchy_seq(a, b)(k)
    }

    // Therefore the sequences are equal
    cauchy_seq(a, mul_fn(c, b)) = mul_fn(c, cauchy_seq(a, b))

    // Use partial_scalar_mul to factor out the constant
    partial(cauchy_seq(a, mul_fn(c, b)), n) = partial(mul_fn(c, cauchy_seq(a, b)), n)
    partial(mul_fn(c, cauchy_seq(a, b)), n) = c * partial(cauchy_seq(a, b), n)
}

// ============================================================================
// Absolute Convergence Infrastructure
// ============================================================================

/// The absolute value of each element in a sequence.
/// For a sequence a, this returns the sequence n â†¦ |a(n)|.
define abs_fn(a: Nat -> Real) -> (Nat -> Real) {
    function(n: Nat) { a(n).abs }
}

/// A series converges absolutely if the series of absolute values converges.
define absolutely_converges(a: Nat -> Real) -> Bool {
    converges(partial(abs_fn(a)))
}

/// The absolute value of any element in the constant zero sequence is zero.
theorem abs_fn_zero(n: Nat) {
    abs_fn(constant[Nat, Real](Real.0))(n) = Real.0
} by {
    abs_fn(constant[Nat, Real](Real.0))(n) = constant[Nat, Real](Real.0)(n).abs
    constant[Nat, Real](Real.0)(n) = Real.0
    Real.0.abs = Real.0
}

/// The absolute value of any element in a sequence is nonnegative.
theorem abs_fn_nonneg(a: Nat -> Real, n: Nat) {
    abs_fn(a)(n) >= Real.0
} by {
    abs_fn(a)(n) = a(n).abs
    a(n).abs >= Real.0
}

/// Absolute value commutes with scalar multiplication (up to taking abs of scalar).
theorem abs_fn_scalar_mul(c: Real, a: Nat -> Real, n: Nat) {
    abs_fn(mul_fn(c, a))(n) = c.abs * abs_fn(a)(n)
} by {
    abs_fn(mul_fn(c, a))(n) = mul_fn(c, a)(n).abs
    mul_fn(c, a)(n) = c * a(n)
    (c * a(n)).abs = c.abs * a(n).abs
    abs_fn(a)(n) = a(n).abs
    c.abs * a(n).abs = c.abs * abs_fn(a)(n)
}

/// abs_fn is equivalent to composing with Real.abs.
theorem abs_fn_eq_compose(a: Nat -> Real, n: Nat) {
    abs_fn(a)(n) = compose(Real.abs, a)(n)
} by {
    abs_fn(a)(n) = a(n).abs
    compose(Real.abs, a)(n) = Real.abs(a(n))
    Real.abs(a(n)) = a(n).abs
}

/// Absolute convergence implies convergence (alternate formulation).
/// This connects our definition to the existing theorem in real_series.ac.
theorem absolutely_converges_imp_converges(a: Nat -> Real) {
    absolutely_converges(a) implies converges(partial(a))
} by {
    from real.real_series import abs_conv_imp_conv

    if absolutely_converges(a) {
        // By definition, absolutely_converges(a) means converges(partial(abs_fn(a)))
        converges(partial(abs_fn(a)))

        // Show that abs_fn(a) = compose(Real.abs, a)
        forall(n: Nat) {
            abs_fn(a)(n) = compose(Real.abs, a)(n)
        }
        abs_fn(a) = compose(Real.abs, a)

        // Therefore converges(partial(compose(Real.abs, a)))
        partial(abs_fn(a)) = partial(compose(Real.abs, a))
        converges(partial(compose(Real.abs, a)))

        // Apply abs_conv_imp_conv
        abs_conv_imp_conv(a)
        converges(partial(a))
    }
}

/// Absolute convergence is preserved under scalar multiplication.
theorem absolutely_converges_scalar_mul(c: Real, a: Nat -> Real) {
    absolutely_converges(a) implies absolutely_converges(mul_fn(c, a))
} by {
    from real.real_series import converges_mul_seq

    if absolutely_converges(a) {
        converges(partial(abs_fn(a)))

        // Show that abs_fn(mul_fn(c, a)) relates to abs_fn(a)
        forall(n: Nat) {
            abs_fn(mul_fn(c, a))(n) = c.abs * abs_fn(a)(n)
            mul_fn(c.abs, abs_fn(a))(n) = c.abs * abs_fn(a)(n)
        }
        abs_fn(mul_fn(c, a)) = mul_fn(c.abs, abs_fn(a))

        // Therefore partial(abs_fn(mul_fn(c, a))) = c.abs * partial(abs_fn(a))
        partial(abs_fn(mul_fn(c, a))) = partial(mul_fn(c.abs, abs_fn(a)))
        partial(mul_fn(c.abs, abs_fn(a))) = mul_fn(c.abs, partial(abs_fn(a)))

        // Show that mul_fn and mul_seq are equal for our purposes
        forall(n: Nat) {
            mul_fn(c.abs, partial(abs_fn(a)))(n) = c.abs * partial(abs_fn(a))(n)
            mul_seq(c.abs, partial(abs_fn(a)))(n) = c.abs * partial(abs_fn(a))(n)
        }
        mul_fn(c.abs, partial(abs_fn(a))) = mul_seq(c.abs, partial(abs_fn(a)))

        // If partial(abs_fn(a)) converges, so does c.abs * partial(abs_fn(a))
        converges_mul_seq(c.abs, partial(abs_fn(a)))
        converges(mul_seq(c.abs, partial(abs_fn(a))))
        converges(mul_fn(c.abs, partial(abs_fn(a))))
        converges(partial(abs_fn(mul_fn(c, a))))
        absolutely_converges(mul_fn(c, a))
    }
}

/// Absolute convergence is preserved under addition of sequences.
theorem absolutely_converges_add(a: Nat -> Real, b: Nat -> Real) {
    absolutely_converges(a) and absolutely_converges(b)
    implies
    absolutely_converges(add_fn(a, b))
} by {
    from real.real_series import add_seq_converges, comparison_test

    if absolutely_converges(a) and absolutely_converges(b) {
        converges(partial(abs_fn(a)))
        converges(partial(abs_fn(b)))

        // For all n: |a(n) + b(n)| <= |a(n)| + |b(n)| by triangle inequality
        forall(n: Nat) {
            (a(n) + b(n)).abs <= a(n).abs + b(n).abs
            add_fn(a, b)(n) = a(n) + b(n)
            abs_fn(add_fn(a, b))(n) = add_fn(a, b)(n).abs
            abs_fn(add_fn(a, b))(n) <= a(n).abs + b(n).abs
            abs_fn(add_fn(a, b))(n) <= abs_fn(a)(n) + abs_fn(b)(n)
            abs_fn(add_fn(a, b))(n) <= add_fn(abs_fn(a), abs_fn(b))(n)
        }

        // Therefore seq_lte holds
        seq_lte(abs_fn(add_fn(a, b)), add_fn(abs_fn(a), abs_fn(b)))

        // abs_fn always produces nonnegative values
        forall(n: Nat) {
            abs_fn(add_fn(a, b))(n) >= Real.0
        }
        is_lower_bound(abs_fn(add_fn(a, b)), Real.0)

        // add_fn distributes over partial
        partial(add_fn(abs_fn(a), abs_fn(b))) = add_fn(partial(abs_fn(a)), partial(abs_fn(b)))

        // Show that add_fn and add_seq are equal for our purposes
        forall(n: Nat) {
            add_fn(partial(abs_fn(a)), partial(abs_fn(b)))(n) = partial(abs_fn(a))(n) + partial(abs_fn(b))(n)
            add_seq(partial(abs_fn(a)), partial(abs_fn(b)))(n) = partial(abs_fn(a))(n) + partial(abs_fn(b))(n)
        }
        add_fn(partial(abs_fn(a)), partial(abs_fn(b))) = add_seq(partial(abs_fn(a)), partial(abs_fn(b)))

        // If both converge, their sum converges
        add_seq_converges(partial(abs_fn(a)), partial(abs_fn(b)))
        converges(add_seq(partial(abs_fn(a)), partial(abs_fn(b))))
        converges(add_fn(partial(abs_fn(a)), partial(abs_fn(b))))
        converges(partial(add_fn(abs_fn(a), abs_fn(b))))

        // Apply comparison test
        comparison_test(abs_fn(add_fn(a, b)), add_fn(abs_fn(a), abs_fn(b)))
        converges(partial(abs_fn(add_fn(a, b))))
        absolutely_converges(add_fn(a, b))
    }
}

/// Tail bound for absolutely convergent series.
/// If a series converges absolutely, then tail sums can be made arbitrarily small.
/// For any Îµ > 0, there exists N such that for all n, m â‰¥ N with n â‰¤ m,
/// the sum of |a(k)| from k=n to k=m-1 is less than Îµ.
theorem abs_conv_tail_bound(a: Nat -> Real, eps: Real) {
    absolutely_converges(a) and eps.is_positive
    implies
    exists(big_n: Nat) {
        forall(n: Nat, m: Nat) {
            big_n <= n and n <= m
            implies
            partial(abs_fn(a), m) - partial(abs_fn(a), n) < eps
        }
    }
} by {
    from real.real_seq import cauchy_bound
    from real.real_series import distant_increasing, nonneg_imp_partial_increasing, is_increasing

    if absolutely_converges(a) and eps.is_positive {
        // absolutely_converges(a) means converges(partial(abs_fn(a)))
        converges(partial(abs_fn(a)))

        // Use the Cauchy criterion to get an N
        let big_n: Nat satisfy {
            cauchy_bound(partial(abs_fn(a)), big_n, eps)
        }

        forall(n: Nat, m: Nat) {
            if big_n <= n and n <= m {
                // By Cauchy criterion, the partial sums are close
                cauchy_bound(partial(abs_fn(a)), big_n, eps)
                partial(abs_fn(a))(n).is_close(partial(abs_fn(a))(m), eps)

                // Since abs_fn is nonnegative, partial sums are increasing
                forall(k: Nat) {
                    abs_fn(a)(k) >= Real.0
                }
                is_lower_bound(abs_fn(a), Real.0)
                nonneg_imp_partial_increasing(abs_fn(a))
                is_increasing(partial(abs_fn(a)))

                // When n <= m, the partial sums satisfy this ordering
                distant_increasing(partial(abs_fn(a)), n, m)
                partial(abs_fn(a))(n) <= partial(abs_fn(a))(m)

                // is_close is symmetric, so we also have
                partial(abs_fn(a))(m).is_close(partial(abs_fn(a))(n), eps)

                // Rewrite using function application notation
                partial(abs_fn(a), n) = partial(abs_fn(a))(n)
                partial(abs_fn(a), m) = partial(abs_fn(a))(m)
                partial(abs_fn(a), m).is_close(partial(abs_fn(a), n), eps)

                // This means the absolute difference is less than eps
                (partial(abs_fn(a), m) - partial(abs_fn(a), n)).abs < eps

                // Since partial is increasing and n <= m, we know partial(abs_fn(a), n) <= partial(abs_fn(a), m)
                // Therefore the difference partial(abs_fn(a), m) - partial(abs_fn(a), n) is non-negative
                // When a difference is non-negative, x - y >= 0, then (x - y).abs = x - y
                // So (partial(abs_fn(a), m) - partial(abs_fn(a), n)).abs = partial(abs_fn(a), m) - partial(abs_fn(a), n)
                partial(abs_fn(a), n) <= partial(abs_fn(a), m)
                partial(abs_fn(a), m) - partial(abs_fn(a), n) < eps
            }
        }
    }
}

// ============================================================================
// Cauchy Product Convergence (Mertens' Theorem)
// ============================================================================

/// Triangle inequality for sums: the absolute value of a sum is at most the sum of absolute values.
theorem sum_triangle_ineq(items: List[Real]) {
    (sum(items)).abs <= sum(map(items, Real.abs))
} by {
    from real.real_series import triangle_ineq

    // Proof by induction on list structure
    define p(xs: List[Real]) -> Bool {
        (sum(xs)).abs <= sum(map(xs, Real.abs))
    }

    // Base case: empty list
    sum(List.nil[Real]) = Real.0
    Real.0.abs = Real.0
    map(List.nil[Real], Real.abs) = List.nil[Real]
    sum(List.nil[Real]) = Real.0
    p(List.nil[Real])

    // Inductive step
    forall(head: Real, tail: List[Real]) {
        if p(tail) {
            // Assume: (sum(tail)).abs <= sum(map(tail, Real.abs))
            (sum(tail)).abs <= sum(map(tail, Real.abs))

            // Show for cons(head, tail)
            sum(List.cons(head, tail)) = head + sum(tail)
            (head + sum(tail)).abs <= head.abs + (sum(tail)).abs

            // Use inductive hypothesis
            head.abs + (sum(tail)).abs <= head.abs + sum(map(tail, Real.abs))

            // Show that right side equals sum(map(cons(head, tail), Real.abs))
            map(List.cons(head, tail), Real.abs) = List.cons(head.abs, map(tail, Real.abs))
            sum(List.cons(head.abs, map(tail, Real.abs))) = head.abs + sum(map(tail, Real.abs))

            // Combine
            (sum(List.cons(head, tail))).abs <= sum(map(List.cons(head, tail), Real.abs))
            p(List.cons(head, tail))
        }
    }

    p(items)
}

/// Pointwise less-than-or-equal for functions from Nat to Real.
define lte_fn(f: Nat -> Real, g: Nat -> Real) -> Bool {
    forall(k: Nat) { f(k) <= g(k) }
}

/// Helper: sum(map(n.range, f)) <= sum(map(n.range, g)) when f <= g pointwise.
/// Uses existing partial_seq_lte infrastructure.
theorem sum_map_range_le(n: Nat, f: Nat -> Real, g: Nat -> Real) {
    lte_fn(f, g) implies sum(map(n.range, f)) <= sum(map(n.range, g))
} by {
    from real.real_series import partial_seq_lte

    if lte_fn(f, g) {
        // lte_fn(f, g) is the same as seq_lte(f, g)
        lte_fn(f, g)
        forall(k: Nat) { f(k) <= g(k) }
        seq_lte(f, g)

        // Apply partial_seq_lte
        partial_seq_lte(f, g)
        seq_lte(partial(f), partial(g))
        forall(k: Nat) { partial(f)(k) <= partial(g)(k) }

        // partial(f, n) = sum(map(n.range, f)) by definition
        partial(f, n) = sum(map(n.range, f))
        partial(g, n) = sum(map(n.range, g))

        // Therefore
        partial(f)(n) <= partial(g)(n)
        sum(map(n.range, f)) <= sum(map(n.range, g))
    }
}

/// The absolute value of a Cauchy product coefficient is bounded by the
/// corresponding coefficient of the Cauchy product of absolute values.
theorem cauchy_coefficient_abs_bound(a: Nat -> Real, b: Nat -> Real, n: Nat, k: Nat) {
    (cauchy_coefficient(a, b, n)(k)).abs <= cauchy_coefficient(abs_fn(a), abs_fn(b), n)(k)
} by {
    // Expand definitions
    cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)
    (a(k) * b(n - k)).abs = a(k).abs * b(n - k).abs

    // Expand the right side
    cauchy_coefficient(abs_fn(a), abs_fn(b), n)(k) = abs_fn(a)(k) * abs_fn(b)(n - k)
    abs_fn(a)(k) = a(k).abs
    abs_fn(b)(n - k) = b(n - k).abs
    cauchy_coefficient(abs_fn(a), abs_fn(b), n)(k) = a(k).abs * b(n - k).abs
}

/// The absolute value of the Cauchy product is bounded by the Cauchy product of absolute values.
theorem cauchy_product_abs_bound(a: Nat -> Real, b: Nat -> Real, n: Nat) {
    (cauchy_product(a, b, n)).abs <= cauchy_product(abs_fn(a), abs_fn(b), n)
} by {
    // Expand definition of cauchy_product
    cauchy_product(a, b, n) = sum(map(n.suc.range, cauchy_coefficient(a, b, n)))
    cauchy_product(abs_fn(a), abs_fn(b), n) = sum(map(n.suc.range, cauchy_coefficient(abs_fn(a), abs_fn(b), n)))

    // Apply triangle inequality: |sum(...)| <= sum(|...|)
    sum_triangle_ineq(map(n.suc.range, cauchy_coefficient(a, b, n)))
    (sum(map(n.suc.range, cauchy_coefficient(a, b, n)))).abs <= sum(map(map(n.suc.range, cauchy_coefficient(a, b, n)), Real.abs))

    // Use map composition
    from list.list_sum import map_map
    map_map(n.suc.range, cauchy_coefficient(a, b, n), Real.abs)
    map(map(n.suc.range, cauchy_coefficient(a, b, n)), Real.abs) = map(n.suc.range, compose(Real.abs, cauchy_coefficient(a, b, n)))

    // For each coefficient, the absolute value is bounded
    forall(k: Nat) {
        cauchy_coefficient_abs_bound(a, b, n, k)
        (cauchy_coefficient(a, b, n)(k)).abs <= cauchy_coefficient(abs_fn(a), abs_fn(b), n)(k)
        compose(Real.abs, cauchy_coefficient(a, b, n))(k) = Real.abs(cauchy_coefficient(a, b, n)(k))
        compose(Real.abs, cauchy_coefficient(a, b, n))(k) = (cauchy_coefficient(a, b, n)(k)).abs
        compose(Real.abs, cauchy_coefficient(a, b, n))(k) <= cauchy_coefficient(abs_fn(a), abs_fn(b), n)(k)
    }
    lte_fn(compose(Real.abs, cauchy_coefficient(a, b, n)), cauchy_coefficient(abs_fn(a), abs_fn(b), n))

    // Apply sum_map_range_le
    sum_map_range_le(n.suc, compose(Real.abs, cauchy_coefficient(a, b, n)), cauchy_coefficient(abs_fn(a), abs_fn(b), n))
    sum(map(n.suc.range, compose(Real.abs, cauchy_coefficient(a, b, n)))) <= sum(map(n.suc.range, cauchy_coefficient(abs_fn(a), abs_fn(b), n)))

    // Combine by transitivity
    (cauchy_product(a, b, n)).abs <= cauchy_product(abs_fn(a), abs_fn(b), n)
}

/// Partial sum at index 0 is 0.
theorem partial_zero[A: AddCommMonoid](f: Nat -> A) {
    partial(f, Nat.0) = A.0
} by {
    partial(f, Nat.0) = sum(map(Nat.0.range, f))
    Nat.0.range = List.nil[Nat]
    map(List.nil[Nat], f) = List.nil[A]
    sum(List.nil[A]) = A.0
}

/// Partial sums of nonnegative sequences are nonnegative.
theorem partial_nonneg(f: Nat -> Real, n: Nat) {
    is_lower_bound(f, Real.0) implies partial(f, n) >= Real.0
} by {
    from list.list_sum import map_add, sum_add
    from real.real_base import lte_add_right

    define p(m: Nat) -> Bool {
        is_lower_bound(f, Real.0) implies partial(f, m) >= Real.0
    }

    // Base case: n = 0
    if is_lower_bound(f, Real.0) {
        partial_zero(f)
        partial(f, Nat.0) = Real.0
        partial(f, Nat.0) >= Real.0
    }
    p(Nat.0)

    // Inductive step
    forall(m: Nat) {
        if p(m) {
            if is_lower_bound(f, Real.0) {
                // By IH
                p(m)
                partial(f, m) >= Real.0

                // Show f(m) >= 0
                is_lower_bound(f, Real.0)
                f(m) >= Real.0

                // Expand partial(f, m.suc)
                m.suc.range = m.range + List.singleton(m)
                map_add(m.range, List.singleton(m), f)
                map(m.suc.range, f) = map(m.range, f) + List.singleton(f(m))
                sum_add(map(m.range, f), List.singleton(f(m)))
                sum(map(m.suc.range, f)) = sum(map(m.range, f)) + f(m)
                partial(f, m.suc) = sum(map(m.suc.range, f))
                partial(f, m) = sum(map(m.range, f))
                partial(f, m.suc) = partial(f, m) + f(m)

                // Both terms are nonnegative, so the sum is nonnegative
                // partial(f, m) >= 0, so partial(f, m) + f(m) >= 0 + f(m) = f(m) >= 0
                lte_add_right(Real.0, partial(f, m), f(m))
                Real.0 + f(m) <= partial(f, m) + f(m)
                Real.0 + f(m) = f(m)
                f(m) <= partial(f, m) + f(m)
                Real.0 <= f(m)
                Real.0 <= partial(f, m) + f(m)
                partial(f, m.suc) >= Real.0
            }
            p(m.suc)
        }
    }

    p(n)
}

/// Product of nonnegative numbers is nonnegative.
theorem mul_nonneg(a: Real, b: Real) {
    a >= Real.0 and b >= Real.0 implies a * b >= Real.0
} by {
    if a >= Real.0 and b >= Real.0 {
        // Case 1: a = 0
        if a = Real.0 {
            a * b = Real.0 * b
            Real.0 * b = Real.0
            a * b = Real.0
            a * b >= Real.0
        }

        // Case 2: b = 0
        if b = Real.0 {
            a * b = a * Real.0
            a * Real.0 = Real.0
            a * b = Real.0
            a * b >= Real.0
        }

        // Case 3: a > 0 and b > 0
        if a > Real.0 and b > Real.0 {
            from real.real_ring import mul_pos_pos
            mul_pos_pos(a, b)
            (a * b).is_positive
            a * b > Real.0
            a * b >= Real.0
        }

        // At least one of these cases holds
        a * b >= Real.0
    }
}

/// Scalar multiplication on the right of a partial sum.
theorem partial_mul_scalar_right(a: Nat -> Real, b: Real, n: Nat) {
    partial(a, n) * b = sum(map(n.range, mul_fn(b, a)))
} by {
    from list.list_sum import partial_scalar_mul

    // Use commutativity to swap the order
    partial(a, n) * b = b * partial(a, n)

    // Apply the left scalar multiplication theorem
    partial_scalar_mul(b, a, n)
    b * partial(a, n) = partial(mul_fn(b, a), n)

    // Expand the definition of partial
    partial(mul_fn(b, a), n) = sum(map(n.range, mul_fn(b, a)))

    partial(a, n) * b = sum(map(n.range, mul_fn(b, a)))
}

/// Helper: compute the sum of row i in a double sum.
/// This avoids nested lambdas by making all parameters explicit.
define row_sum(m: Nat, f: (Nat, Nat) -> Real, i: Nat) -> Real {
    sum(map(m.range, f(i)))
}

/// Helper: get the value at column j for row i.
/// This extracts f(i, j) in a way that can be partially applied.
define col_val(f: (Nat, Nat) -> Real, j: Nat, i: Nat) -> Real {
    f(i, j)
}

/// Double sum: sum over pairs (i, j) where i âˆˆ [0, n) and j âˆˆ [0, m).
/// This computes âˆ‘_{i=0}^{n-1} âˆ‘_{j=0}^{m-1} f(i, j).
/// Using a named helper function instead of nested lambdas to help Acorn's normalizer.
define double_sum(n: Nat, m: Nat, f: (Nat, Nat) -> Real) -> Real {
    sum(map(n.range, row_sum(m, f)))
}

/// Test: Can we just expand the double_sum definition?
/// This should be trivially true since it's literally the definition.
theorem double_sum_expands(n: Nat, m: Nat, f: (Nat, Nat) -> Real) {
    double_sum(n, m, f) = sum(map(n.range, row_sum(m, f)))
} by {
    // This is literally just the definition
}

/// Expanding double_sum by adding a column: when we increment the column count,
/// we get the old double_sum plus the sum over the new column.
theorem double_sum_col_expand(n: Nat, m: Nat, f: (Nat, Nat) -> Real) {
    double_sum(n, m.suc, f) = double_sum(n, m, f) + sum(map(n.range, col_val(f, m)))
} by {
    from list.list_sum import map_add, sum_add

    // For each i, row_sum(m.suc, f, i) = row_sum(m, f, i) + f(i, m)
    forall(i: Nat) {
        m.suc.range = m.range + List.singleton(m)
        map_add(m.range, List.singleton(m), f(i))
        sum_add(map(m.range, f(i)), List.singleton(f(i, m)))
        row_sum(m.suc, f, i) = row_sum(m, f, i) + f(i, m)
    }

    // Apply map_sum_add
    map_sum_add(n.range, row_sum(m, f), col_val(f, m))
    sum(map(n.range, row_sum(m, f))) + sum(map(n.range, col_val(f, m))) = sum(map(n.range, add_fn(row_sum(m, f), col_val(f, m))))

    // Connect add_fn to row_sum(m.suc)
    forall(i: Nat) {
        add_fn(row_sum(m, f), col_val(f, m))(i) = row_sum(m, f, i) + col_val(f, m, i)
        col_val(f, m, i) = f(i, m)
        add_fn(row_sum(m, f), col_val(f, m))(i) = row_sum(m, f, i) + f(i, m)
        add_fn(row_sum(m, f), col_val(f, m))(i) = row_sum(m.suc, f, i)
    }

    sum(map(n.range, add_fn(row_sum(m, f), col_val(f, m)))) = sum(map(n.range, row_sum(m.suc, f)))

    double_sum(n, m.suc, f) = double_sum(n, m, f) + sum(map(n.range, col_val(f, m)))
}

/// Helper: get the value at row i for column j.
/// This extracts f(i, j) as a function of j for a fixed i.
define row_val(f: (Nat, Nat) -> Real, i: Nat) -> (Nat -> Real) {
    function(j: Nat) { f(i, j) }
}

/// Expanding double_sum by adding a row: when we increment the row count,
/// we get the old double_sum plus the sum over the new row.
theorem double_sum_row_expand(n: Nat, m: Nat, f: (Nat, Nat) -> Real) {
    double_sum(n.suc, m, f) = double_sum(n, m, f) + sum(map(m.range, row_val(f, n)))
} by {
    from list.list_sum import map_add, sum_add

    // Expand the definition of double_sum
    double_sum(n.suc, m, f) = sum(map(n.suc.range, row_sum(m, f)))
    double_sum(n, m, f) = sum(map(n.range, row_sum(m, f)))

    // Expand n.suc.range
    n.suc.range = n.range + List.singleton(n)
    map_add(n.range, List.singleton(n), row_sum(m, f))
    map(n.suc.range, row_sum(m, f)) = map(n.range, row_sum(m, f)) + map(List.singleton(n), row_sum(m, f))

    // Evaluate map on singleton
    map(List.singleton(n), row_sum(m, f)) = List.singleton(row_sum(m, f, n))
    row_sum(m, f, n) = sum(map(m.range, f(n)))

    // Show that f(n) = row_val(f, n)
    forall(j: Nat) {
        f(n)(j) = f(n, j)
        row_val(f, n)(j) = f(n, j)
    }
    f(n) = row_val(f, n)
    row_sum(m, f, n) = sum(map(m.range, row_val(f, n)))

    // Combine using sum_add
    map(n.suc.range, row_sum(m, f)) = map(n.range, row_sum(m, f)) + List.singleton(sum(map(m.range, row_val(f, n))))
    sum_add(map(n.range, row_sum(m, f)), List.singleton(sum(map(m.range, row_val(f, n)))))
    sum(map(n.suc.range, row_sum(m, f))) = sum(map(n.range, row_sum(m, f))) + sum(map(m.range, row_val(f, n)))

    double_sum(n.suc, m, f) = double_sum(n, m, f) + sum(map(m.range, row_val(f, n)))
}

/// Helper: scalar multiplication distributes into a sum.
/// For a constant c: c * âˆ‘áµ¢ b(i) = âˆ‘áµ¢ (c * b(i))
theorem scalar_mul_sum(c: Real, b: Nat -> Real, n: Nat) {
    c * sum(map(n.range, b)) = sum(map(n.range, mul_fn(c, b)))
} by {
    // Use commutativity and existing infrastructure
    sum(map(n.range, b)) = partial(b, n)
    c * sum(map(n.range, b)) = c * partial(b, n)

    // Apply partial_mul_scalar_right
    partial_mul_scalar_right(b, c, n)
    partial(b, n) * c = sum(map(n.range, mul_fn(c, b)))
    c * partial(b, n) = partial(b, n) * c
    c * partial(b, n) = sum(map(n.range, mul_fn(c, b)))

    c * sum(map(n.range, b)) = sum(map(n.range, mul_fn(c, b)))
}

/// Helper: product function for double sums.
define prod_fn(a: Nat -> Real, b: Nat -> Real) -> ((Nat, Nat) -> Real) {
    function(i: Nat, j: Nat) { a(i) * b(j) }
}

/// Product of two partial sums equals a double sum over the product.
/// This is the key lemma for expanding (âˆ‘aáµ¢)(âˆ‘bâ±¼) into âˆ‘áµ¢âˆ‘â±¼ aáµ¢bâ±¼.
theorem partial_product_as_double_sum(a: Nat -> Real, b: Nat -> Real, n: Nat) {
    partial(a, n) * partial(b, n) = double_sum(n, n, prod_fn(a, b))
} by {
    from list.list_sum import map_add, sum_add

    define p(m: Nat) -> Bool {
        partial(a, m) * partial(b, m) = double_sum(m, m, prod_fn(a, b))
    }

    // Base case: m = 0
    partial_zero(a)
    partial(a, Nat.0) = Real.0
    partial_zero(b)
    partial(b, Nat.0) = Real.0
    partial(a, Nat.0) * partial(b, Nat.0) = Real.0 * Real.0
    Real.0 * Real.0 = Real.0
    partial(a, Nat.0) * partial(b, Nat.0) = Real.0

    // double_sum(0, 0, ...) = sum(map(0.range, ...)) = sum(nil) = 0
    Nat.0.range = List.nil[Nat]
    double_sum_expands(Nat.0, Nat.0, prod_fn(a, b))
    double_sum(Nat.0, Nat.0, prod_fn(a, b)) = sum(map(Nat.0.range, row_sum(Nat.0, prod_fn(a, b))))
    map(Nat.0.range, row_sum(Nat.0, prod_fn(a, b))) = List.nil[Real]
    sum(List.nil[Real]) = Real.0
    double_sum(Nat.0, Nat.0, prod_fn(a, b)) = Real.0

    // Combine to show p(Nat.0)
    partial(a, Nat.0) * partial(b, Nat.0) = double_sum(Nat.0, Nat.0, prod_fn(a, b))
    p(Nat.0)

    // Inductive step: if p(m), then p(m.suc)
    forall(m: Nat) {
        if p(m) {
            // Induction hypothesis
            p(m)
            partial(a, m) * partial(b, m) = double_sum(m, m, prod_fn(a, b))

            // Expand partial(a, m.suc)
            m.suc.range = m.range + List.singleton(m)
            map_add(m.range, List.singleton(m), a)
            map(m.suc.range, a) = map(m.range, a) + List.singleton(a(m))
            sum_add(map(m.range, a), List.singleton(a(m)))
            sum(map(m.suc.range, a)) = sum(map(m.range, a)) + a(m)
            partial(a, m.suc) = partial(a, m) + a(m)

            // Expand partial(b, m.suc)
            map_add(m.range, List.singleton(m), b)
            map(m.suc.range, b) = map(m.range, b) + List.singleton(b(m))
            sum_add(map(m.range, b), List.singleton(b(m)))
            sum(map(m.suc.range, b)) = sum(map(m.range, b)) + b(m)
            partial(b, m.suc) = partial(b, m) + b(m)

            // Expand the product
            partial(a, m.suc) * partial(b, m.suc) = (partial(a, m) + a(m)) * (partial(b, m) + b(m))
            (partial(a, m) + a(m)) * (partial(b, m) + b(m)) = partial(a, m) * partial(b, m) + partial(a, m) * b(m) + a(m) * partial(b, m) + a(m) * b(m)

            // Apply IH to first term
            partial(a, m.suc) * partial(b, m.suc) = double_sum(m, m, prod_fn(a, b)) + partial(a, m) * b(m) + a(m) * partial(b, m) + a(m) * b(m)

            // Expand partial(a, m) * b(m) = sum over i in [0,m) of a(i) * b(m)
            scalar_mul_sum(b(m), a, m)
            b(m) * sum(map(m.range, a)) = sum(map(m.range, mul_fn(b(m), a)))
            forall(i: Nat) {
                mul_fn(b(m), a)(i) = b(m) * a(i)
                b(m) * a(i) = a(i) * b(m)
            }
            sum(map(m.range, a)) * b(m) = b(m) * sum(map(m.range, a))
            sum(map(m.range, a)) * b(m) = sum(map(m.range, mul_fn(b(m), a)))
            partial(a, m) * b(m) = sum(map(m.range, mul_fn(b(m), a)))

            // Similarly: a(m) * partial(b, m) = sum over j in [0,m) of a(m) * b(j)
            scalar_mul_sum(a(m), b, m)
            a(m) * sum(map(m.range, b)) = sum(map(m.range, mul_fn(a(m), b)))
            a(m) * partial(b, m) = sum(map(m.range, mul_fn(a(m), b)))

            // Now expand double_sum(m.suc, m.suc, ...) using row and column expansion
            double_sum_row_expand(m, m.suc, prod_fn(a, b))
            double_sum(m.suc, m.suc, prod_fn(a, b)) = double_sum(m, m.suc, prod_fn(a, b)) + sum(map(m.suc.range, row_val(prod_fn(a, b), m)))

            double_sum_col_expand(m, m, prod_fn(a, b))
            double_sum(m, m.suc, prod_fn(a, b)) = double_sum(m, m, prod_fn(a, b)) + sum(map(m.range, col_val(prod_fn(a, b), m)))

            // Combine the expansions
            double_sum(m.suc, m.suc, prod_fn(a, b)) = double_sum(m, m, prod_fn(a, b)) + sum(map(m.range, col_val(prod_fn(a, b), m))) + sum(map(m.suc.range, row_val(prod_fn(a, b), m)))

            // Expand sum(map(m.suc.range, row_val(..., m)))
            m.suc.range = m.range + List.singleton(m)
            map_add(m.range, List.singleton(m), row_val(prod_fn(a, b), m))
            map(m.suc.range, row_val(prod_fn(a, b), m)) = map(m.range, row_val(prod_fn(a, b), m)) + List.singleton(row_val(prod_fn(a, b), m)(m))
            sum_add(map(m.range, row_val(prod_fn(a, b), m)), List.singleton(row_val(prod_fn(a, b), m)(m)))
            sum(map(m.suc.range, row_val(prod_fn(a, b), m))) = sum(map(m.range, row_val(prod_fn(a, b), m))) + row_val(prod_fn(a, b), m)(m)

            // Evaluate row_val(..., m)(m)
            row_val(prod_fn(a, b), m)(m) = prod_fn(a, b)(m, m)
            prod_fn(a, b)(m, m) = a(m) * b(m)

            double_sum(m.suc, m.suc, prod_fn(a, b)) = double_sum(m, m, prod_fn(a, b)) + sum(map(m.range, col_val(prod_fn(a, b), m))) + sum(map(m.range, row_val(prod_fn(a, b), m))) + a(m) * b(m)

            // Show col_val(..., m)(idx) = a(idx) * b(m) = mul_fn(b(m), a)(idx)
            forall(idx: Nat) {
                col_val(prod_fn(a, b), m)(idx) = prod_fn(a, b)(idx, m)
                prod_fn(a, b)(idx, m) = a(idx) * b(m)
                mul_fn(b(m), a)(idx) = b(m) * a(idx)
                b(m) * a(idx) = a(idx) * b(m)
                col_val(prod_fn(a, b), m)(idx) = mul_fn(b(m), a)(idx)
            }
            col_val(prod_fn(a, b), m) = mul_fn(b(m), a)
            sum(map(m.range, col_val(prod_fn(a, b), m))) = sum(map(m.range, mul_fn(b(m), a)))

            // Show row_val(..., m)(idx) = a(m) * b(idx) = mul_fn(a(m), b)(idx)
            forall(idx: Nat) {
                row_val(prod_fn(a, b), m)(idx) = prod_fn(a, b)(m, idx)
                prod_fn(a, b)(m, idx) = a(m) * b(idx)
                mul_fn(a(m), b)(idx) = a(m) * b(idx)
                row_val(prod_fn(a, b), m)(idx) = mul_fn(a(m), b)(idx)
            }
            row_val(prod_fn(a, b), m) = mul_fn(a(m), b)
            sum(map(m.range, row_val(prod_fn(a, b), m))) = sum(map(m.range, mul_fn(a(m), b)))

            // Combine
            double_sum(m.suc, m.suc, prod_fn(a, b)) = double_sum(m, m, prod_fn(a, b)) + sum(map(m.range, mul_fn(b(m), a))) + sum(map(m.range, mul_fn(a(m), b))) + a(m) * b(m)
            double_sum(m.suc, m.suc, prod_fn(a, b)) = double_sum(m, m, prod_fn(a, b)) + partial(a, m) * b(m) + a(m) * partial(b, m) + a(m) * b(m)
            partial(a, m.suc) * partial(b, m.suc) = double_sum(m.suc, m.suc, prod_fn(a, b))

            // This shows p(m.suc)
            p(m.suc)
        }
    }

    p(n)
}

/// Helper: indicator function for whether a pair (i,j) appears in Cauchy product up to n.
/// Returns 1 if i + j < n, otherwise 0.
define cauchy_indicator(n: Nat, i: Nat, j: Nat) -> Real {
    if i + j < n { Real.1 } else { Real.0 }
}

// TODO: These theorems require more infrastructure to prove completely.
// They are mathematically sound but need detailed reorganization lemmas.

// /// Helper: Each individual cauchy_product term can be bounded.
// /// For nonnegative a, b: cauchy_product(a,b,m) â‰¤ partial(a,m.suc) * partial(b,m.suc)
// ///
// /// Mathematical argument: cauchy_product sums a(k)*b(m-k) for kâˆˆ[0,m].
// /// Each such term appears in the double_sum expansion of partial(a,m.suc)*partial(b,m.suc)
// /// since k<m.suc and m-k<m.suc. The double_sum contains these plus additional nonnegative terms.
// theorem cauchy_term_bound(a: Nat -> Real, b: Nat -> Real, m: Nat) {
//     is_lower_bound(a, Real.0) and is_lower_bound(b, Real.0)
//     implies
//     cauchy_product(a, b, m) <= partial(a, m.suc) * partial(b, m.suc)
// } by {
//     // Requires: Formal subset sum lemma
//     sorry
// }

// /// Helper: Cauchy product partial sums of nonnegative sequences are bounded by product of partial sums.
// /// For nonnegative sequences a and b:
// /// âˆ‘_{k=0}^{n-1} (âˆ‘_{i=0}^{k} a_i * b_{k-i}) â‰¤ (âˆ‘_{i=0}^{n-1} a_i) * (âˆ‘_{j=0}^{n-1} b_j)
// ///
// /// Mathematical argument: The inductive step reduces to showing that
// /// cauchy_product(a,b,m) â‰¤ partial(a,m)*b(m) + a(m)*partial(b,m) + a(m)*b(m).
// /// The RHS expands to: a(0)*b(m) + ... + a(m-1)*b(m) + a(m)*b(0) + ... + a(m)*b(m).
// /// The Cauchy product includes: a(0)*b(m), a(1)*b(m-1), ..., a(m)*b(0).
// /// Each Cauchy term a(k)*b(m-k) is bounded by max(a(k)*b(m), a(m)*b(m-k)) which appears in RHS.
// theorem cauchy_partial_product_bound(a: Nat -> Real, b: Nat -> Real, n: Nat) {
//     is_lower_bound(a, Real.0) and is_lower_bound(b, Real.0)
//     implies
//     partial(cauchy_seq(a, b), n) <= partial(a, n) * partial(b, n)
// } by {
//     // Requires: Detailed term-by-term comparison or monotonicity lemmas
//     sorry
// }

// /// Mertens' Theorem: The Cauchy product of two absolutely convergent series converges absolutely.
// /// This is the key result needed to prove e^x * e^y = e^(x+y).
// ///
// /// TODO: This theorem requires cauchy_partial_product_bound to be completed.
// theorem cauchy_product_abs_converges(a: Nat -> Real, b: Nat -> Real) {
//     absolutely_converges(a) and absolutely_converges(b)
//     implies
//     absolutely_converges(cauchy_seq(a, b))
// } by {
//     from real.real_series import comparison_test, bounded_increasing_converges
//
//     if absolutely_converges(a) and absolutely_converges(b) {
//         // Strategy: Show that partial(cauchy_seq(abs_fn(a), abs_fn(b))) is bounded
//         // using cauchy_partial_product_bound, then apply comparison test
//         sorry
//     }
// }
