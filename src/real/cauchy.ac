from util import constant, compose
from nat import Nat
from rat import Rat
from list import partial, sum, map, List
from real.real_ring import Real, converges, converges_to, limit, lift_seq

numerals Real

// This file defines the Cauchy product of two series and proves theorems about it.

attributes Real {
    // Placeholder to let other modules import Real from here.
}

/// The Cauchy product of two sequences at index n.
/// This computes ∑_{k=0}^{n} a(k) * b(n-k).
define cauchy_product(a: Nat -> Real, b: Nat -> Real, n: Nat) -> Real {
    sum(map(n.suc.range, function(k: Nat) { a(k) * b(n - k) }))
}

/// The sequence of Cauchy products.
define cauchy_seq(a: Nat -> Real, b: Nat -> Real) -> (Nat -> Real) {
    function(n: Nat) { cauchy_product(a, b, n) }
}

theorem cauchy_product_zero(a: Nat -> Real, b: Nat -> Real) {
    cauchy_product(a, b, Nat.0) = a(Nat.0) * b(Nat.0)
} by {
    Nat.0.suc = Nat.1
    Nat.1.range = List.singleton(Nat.0)
    let mapped = map(Nat.1.range, function(k: Nat) { a(k) * b(Nat.0 - k) })
    Nat.0 - Nat.0 = Nat.0
    mapped = List.singleton(a(Nat.0) * b(Nat.0))
    sum(mapped) = a(Nat.0) * b(Nat.0)
}

// TODO: Prove commutativity of Cauchy product
// /// Cauchy product is symmetric.
// theorem cauchy_product_comm(a: Nat -> Real, b: Nat -> Real, n: Nat) {
//     cauchy_product(a, b, n) = cauchy_product(b, a, n)
// } by {
//     // The sum ∑_{k=0}^{n} a(k) * b(n-k) equals ∑_{k=0}^{n} b(k) * a(n-k)
//     // by substituting j = n - k
//     let left = sum(map(n.suc.range, function(k: Nat) { a(k) * b(n - k) }))
//     let right = sum(map(n.suc.range, function(k: Nat) { b(k) * a(n - k) }))
//     left = right
// }

// TODO: Prove zero theorems
// /// Cauchy product with a zero sequence on the left.
// theorem cauchy_product_zero_left(b: Nat -> Real, n: Nat) {
//     cauchy_product(constant[Nat, Real](Real.0), b, n) = Real.0
// } by {
//     forall(k: Nat) {
//         if k <= n {
//             constant[Nat, Real](Real.0)(k) = Real.0
//             Real.0 * b(n - k) = Real.0
//         }
//     }
// }

// /// Cauchy product with a zero sequence on the right.
// theorem cauchy_product_zero_right(a: Nat -> Real, n: Nat) {
//     cauchy_product(a, constant[Nat, Real](Real.0), n) = Real.0
// } by {
//     cauchy_product(constant[Nat, Real](Real.0), a, n) = Real.0
//     cauchy_product(a, constant[Nat, Real](Real.0), n) = cauchy_product(constant[Nat, Real](Real.0), a, n)
// }
