from nat import Nat
from int import Int
from int.lattice import abs
from rat.rat_base import Rat, reduce
from order import LinearOrder

// It will be convenient to have a particular function that
// approaches zero.
define iop(n: Nat) -> Rat {
    Rat.1 / (Rat.1 + Rat.from_nat(n))
}

theorem iop_pos(n: Nat) {
    iop(n).is_positive
} by {
    Rat.0 <= Rat.from_nat(n)
    Rat.1 + Rat.0 <= Rat.1 + Rat.from_nat(n)
    Rat.0 < Rat.1 + Rat.from_nat(n)
    (Rat.1 + Rat.from_nat(n)).is_positive
    Rat.1.is_positive
}

theorem pos_ne_zero(a: Rat) {
    a.is_positive implies a != Rat.0
}

theorem iop_ne_zero(n: Nat) {
    iop(n) != Rat.0
}

theorem iop_recip(n: Nat) {
    iop(n).reciprocal = Rat.1 + Rat.from_nat(n)
} by {
    Rat.1.is_positive
    Rat.from_nat(n) >= Rat.0
    Rat.0 <= Rat.from_nat(n)
    (Rat.1 + Rat.from_nat(n)).is_positive 
    (Rat.1 + Rat.from_nat(n)) != Rat.0
    (Rat.1 + Rat.from_nat(n)).reciprocal = iop(n)
}

theorem iop_mul_lt_one(n: Nat) {
    iop(n) * Rat.from_nat(n) < Rat.1
} by {
    iop(n) * iop(n).reciprocal = Rat.1
    iop(n) * (Rat.1 + Rat.from_nat(n)) = Rat.1
    iop(n) * Rat.1 + iop(n) * Rat.from_nat(n) = Rat.1
    iop(n) + iop(n) * Rat.from_nat(n) = Rat.1
    iop(n) * Rat.from_nat(n) < iop(n) * Rat.from_nat(n) + iop(n)
}

theorem pos_lte_num(a: Rat) {
    a.is_positive implies a <= Rat.from_int(a.num)
} by {
    a.num.is_positive
    a.num <= a.denom * a.num
    a.num <= a.num * a.denom
}

theorem lt_some_int(a: Rat) {
    exists(n: Int) {
        a < Rat.from_int(n)
    }
}

theorem lt_some_nat(a: Rat) {
    exists(n: Nat) {
        a < Rat.from_nat(n)
    }
} by {
    let i: Int satisfy {
        a < Rat.from_int(i)
    }
    let n = abs(i)
    i <= Int.from_nat(n)
    Rat.from_int(i) <= Rat.from_nat(n)
}

theorem iop_gets_lt(eps: Rat) {
    eps.is_positive implies exists(n: Nat) {
        forall(i: Nat) {
            n <= i implies iop(i) < eps
        }
    }
} by {
    eps.reciprocal.is_positive
    let n: Nat satisfy {
        eps.reciprocal < Rat.from_nat(n)
    }
    forall(i: Nat) {
        if n <= i {
            Rat.from_nat(n) <= Rat.from_nat(i)
            eps.reciprocal < Rat.from_nat(i)
            eps.reciprocal * eps < Rat.from_nat(i) * eps
            Rat.1 < Rat.from_nat(i) * eps
            Rat.from_nat(i) * iop(i) < Rat.1
            Rat.from_nat(i) * iop(i) < Rat.from_nat(i) * eps
            iop(i) < eps
        }
    }
}

theorem three_is_positive {
    Rat.3.is_positive
}

theorem times_three(x: Rat) {
    Rat.3 * x = x + x + x
} by {
    Int.3 = Int.2 + Int.1
    Rat.3 = Rat.2 + Rat.1
    Rat.3 * x = (Rat.2 + Rat.1) * x
    Rat.3 * x = Rat.2 * x + Rat.1 * x
}

theorem three_thirds(x: Rat) {
    (x / Rat.3) + (x / Rat.3) + (x / Rat.3) = x
} by {
    (x / Rat.3) + (x / Rat.3) + (x / Rat.3) = x / Rat.3 + x / Rat.3 + x / Rat.3
    (x / Rat.3) + (x / Rat.3) + (x / Rat.3) = (x + x + x) / Rat.3
    (x / Rat.3) + (x / Rat.3) + (x / Rat.3) = (Rat.3 * x) / Rat.3
    Rat.3 != Rat.0
    x * Rat.3 / Rat.3 = x
    (x / Rat.3) + (x / Rat.3) + (x / Rat.3) = x
}

theorem some_mul_lt(a: Rat, b: Rat) {
    Rat.0 <= a and b.is_positive implies
    exists(eps: Rat) {
        eps.is_positive and a * eps < b
    }
} by {
    if a = Rat.0 {
        let eps = b
        eps.is_positive
        a * eps = Rat.0
        a * eps < b
        eps.is_positive and a * eps < b
    } else {
        a.is_positive
        let c: Rat satisfy {
            c.is_positive and c < b
        }
        let eps = c / a
        eps.is_positive
        a * eps = c
        a * eps < b
        eps.is_positive and a * eps < b
    }
}

theorem close_mul_pos(a: Rat, b: Rat, eps: Rat, r: Rat) {
    r.is_positive and a.is_close(b, eps)
    implies
    (a * r).is_close(b * r, eps * r)
} by {
    a < b + eps
    a * r < (b * r) + (eps * r)
    b < a + eps
    b * r < a * r + (eps * r)
    b - eps < a
    r * (b - eps) < a * r
}

theorem close_neg(a: Rat, b: Rat, eps: Rat) {
    a.is_close(b, eps) implies (-a).is_close(-b, eps)
} by {
    (a - b).abs < eps
    (-a - -b).abs = (b - a).abs
    (-a - -b).abs < eps
}

theorem lte_mul_nonneg(a: Rat, b: Rat, c: Rat) {
    a <= b and Rat.0 <= c implies a * c <= b * c
} by {
    if c = Rat.0 {
        a * c = Rat.0
        b * c = Rat.0
        a * c <= b * c
    } else {
        c.is_positive
        a * c <= b * c
    }
}

theorem bounding_both(a: Rat, b: Rat) {
    exists(c: Rat) {
        a < c and b < c
    }
} by {
    if not exists(k0: Rat) { a < k0 and b < k0 } {
        not b < a
        not a <= b
        b != a
        not a < b
        false
    }
}

theorem finite_seq_abs_bounded(a: Nat -> Rat, n: Nat) {
    exists(bound: Rat) {
        forall(i: Nat) {
            i <= n implies a(i).abs < bound
        }
    }
} by {
    let f = finite_seq_abs_bounded(a)
    let zero_bound: Rat satisfy {
        a(Nat.0).abs < zero_bound
    }
    forall(i: Nat) {
        i <= Nat.0 implies a(i).abs < zero_bound
    }
    finite_seq_abs_bounded(a, Nat.0)
    f(Nat.0)
    forall(k: Nat) {
        if f(k) {
            let base_bound: Rat satisfy {
                forall(i: Nat) {
                    i <= k implies a(i).abs < base_bound
                }
            }
            let extra_bound: Rat satisfy {
                a(k.suc).abs < extra_bound
            }
            let bound: Rat satisfy {
                base_bound < bound and extra_bound < bound
            }
            forall(i: Nat) {
                if i <= k.suc {
                    if i <= k {
                        a(i).abs < bound
                    } else {
                        i = k.suc
                        a(i).abs < extra_bound
                        a(i).abs < bound
                    }
                }
            }
            finite_seq_abs_bounded(a, k.suc)
            f(k.suc)
        }
    }
}

theorem abs_reduce_left(a: Int, b: Int) {
    reduce(a.abs, b).abs = reduce(a, b).abs
} by {
    if a.is_negative {
        a.abs = -a
        reduce(a.abs, b).abs = reduce(a, b).abs
    } else {
        a.abs = a
        reduce(a.abs, b).abs = reduce(a, b).abs
    }
}

theorem reduce_neg_num(a: Int, b: Int) {
    reduce(-a, b) = -reduce(a, b)
}

theorem reduce_neg_denom(a: Int, b: Int) {
    reduce(a, -b) = -reduce(a, b)
} by {
    reduce(a, -b) = reduce(-Int.1 * a, -Int.1 * -b)
    -Int.1 * -b = b
}

theorem abs_reduce_right(a: Int, b: Int) {
    reduce(a, b.abs).abs = reduce(a, b).abs
} by {
    if b.is_negative {
        b.abs = -b
        reduce(a, b.abs).abs = reduce(a, b).abs
    } else {
        b.abs = b
        reduce(a, b.abs).abs = reduce(a, b).abs
    }
}

theorem reduce_nonneg(a: Int, b: Int) {
    not a.is_negative and not b.is_negative
    implies
    not reduce(a, b).is_negative
} by {
    if a = Int.0 {
        not reduce(a, b).is_negative
    } else {
        if b = Int.0 {
            not reduce(a, b).is_negative
        } else {
            a.is_positive
            b.is_positive
            reduce(a, b).is_positive
            not reduce(a, b).is_negative
        }
    }
}

theorem reduce_abs(a: Int, b: Int) {
    reduce(a.abs, b.abs) = reduce(a, b).abs
} by {
    not a.abs.is_negative
    not b.abs.is_negative
    not reduce(a.abs, b.abs).is_negative
}

theorem lte_cancel_mul_pos(p: Rat, q: Rat, r: Rat) {
    r.is_positive and p * r <= q * r
    implies
    p <= q
} by {
    if p * r = q * r {
        p = q
        p <= q
    } else {
        p * r < q * r
        p < q
        p <= q
    }
}

theorem reduce_lte(a: Int, b: Int, c: Int) {
    not c.is_negative and a <= b implies
    reduce(a, c) <= reduce(b, c)
} by {
    if c = Int.0 {
        reduce(a, c) = reduce(b, c)
        reduce(a, c) <= reduce(b, c)
    } else {
        c.is_positive
        reduce(a, c) * Rat.from_int(c) = Rat.from_int(a)
        reduce(b, c) * Rat.from_int(c) = Rat.from_int(b)
        Rat.from_int(a) <= Rat.from_int(b)
        reduce(a, c) * Rat.from_int(c) <= reduce(b, c) * Rat.from_int(c)
        Rat.from_int(c).is_positive
        reduce(a, c) <= reduce(b, c)
    }
}

theorem triangle_ineq(a: Rat, b: Rat) {
    (a + b).abs <= a.abs + b.abs
} by {
    let (an: Int, bn: Int, c: Int) satisfy {
        a = reduce(an, c) and b = reduce(bn, c)
    }
    a + b = reduce(an + bn, c)
    (a + b).abs = reduce((an + bn).abs, c.abs)
    (an + bn).abs <= an.abs + bn.abs
    Int.from_nat(abs(c.abs)) = c.abs
    not c.abs.is_negative
    reduce((an + bn).abs, c.abs) <= reduce(an.abs + bn.abs, c.abs)
    (a + b).abs <= reduce(an.abs + bn.abs, c.abs)
    reduce(an.abs + bn.abs, c.abs) = reduce(an, c).abs + reduce(bn, c).abs
    reduce(an.abs + bn.abs, c.abs) = a.abs + b.abs
}

// Not all that generally useful.
theorem diff_mul_bound(a0: Rat, b0: Rat, a1: Rat, b1: Rat) {
    (a0 * b0 - a1 * b1).abs <= a0.abs * (b0 - b1).abs + b1.abs * (a0 - a1).abs
} by {
    a0 * (b0 - b1) + b1 * (a0 - a1) = a0 * b0 - a0 * b1 + b1 * a0 - b1 * a1
    a0 * (b0 - b1) + b1 * (a0 - a1) = a0 * b0 - a1 * b1
    (a0 * b0 - a1 * b1).abs = (a0 * (b0 - b1) + b1 * (a0 - a1)).abs
    (a0 * (b0 - b1) + b1 * (a0 - a1)).abs <= (a0 * (b0 - b1)).abs + (b1 * (a0 - a1)).abs
}

theorem nonneg_lt_imp_pos(a: Rat, b: Rat) {
    not a.is_negative and a < b implies
    b.is_positive
}

theorem lt_pos_mul_lt_pos(a: Rat, b: Rat, c: Rat, d: Rat) {
    not a.is_negative and not c.is_negative and a < b and c < d
    implies
    a * c < b * d
} by {
    a * c <= b * c
    b.is_positive
    b * c < b * d
}

theorem abs_nonneg(a: Rat) {
    not a.abs.is_negative
}

theorem lte_mul_lte(a: Rat, b: Rat, c: Rat, d: Rat) {
    not a.is_negative and not c.is_negative and a <= b and c <= d
    implies
    a * c <= b * d
} by {
    not b.is_negative
    not d.is_negative
    if a = b {
        c * b <= d * b
        a * c <= b * d
    } else {
        a < b
        if c = d {
            a * c <= b * d
        } else {
            c < d
            a * c < b * d
            a * c <= b * d
        }
    }
}

theorem add_div_distrib(a: Rat, b: Rat, c: Rat) {
    (a + b) / c = a / c + b / c
}

theorem sub_div_distrib(a: Rat, b: Rat, c: Rat) {
    (a - b) / c = a / c - b / c
}

theorem recip_mul(a: Rat, b: Rat) {
    (a * b).reciprocal = a.reciprocal * b.reciprocal
} by {
    if a = Rat.0 {
        // Degenerate but it works
        a * b = Rat.0
        (a * b).reciprocal = Rat.0
        (a * b).reciprocal = a.reciprocal * b.reciprocal
    } else {
        if b = Rat.0 {
            (a * b).reciprocal = a.reciprocal * b.reciprocal
        } else {
            (a * b).reciprocal * (a * b) = Rat.1
            (a * b).reciprocal = a.reciprocal * b.reciprocal
        }
    }
}

theorem mul_fractions(a: Rat, b: Rat, c: Rat, d: Rat) {
    (a / b) * (c / d) = (a * c) / (b * d)
} by {
    (a / b) * (c / d) = (a * b.reciprocal) * (c * d.reciprocal)
    (a / b) * (c / d) = (a * c) * (b.reciprocal * d.reciprocal)
    (b.reciprocal * d.reciprocal) = (b * d).reciprocal
    (a / b) * (c / d) = (a * c) * (b * d).reciprocal
}

theorem cancel_left_num_denom(a: Rat, b: Rat, c: Rat) {
    a != Rat.0 implies
    (a * b) / (a * c) = b / c
} by {
    (a / a) * (b / c) = (a * b) / (a * c)
}

theorem cancel_to_reciprocal(a: Rat, b: Rat) {
    a != Rat.0 and b != Rat.0 implies
    a / (a * b) = b.reciprocal
}

theorem recip_diff(a: Rat, b: Rat) {
    a != Rat.0 and b != Rat.0 implies
    a.reciprocal - b.reciprocal = (b - a) / (a * b)
} by {
    (b - a) / (a * b) = (b / (a * b)) - (a / (a * b))
    b / (a * b) = a.reciprocal
    a / (a * b) = b.reciprocal
}
theorem lt_mul_lte(a: Rat, b: Rat, c: Rat, d: Rat) {
    not a.is_negative and c.is_positive and a < b and c <= d
    implies
    a * c < b * d
}

// This isn't ideal but this is how we have defined division.
theorem div_zero(a: Rat) {
    a / Rat.0 = Rat.0
} by {
    a * reduce(Rat.0.denom, Int.0) = Rat.0
    a * Rat.0.reciprocal = Rat.0
}

theorem pos_recip(a: Rat) {
    a.is_positive implies a.reciprocal.is_positive
}

theorem recip_recip(a: Rat) {
    a.reciprocal.reciprocal = a
}

theorem neg_recip(a: Rat) {
    a.is_negative implies a.reciprocal.is_negative
} by {
    if a.reciprocal.is_positive {
        a.reciprocal.reciprocal.is_positive
        a.is_positive
        false
    }
    if a.reciprocal = Rat.0 {
        false
    }
}

theorem div_neg_neg(a: Rat, b: Rat) {
    a.is_negative and b.is_negative
    implies
    (a / b).is_positive
} by {
    a < Rat.0
    b.reciprocal.is_negative
}

theorem div_negs_cancel(a: Rat, b: Rat) {
    a / b = (-a) / (-b)
} by {
    -Rat.1 != Rat.0
    -Rat.1 * a / (-Rat.1 * b) = a / b
    -Rat.1 * a / -b = a / b
}

theorem abs_div(a: Rat, b: Rat) {
    b != Rat.0 implies
    (a / b).abs = a.abs / b.abs
} by {
    if a.is_negative {
        a.abs = -a
        if b.is_negative {
            (a / b).is_positive
            (a / b).abs = a / b
            b.abs = -b
            a.abs / b.abs = (-a) / (-b)
            (-a) / (-b) = a / b
            (a / b).abs = a.abs / b.abs
        } else {
            b.abs = b
            not (a / b).is_positive
            (a / b).abs = -(a / b)
            (a / b).abs = a.abs / b.abs
        }
    } else {
        a.abs = a
        if b.is_negative {
            b.abs = -b
            not (a / b).is_positive
            (a / b).abs = -(a / b)
            (a / b).abs = a.abs / b.abs
        } else {
            b.abs = b
            not (a / b).is_negative
            (a / b).abs = (a / b)
            (a / b).abs = a.abs / b.abs
        }
    }
}

theorem lt_make_left_denom(a: Rat, b: Rat, c: Rat) {
    c.is_positive and a < b * c implies a / c < b
}

theorem lt_make_right_denom(a: Rat, b: Rat, c: Rat) {
    b.is_positive and a * b < c implies a < c / b
} by {
    b.reciprocal.is_positive
    a * b * b.reciprocal < c * b.reciprocal
    a * b * b.reciprocal = a
    a < c * b.reciprocal
}

theorem lt_elim_left_denom(a: Rat, b: Rat, c: Rat) {
    b.is_positive and a / b < c implies a < c * b
}

theorem abs_of_div(a: Rat, b: Rat) {
    (a / b).abs = a.abs / b.abs
} by {
    if (a / b).abs != a.abs / b.abs {
        not b.is_positive
        b.abs = -b
        false
    }
}

theorem mul_div_swap(a: Rat, b: Rat, c: Rat) {
    a * b / c = (a / c) * b
}

theorem zero_recip(a: Rat) {
    Rat.0.reciprocal = Rat.0
}

// The multiplicative algebraic structure.

from semigroup import Semigroup

instance Rat: Semigroup {
    let mul = Rat.mul
}

from monoid import Monoid

instance Rat: Monoid {
    let 1 = Rat.1
}

from semiring import Semiring

instance Rat: Semiring

from ring import Ring

instance Rat: Ring

from comm_ring import CommRing

instance Rat: CommRing

from field import Field

instance Rat: Field {
    let inverse = Rat.reciprocal
}

theorem rat_total(a: Rat, b: Rat) { a <= b or b <= a } by {
    if a < b {
        a <= b
    } else {
        if a = b {
            a <= b
        } else {
            b < a
            b <= a
        }
    }
}

instance Rat: LinearOrder
