from nat.lattice import Nat
from list.list_sum import List, map, partial, sum
from option import Option

numerals Nat

// This file contains functional-programming-style things for lists.

define fold_left[T, U](list: List[T], f: (U, T) -> U, init: U) -> U {
    match list {
        List.nil {
            init
        }
        List.cons(head, tail) {
            fold_left(tail, f, f(init, head))
        }
    }
}

define fold_right[T, U](list: List[T], f: (T, U) -> U, init: U) -> U {
    match list {
        List.nil {
            init
        }
        List.cons(head, tail) {
            f(head, fold_right(tail, f, init))
        }
    }
}

/// Reverses a list.
define reverse[T](list: List[T]) -> List[T] {
    match list {
        List.nil {
            List.nil[T]
        }
        List.cons(head, tail) {
            reverse(tail).append(head)
        }
    }
}

theorem reverse_length[T](list: List[T]) {
    reverse(list).length = list.length
} by {
    define p(l: List[T]) -> Bool {
        reverse(l).length = l.length
    }

    // Base case: empty list
    p(List.nil[T])

    // Induction
    forall(head: T, tail: List[T]) {
        if p(tail) {
            // Induction hypothesis: reverse(tail).length = tail.length
            reverse(List.cons(head, tail)).length = (reverse(tail) + List.singleton(head)).length
            // Use add_length theorem
            (reverse(tail) + List.singleton(head)).length = reverse(tail).length + List.singleton(head).length
            reverse(tail).length = tail.length
            List.cons(head, tail).length = tail.length.suc
            p(List.cons(head, tail))
        }
    }

    List.induction(function (l: List[T]) {
        p(l)
    })
}

theorem reverse_add[T](list1: List[T], list2: List[T]) {
    reverse(list1 + list2) = reverse(list2) + reverse(list1)
} by {
    define p(l1: List[T]) -> Bool {
        reverse(l1 + list2) = reverse(list2) + reverse(l1)
    }

    // Base case: empty list
    reverse(List.nil[T] + list2) = reverse(list2)
    reverse(list2) + reverse(List.nil[T]) = reverse(list2) + List.nil[T]
    reverse(list2) + List.nil[T] = reverse(list2)
    p(List.nil[T])

    // Induction
    forall(head: T, tail: List[T]) {
        if p(tail) {
            // Induction hypothesis: reverse(tail + list2) = reverse(list2) + reverse(tail)
            reverse(List.cons(head, tail) + list2) = reverse(List.cons(head, tail + list2))
            reverse(List.cons(head, tail + list2)) = reverse(tail + list2).append(head)
            reverse(tail + list2).append(head) = (reverse(tail + list2) + List.singleton(head))
            (reverse(tail + list2) + List.singleton(head)) = ((reverse(list2) + reverse(tail)) + List.singleton(head))
            ((reverse(list2) + reverse(tail)) + List.singleton(head)) = (reverse(list2) + (reverse(tail) + List.singleton(head)))
            (reverse(list2) + (reverse(tail) + List.singleton(head))) = (reverse(list2) + reverse(tail).append(head))
            (reverse(list2) + reverse(tail).append(head)) = (reverse(list2) + reverse(List.cons(head, tail)))
            reverse(List.cons(head, tail) + list2) = reverse(list2) + reverse(List.cons(head, tail))
            p(List.cons(head, tail))
        }
    }

    List.induction(function (l: List[T]) {
        p(l)
    })
}

theorem reverse_involution[T](list: List[T]) {
    reverse(reverse(list)) = list
} by {
    define p(l: List[T]) -> Bool {
        reverse(reverse(l)) = l
    }

    // Base case: empty list
    p(List.nil[T])

    // Induction
    forall(head: T, tail: List[T]) {
        if p(tail) {
            // Induction hypothesis: reverse(reverse(tail)) = tail
            reverse(reverse(List.cons(head, tail))) = reverse(reverse(tail).append(head))
            reverse(reverse(tail).append(head)) = reverse(reverse(tail) + List.singleton(head))
            reverse(reverse(tail) + List.singleton(head)) = reverse(List.singleton(head)) + reverse(reverse(tail))
            reverse(List.singleton(head)) = List.singleton(head)
            reverse(List.singleton(head)) + reverse(reverse(tail)) = List.singleton(head) + tail
            List.singleton(head) + tail = List.cons(head, tail)
            reverse(reverse(List.cons(head, tail))) = List.cons(head, tail)
            p(List.cons(head, tail))
        }
    }

    List.induction(function (l: List[T]) {
        p(l)
    })
}

theorem reverse_contains[T](list: List[T], item: T) {
    reverse(list).contains(item) = list.contains(item)
} by {
    define p(l: List[T]) -> Bool {
        reverse(l).contains(item) = l.contains(item)
    }

    // Base case: empty list
    p(List.nil[T])

    // Induction
    forall(head: T, tail: List[T]) {
        if p(tail) {
            // Induction hypothesis: reverse(tail).contains(item) = tail.contains(item)
            reverse(List.cons(head, tail)).contains(item) = (reverse(tail) + List.singleton(head)).contains(item)

            // Show both directions of the equivalence
            if (reverse(tail) + List.singleton(head)).contains(item) {
                if reverse(tail).contains(item) {
                    tail.contains(item)
                    List.cons(head, tail).contains(item)
                } else {
                    List.singleton(head).contains(item)
                    head = item
                    List.cons(head, tail).contains(item)
                }
                List.cons(head, tail).contains(item)
            }

            if List.cons(head, tail).contains(item) {
                if head = item {
                    List.singleton(head).contains(item)
                    (reverse(tail) + List.singleton(head)).contains(item)
                } else {
                    tail.contains(item)
                    reverse(tail).contains(item)
                    (reverse(tail) + List.singleton(head)).contains(item)
                }
                (reverse(tail) + List.singleton(head)).contains(item)
            }

            p(List.cons(head, tail))
        }
    }

    List.induction(function (l: List[T]) {
        p(l)
    })
}

/// The element at index idx in a reversed list is the element at index (length - 1 - idx) in the original list.
theorem reverse_get_idx[T](list: List[T], idx: Nat) {
    idx < list.length implies reverse(list).get_idx(idx) = list.get_idx(list.length - 1 - idx)
} by {
    define p(l: List[T]) -> Bool {
        idx < l.length implies reverse(l).get_idx(idx) = l.get_idx(l.length - 1 - idx)
    }

    // Base case: empty list has length 0, so idx < 0 is false
    p(List.nil[T])

    // Induction
    forall(head: T, tail: List[T]) {
        if p(tail) {
            if idx < List.cons(head, tail).length {
                reverse(List.cons(head, tail)) = reverse(tail) + List.singleton(head)
                List.cons(head, tail).length = tail.length.suc

                if idx < tail.length {
                    // Case 1: idx is in the reversed tail part
                    idx < reverse(tail).length
                    reverse(List.cons(head, tail)).get_idx(idx) = reverse(tail).get_idx(idx)
                    reverse(tail).get_idx(idx) = tail.get_idx(tail.length - 1 - idx)

                    // Show tail.get_idx(tail.length - 1 - idx) = List.cons(head, tail).get_idx(tail.length.suc - 1 - idx)
                    // We have tail.length.suc - 1 - idx = (tail.length + 1) - 1 - idx = tail.length - idx
                    // And tail.length - idx > 0 (since idx < tail.length)
                    // So List.cons(head, tail).get_idx(tail.length - idx) = tail.get_idx(tail.length - idx - 1)
                    // And we need to show tail.length - idx - 1 = tail.length - 1 - idx

                    tail.length.suc - 1 = tail.length
                    tail.length.suc - 1 - idx = tail.length - idx

                    idx < tail.length
                    idx + 1 <= tail.length
                    idx + 1 + (tail.length - idx) = tail.length + 1
                    1 + (tail.length - idx) = tail.length - idx + 1
                    tail.length - idx > 0

                    List.cons(head, tail).get_idx(tail.length - idx) = tail.get_idx(tail.length - idx - 1)

                    // Use sub_comm: (tail.length - idx) - 1 = (tail.length - 1) - idx
                    1 + idx <= tail.length
                    tail.length - idx - 1 = tail.length - 1 - idx

                    tail.get_idx(tail.length - idx - 1) = tail.get_idx(tail.length - 1 - idx)
                    List.cons(head, tail).get_idx(tail.length - idx) = tail.get_idx(tail.length - 1 - idx)
                    List.cons(head, tail).get_idx(tail.length.suc - 1 - idx) = tail.get_idx(tail.length - 1 - idx)

                    reverse(List.cons(head, tail)).get_idx(idx) = List.cons(head, tail).get_idx(List.cons(head, tail).length - 1 - idx)
                } else {
                    // Case 2: idx = tail.length
                    idx = tail.length
                    reverse(tail).length = tail.length
                    (reverse(tail) + List.singleton(head)).get_idx(tail.length) = Option.some(head)
                    List.cons(head, tail).get_idx(0) = Option.some(head)

                    // Show tail.length.suc - 1 - tail.length = 0
                    tail.length.suc - 1 = tail.length
                    tail.length - tail.length = 0

                    reverse(List.cons(head, tail)).get_idx(idx) = List.cons(head, tail).get_idx(List.cons(head, tail).length - 1 - idx)
                }

                p(List.cons(head, tail))
            }
        }
    }

    List.induction(function (l: List[T]) {
        p(l)
    })
}

/// TODO: This arithmetic lemma is needed but the prover times out.
/// When idx < n, the value n - 1 - idx is also less than n.
/// This should follow from: when idx < n, we have idx + 1 <= n,
/// so n - idx >= 1, thus n - 1 - idx <= n - 1 < n.
// theorem sub_double_lt(n: Nat, idx: Nat) {
//     idx < n implies n - 1 - idx < n
// }

/// TODO: Helper lemma - reverse(n.range) and map(n.range, {n-1-i}) agree at every index.
/// This should follow from combining three existing theorems:
///   1. reverse_get_idx: reverse(list).get_idx(idx) = list.get_idx(length - 1 - idx)
///   2. range_idx_eq_idx: n.range.get_idx(i) = Option.some(i) when i < n
///   3. map_range: map(n.range, f).get_idx(idx) = Option.some(f(idx)) when idx < n
/// The blocker is proving that n - 1 - idx < n when idx < n (see sub_double_lt above).
// theorem range_reverse_map_get_idx(n: Nat, idx: Nat) {
//     idx < n implies reverse(n.range).get_idx(idx) = map(n.range, function(i: Nat) { n - 1 - i }).get_idx(idx)
// }

/// TODO: The reverse of n.range equals mapping the subtraction function over n.range.
/// In other words, [0, 1, 2, ..., n-1] reversed equals [n-1, n-2, ..., 1, 0],
/// which is the same as mapping i to (n-1-i) over the original range.
///
/// This follows from range_reverse_map_get_idx: if two lists have the same length
/// and agree at all indices, they are equal. The prover should be able to deduce this,
/// but currently cannot verify the helper lemma.
// theorem range_reverse_map(n: Nat) {
//     reverse(n.range) = map(n.range, function(i: Nat) { n - 1 - i })
// }