{"goal":"a.inverse * a * a.inverse = a.inverse","proof":["a.inverse * (a * a.inverse) = a.inverse * a * a.inverse","a * a.inverse = G.1","a.inverse * G.1 = a.inverse","a.inverse * (a * a.inverse) != a.inverse"]}
{"goal":"a.inverse * a * a.inverse * a.inverse.inverse = a.inverse * a.inverse.inverse","proof":["a.inverse * a * a.inverse != a.inverse"]}
{"goal":"a.inverse * a * (a.inverse * a.inverse.inverse) = a.inverse * a.inverse.inverse","proof":["a.inverse * a * (a.inverse * a.inverse.inverse) = a.inverse * a * a.inverse * a.inverse.inverse"]}
{"goal":"a.inverse * a * G.1 = G.1","proof":["a.inverse * (a * (a.inverse * a.inverse.inverse)) = a.inverse * a * (a.inverse * a.inverse.inverse)","a.inverse * (a * G.1) = a.inverse * a * G.1","a.inverse * a.inverse.inverse = G.1"]}
{"goal":"inverse_left","proof":["a.inverse * a * G.1 = a.inverse * a"]}
{"goal":"a * a.inverse = G.1","proof":["a * a.inverse = G.1"]}
{"goal":"a * a.inverse * a.inverse.inverse = a.inverse.inverse","proof":["G.1 * a.inverse.inverse != a.inverse.inverse","G.1 * a.inverse.inverse = a.inverse.inverse"]}
{"goal":"inverse_inverse","proof":["a * a.inverse * a.inverse.inverse = a * (a.inverse * a.inverse.inverse)","a.inverse * a.inverse.inverse = G.1","a * G.1 = a","a.inverse.inverse != a * G.1","a * (a.inverse * a.inverse.inverse) = a.inverse.inverse"]}
{"goal":"a.inverse * (a * b) = a.inverse * (a * c)","proof":["a * c != a * b"]}
{"goal":"left_cancel","proof":["a.inverse * (a * b) = a.inverse * a * b","a.inverse * (a * c) = a.inverse * a * c","a.inverse * a = G.1","G.1 * b = b","G.1 * c = c"]}
{"goal":"b * a * a.inverse = c * a * a.inverse","proof":["c * a != b * a"]}
{"goal":"right_cancel","proof":["b * a * a.inverse = b * (a * a.inverse)","c * a * a.inverse = c * (a * a.inverse)","a * a.inverse = G.1","b * G.1 = b","c * G.1 = c"]}
{"goal":"(a * b).inverse * (a * b) = G.1","proof":["(a * b).inverse * (a * b) = G.1"]}
{"goal":"(a * b).inverse * a = b.inverse","proof":["(a * b).inverse * (a * b) = (a * b).inverse * a * b","(a * b).inverse * a * b != b.inverse * b or (a * b).inverse * a = b.inverse","b.inverse * b = G.1","(a * b).inverse * a * b = G.1","(a * b).inverse * a * b != b.inverse * b","(a * b).inverse * a * b = b.inverse * b"]}
{"goal":"inverse_mul","proof":["(a * b).inverse * (a * a.inverse) = (a * b).inverse * a * a.inverse","a * a.inverse = G.1","(a * b).inverse * G.1 = (a * b).inverse","(a * b).inverse * a * a.inverse != (a * b).inverse","(a * b).inverse * (a * a.inverse) != (a * b).inverse"]}
{"goal":"p(Nat.0)","proof":["a.pow(Nat.0).inverse != a.inverse.pow(Nat.0) or p(Nat.0)","Nat.0 != Nat.0 or a.inverse.pow(Nat.0) = G.1","Nat.0 != Nat.0 or a.pow(Nat.0) = G.1","G.1.inverse * G.1 = G.1","G.1.inverse * G.1 = G.1.inverse","a.pow(Nat.0).inverse != a.inverse.pow(Nat.0)","a.inverse.pow(Nat.0) = G.1","a.pow(Nat.0) = G.1","a.inverse.pow(Nat.0) != G.1.inverse","G.1.inverse != G.1"]}
{"goal":"a.pow(k) * a.inverse.pow(k) = G.1","proof":["not p(k) or a.pow(k).inverse = a.inverse.pow(k)","a.inverse.pow(k).inverse * a.inverse.pow(k) = G.1","a.pow(k).inverse.inverse = a.pow(k)","a.pow(k).inverse.inverse * a.inverse.pow(k) != G.1","a.pow(k).inverse = a.inverse.pow(k)"]}
{"goal":"a.pow(k.suc) = a.pow(k) * a","proof":["a.pow(k) * a.pow(Nat.1) = a.pow(k + Nat.1)","k + Nat.1 = k.suc","a.pow(Nat.1) = a","a.pow(k + Nat.1) != a.pow(k) * a"]}
{"goal":"a.inverse.pow(k.suc) = a.inverse * a.inverse.pow(k)","proof":["k.suc != k.suc or a.inverse * a.inverse.pow(k) = a.inverse.pow(k.suc)"]}
{"goal":"a.pow(k.suc) * a.inverse.pow(k.suc) = a.pow(k) * a * (a.inverse * a.inverse.pow(k))","proof":[]}
{"goal":"a.pow(k.suc) * a.inverse.pow(k.suc) = G.1","proof":["a * a.inverse * a.inverse.pow(k) = a * (a.inverse * a.inverse.pow(k))","a.pow(k) * (a * (a.inverse * a.inverse.pow(k))) = a.pow(k) * a * (a.inverse * a.inverse.pow(k))","a * a.inverse = G.1","G.1 * a.inverse.pow(k) = a.inverse.pow(k)"]}
{"goal":"a.pow(k.suc).inverse = a.inverse.pow(k.suc)","proof":["not p(k) or a.pow(k).inverse = a.inverse.pow(k)","a.inverse * a.pow(k).inverse = (a.pow(k) * a).inverse","a.pow(k).inverse = a.inverse.pow(k)"]}
{"goal":"pow_inverse","proof":["let s0: (Nat -> Bool) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","a.pow(s0(p).suc).inverse != a.inverse.pow(s0(p).suc) or p(s0(p).suc)","not p(n) or a.pow(n).inverse = a.inverse.pow(n)","not p(s0(p)) or a.pow(s0(p).suc).inverse = a.inverse.pow(s0(p).suc)","not p(n)","not p(s0(p).suc) or not p(Nat.0) or p(n)","not p(Nat.0) or p(s0(p)) or p(n)","p(s0(p)) or p(n)","p(s0(p))","not p(s0(p).suc) or p(n)","not p(s0(p).suc)","a.pow(s0(p).suc).inverse = a.inverse.pow(s0(p).suc)","a.pow(s0(p).suc).inverse != a.inverse.pow(s0(p).suc)"]}
{"goal":"a.pow(n) = a.pow(n - m) * a.pow(m)","proof":["a.pow(n - m) * a.pow(m) = a.pow(n - m + m)","a.pow(n - m + m) != a.pow(n)","n - m + m != n","lib(nat.nat_base).bounded_sub(n, m) + m = n or n < m","n - m = lib(nat.nat_base).bounded_sub(n, m)","lib(nat.nat_base).bounded_sub(n, m) + m != n","not n < m or not m < n","m < n = n > m","m < n","n < m","not n < m"]}
{"goal":"pow_cancel","proof":["a.pow(n - m) * a.pow(n) != G.1 * a.pow(n) or a.pow(n - m) = G.1","G.1 * a.pow(n) = a.pow(n)","a.pow(n - m) * a.pow(n) = a.pow(n)","a.pow(n - m) * a.pow(n) != G.1 * a.pow(n)"]}
{"goal":"trivial_hom_is_hom","proof":["let (s0: (G -> H) -> G, s1: (G -> H) -> G) satisfy { forall(x0: G -> H, x1: G, x2: G) { not is_hom[G, H](x0) or x0(x1) * x0(x2) = x0(x1 * x2) } and forall(x3: G -> H) { x3(s0(x3)) * x3(s1(x3)) != x3(s0(x3) * s1(x3)) or is_hom[G, H](x3) } }","trivial_hom[G, H](s0(trivial_hom[G, H])) * trivial_hom[G, H](s1(trivial_hom[G, H])) != trivial_hom[G, H](s0(trivial_hom[G, H]) * s1(trivial_hom[G, H])) or is_hom[G, H](trivial_hom[G, H])","H.1 * trivial_hom[G, H](s1(trivial_hom[G, H])) = trivial_hom[G, H](s1(trivial_hom[G, H]))","trivial_hom[G, H](s0(trivial_hom[G, H]) * s1(trivial_hom[G, H])) = H.1","trivial_hom[G, H](s0(trivial_hom[G, H])) = H.1","trivial_hom[G, H](s1(trivial_hom[G, H])) = H.1","trivial_hom[G, H](s0(trivial_hom[G, H])) * trivial_hom[G, H](s1(trivial_hom[G, H])) != trivial_hom[G, H](s0(trivial_hom[G, H]) * s1(trivial_hom[G, H]))"]}
{"goal":"exists(k0: G -> H) { is_hom[G, H](k0) }","proof":["not is_hom[G, H](trivial_hom[G, H])"]}
