{"goal":"a <= b and a != b","proof":["not lt(a, b) or a <= b","not lt(a, b) or b != a","b != a","a <= b","not a <= b"]}
{"goal":"b <= c and b != c","proof":["not lt(b, c) or b <= c","not lt(b, c) or c != b","c != b","b <= c","not b <= c"]}
{"goal":"a <= c and a != c","proof":["not lib(util).is_transitive<G>(G.lte) or not a <= b or not b <= c or a <= c","not lib(util).is_antisymmetric<G>(G.lte) or not b <= a or not a <= b or b = a","not b <= a","not a <= b or a <= c","a <= c","c = a"]}
{"goal":"lt_trans","proof":["not a <= c or lt(a, c) or c = a"]}
{"goal":"f(Nat.0)","proof":["lt(G.1, a.pow(Nat.0.suc)) = f(Nat.0)","Nat.0 + Nat.1 = Nat.0.suc","a.pow(Nat.1) = a","Nat.0 + Nat.1 = Nat.1"]}
{"goal":"lt(G.1, a.pow(x.suc))","proof":["lt(G.1, a.pow(x.suc)) = f(x)"]}
{"goal":"a * G.1 <= a * a.pow(x.suc)","proof":["not G.1 <= a.pow(x.suc) or a * G.1 <= a * a.pow(x.suc)","not lt(G.1, a.pow(x.suc)) or G.1 <= a.pow(x.suc)","not G.1 <= a.pow(x.suc)","G.1 <= a.pow(x.suc)"]}
{"goal":"lt(a * G.1, a * a.pow(x.suc))","proof":["not a * G.1 <= a * a.pow(x.suc) or lt(a * G.1, a * a.pow(x.suc)) or a * a.pow(x.suc) = a * G.1","a * a.pow(x.suc) != a * G.1 or a.pow(x.suc) = G.1","not lt(G.1, a.pow(x.suc)) or a.pow(x.suc) != G.1","a * a.pow(x.suc) = a * G.1","a.pow(x.suc) != G.1","a.pow(x.suc) = G.1"]}
{"goal":"lt(a, a * a.pow(x.suc))","proof":["a * G.1 = a"]}
{"goal":"lt(G.1, a.pow(x.suc.suc))","proof":["a.pow(Nat.1) * a.pow(x.suc) = a.pow(Nat.1 + x.suc)","not lt(G.1, a) or not lt(a, a.pow(x.suc.suc)) or lt(G.1, a.pow(x.suc.suc))","Nat.1 + x.suc = x.suc.suc","a.pow(Nat.1) = a","not lt(a, a.pow(x.suc.suc)) or not lt(G.1, a)","not lt(a, a.pow(x.suc.suc))"]}
{"goal":"f(x.suc)","proof":["lt(G.1, a.pow(x.suc.suc)) = f(x.suc)"]}
{"goal":"exists(k0: Nat) { k0.suc = n }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0).suc = x0 or Nat.0 = x0 } }","s0(n).suc != n","s0(n).suc = n or n = Nat.0"]}
{"goal":"f(n_pred)","proof":["let s0: (Nat -> Bool) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(s0(f).suc) or not f(Nat.0) or f(n_pred)","not f(s0(f).suc)","not f(Nat.0) or f(s0(f)) or f(n_pred)","not f(s0(f))","f(s0(f))"]}
{"goal":"one_lt_pow","proof":["lt(G.1, a.pow(n_pred.suc)) = f(n_pred)"]}
{"goal":"f(Nat.0)","proof":["lt(a.pow(Nat.0.suc), G.1) = f(Nat.0)","Nat.0 + Nat.1 = Nat.0.suc","a.pow(Nat.1) = a","Nat.0 + Nat.1 = Nat.1"]}
{"goal":"lt(a.pow(x.suc), G.1)","proof":["lt(a.pow(x.suc), G.1) = f(x)"]}
{"goal":"a.pow(x.suc) != G.1","proof":["not lt(a.pow(x.suc), G.1) or a.pow(x.suc) != G.1"]}
{"goal":"a.pow(x.suc) <= G.1","proof":["not lt(a.pow(x.suc), G.1) or a.pow(x.suc) <= G.1"]}
{"goal":"a * a.pow(x.suc) <= a * G.1","proof":["not a.pow(x.suc) <= G.1 or a * a.pow(x.suc) <= a * G.1"]}
{"goal":"lt(a * a.pow(x.suc), a * G.1)","proof":["not a * a.pow(x.suc) <= a * G.1 or lt(a * a.pow(x.suc), a * G.1) or a * a.pow(x.suc) = a * G.1","a * a.pow(x.suc) != a * G.1 or a.pow(x.suc) = G.1","a * a.pow(x.suc) = a * G.1"]}
{"goal":"lt(a * a.pow(x.suc), a)","proof":["a * G.1 = a"]}
{"goal":"f(x.suc)","proof":["lt(a.pow(x.suc.suc), G.1) = f(x.suc)","x.suc.suc != x.suc.suc or a * a.pow(x.suc) = a.pow(x.suc.suc)","not lt(a.pow(x.suc.suc), a) or not lt(a, G.1) or lt(a.pow(x.suc.suc), G.1)","not lt(a.pow(x.suc.suc), G.1)","a * a.pow(x.suc) = a.pow(x.suc.suc)","lt(a.pow(x.suc.suc), a)","not lt(a.pow(x.suc.suc), a) or lt(a.pow(x.suc.suc), G.1)"]}
{"goal":"exists(k0: Nat) { k0.suc = n }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0).suc = x0 or Nat.0 = x0 } }","s0(n).suc != n","s0(n).suc = n or n = Nat.0"]}
{"goal":"f(n_pred)","proof":["let s0: (Nat -> Bool) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(s0(f).suc) or not f(Nat.0) or f(n_pred)","not f(s0(f).suc)","not f(Nat.0) or f(s0(f)) or f(n_pred)","not f(s0(f))","f(s0(f))"]}
{"goal":"pow_lt_one","proof":["lt(a.pow(n_pred.suc), G.1) = f(n_pred)"]}
{"goal":"exists(k0: Nat) { h.pow(k0) = G.1 }","proof":["let s0: G -> Nat satisfy { forall(x0: G) { s0(x0) != Nat.0 or not has_finite_order(x0) } and forall(x1: G) { not has_finite_order(x1) or x1.pow(s0(x1)) = G.1 } and forall(x2: G, x3: Nat) { x2.pow(x3) != G.1 or has_finite_order(x2) or Nat.0 = x3 } }","h.pow(s0(h)) != G.1","not has_finite_order(h) or h.pow(s0(h)) = G.1"]}
{"goal":"lt(G.1, h.pow(n))","proof":["let s0: G -> Nat satisfy { forall(x0: G) { s0(x0) != Nat.0 or not has_finite_order(x0) } and forall(x1: G) { not has_finite_order(x1) or x1.pow(s0(x1)) = G.1 } and forall(x2: G, x3: Nat) { x2.pow(x3) != G.1 or has_finite_order(x2) or Nat.0 = x3 } }","not lt(G.1, h) or lt(G.1, h.pow(s0(h))) or s0(h) = Nat.0","not has_finite_order(h) or h.pow(s0(h)) = G.1","s0(h) != Nat.0 or not has_finite_order(h)","not lt(G.1, h.pow(s0(h))) or h.pow(s0(h)) != G.1","s0(h) != Nat.0","h.pow(s0(h)) = G.1","lt(G.1, h.pow(s0(h))) or s0(h) = Nat.0","not lt(G.1, h.pow(s0(h)))","lt(G.1, h.pow(s0(h)))"]}
{"goal":"false","proof":["lt(G.1, G.1)","not lt(G.1, G.1) or G.1 != G.1"]}
{"goal":"lt(h, G.1)","proof":["not G.1 <= h or lt(G.1, h) or G.1 = h","not h <= G.1 or lt(h, G.1) or G.1 = h","not h <= G.1","G.1 <= h or h <= G.1","not G.1 <= h","G.1 <= h"]}
{"goal":"false","proof":["let s0: G -> Nat satisfy { forall(x0: G) { s0(x0) != Nat.0 or not has_finite_order(x0) } and forall(x1: G) { not has_finite_order(x1) or x1.pow(s0(x1)) = G.1 } and forall(x2: G, x3: Nat) { x2.pow(x3) != G.1 or has_finite_order(x2) or Nat.0 = x3 } }","not lt(h, G.1) or lt(h.pow(s0(h)), G.1) or s0(h) = Nat.0","not has_finite_order(h) or h.pow(s0(h)) = G.1","s0(h) != Nat.0 or not has_finite_order(h)","not lt(h.pow(s0(h)), G.1) or h.pow(s0(h)) != G.1","s0(h) != Nat.0","h.pow(s0(h)) = G.1","lt(h.pow(s0(h)), G.1) or s0(h) = Nat.0","not lt(h.pow(s0(h)), G.1)","lt(h.pow(s0(h)), G.1)"]}
{"goal":"h = G.1","proof":[]}
{"goal":"ordered_imp_torsion_free","proof":["let s0: G satisfy { forall(x0: G) { not has_finite_order(x0) or not is_torsion_free<G> or G.1 = x0 } and (has_finite_order(s0) or is_torsion_free<G>) and (G.1 != s0 or is_torsion_free<G>) }","not has_finite_order(s0) or G.1 = s0"]}
