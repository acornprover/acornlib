{"goal":"add_nil","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","List.cons(s0(add_nil[T]), s1(add_nil[T])) + List.nil[T] != List.cons(s0(add_nil[T]), s1(add_nil[T])) or add_nil[T](List.cons(s0(add_nil[T]), s1(add_nil[T])))","List.nil[T] + List.nil[T] != List.nil[T] or add_nil[T](List.nil[T])","not add_nil[T](list) or list + List.nil[T] = list","not add_nil[T](s1(add_nil[T])) or s1(add_nil[T]) + List.nil[T] = s1(add_nil[T])","not add_nil[T](list)","List.cons(s0(add_nil[T]), s1(add_nil[T])) != List.cons(s0(add_nil[T]), s1(add_nil[T])) or List.cons(s0(add_nil[T]), s1(add_nil[T])) + List.nil[T] = List.cons(s0(add_nil[T]), s1(add_nil[T]) + List.nil[T])","not add_nil[T](List.cons(s0(add_nil[T]), s1(add_nil[T]))) or not add_nil[T](List.nil[T]) or add_nil[T](list)","not add_nil[T](List.nil[T]) or add_nil[T](s1(add_nil[T])) or add_nil[T](list)","List.nil[T] != List.nil[T] or List.nil[T] + List.nil[T] = List.nil[T]","List.nil[T] + List.nil[T] = List.nil[T]","add_nil[T](List.nil[T])","List.cons(s0(add_nil[T]), s1(add_nil[T])) + List.nil[T] = List.cons(s0(add_nil[T]), s1(add_nil[T]) + List.nil[T])","add_nil[T](s1(add_nil[T]))","not add_nil[T](List.cons(s0(add_nil[T]), s1(add_nil[T])))","s1(add_nil[T]) + List.nil[T] = s1(add_nil[T])","List.cons(s0(add_nil[T]), s1(add_nil[T])) + List.nil[T] != List.cons(s0(add_nil[T]), s1(add_nil[T]))"]}
{"goal":"nil_add","proof":["List.nil[T] != List.nil[T] or List.nil[T] + list = list"]}
{"goal":"f(List.nil[T])","proof":["item ∈ List.nil[T] or f(List.nil[T])","item ∈ List.nil[T]","not item ∈ List.nil[T] or List.nil[T] != List.nil[T]"]}
{"goal":"f(List.cons(head, tail))","proof":["item ∈ List.cons(head, tail) or f(List.cons(head, tail))","not item ∈ List.cons(head, tail) + right or f(List.cons(head, tail))","not item ∈ tail or not f(tail) or item ∈ tail + right","not item ∈ tail + right or List.cons(head, tail + right) != List.cons(head, tail + right) or item ∈ List.cons(head, tail + right) or head = item","not item ∈ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or item ∈ tail or head = item","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + right = List.cons(head, tail + right)","item ∈ List.cons(head, tail)","List.cons(head, tail + right) != List.cons(head, tail + right) or head != item or item ∈ List.cons(head, tail + right)","not item ∈ List.cons(head, tail) + right","head != item or item ∈ List.cons(head, tail + right)","List.cons(head, tail) + right = List.cons(head, tail + right)","not item ∈ List.cons(head, tail) or item ∈ tail or head = item","not item ∈ tail + right or item ∈ List.cons(head, tail + right) or head = item","not item ∈ List.cons(head, tail + right)","item ∈ tail or head = item","head != item","item ∈ tail","not item ∈ tail + right","item ∈ tail + right"]}
{"goal":"add_contains_left","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","not item ∈ left or not f(left) or item ∈ left + right","not f(left)","not f(List.cons(s0(f), s1(f))) or not f(List.nil[T]) or f(left)","not f(List.nil[T]) or f(s1(f)) or f(left)","f(s1(f)) or f(left)","f(s1(f))","not f(List.cons(s0(f), s1(f))) or f(left)","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"f(List.nil[T])","proof":["item ∈ List.nil[T] + right = f(List.nil[T])","not item ∈ List.nil[T] + right","List.nil[T] + right = right"]}
{"goal":"f(List.cons(head, tail))","proof":["item ∈ List.cons(head, tail) + right = f(List.cons(head, tail))","item ∈ tail + right = f(tail)","not item ∈ tail + right or List.cons(head, tail + right) != List.cons(head, tail + right) or item ∈ List.cons(head, tail + right) or head = item","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + right = List.cons(head, tail + right)","List.cons(head, tail + right) != List.cons(head, tail + right) or head != item or item ∈ List.cons(head, tail + right)","not item ∈ List.cons(head, tail) + right","head != item or item ∈ List.cons(head, tail + right)","item ∈ tail + right","List.cons(head, tail) + right = List.cons(head, tail + right)","not item ∈ tail + right or item ∈ List.cons(head, tail + right) or head = item","not item ∈ List.cons(head, tail + right)","head != item","head = item"]}
{"goal":"add_contains_right","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","item ∈ left + right = f(left)","not f(left)","not f(List.cons(s0(f), s1(f))) or not f(List.nil[T]) or f(left)","not f(List.nil[T]) or f(s1(f)) or f(left)","f(s1(f))","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"f(List.nil[T])","proof":["item ∈ List.nil[T] + right or f(List.nil[T])","item ∈ List.nil[T] + right","List.nil[T] + right = right"]}
{"goal":"f(List.cons(head, tail))","proof":["not item ∈ List.cons(head, tail) or f(List.cons(head, tail))","item ∈ List.cons(head, tail) + right or f(List.cons(head, tail))","not item ∈ tail + right or not f(tail) or item ∈ tail","not item ∈ tail or List.cons(head, tail) != List.cons(head, tail) or item ∈ List.cons(head, tail) or head = item","not item ∈ List.cons(head, tail + right) or List.cons(head, tail + right) != List.cons(head, tail + right) or item ∈ tail + right or head = item","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + right = List.cons(head, tail + right)","not item ∈ List.cons(head, tail)","List.cons(head, tail) != List.cons(head, tail) or head != item or item ∈ List.cons(head, tail)","item ∈ List.cons(head, tail) + right","head != item or item ∈ List.cons(head, tail)","List.cons(head, tail) + right = List.cons(head, tail + right)","not item ∈ List.cons(head, tail + right) or item ∈ tail + right or head = item","not item ∈ tail or item ∈ List.cons(head, tail) or head = item","item ∈ List.cons(head, tail + right)","head != item","not item ∈ tail","item ∈ tail + right","not item ∈ tail + right"]}
{"goal":"not_contains_add","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","not item ∈ left + right or not f(left) or item ∈ left","not f(left)","not f(List.cons(s0(f), s1(f))) or not f(List.nil[T]) or f(left)","not f(List.nil[T]) or f(s1(f)) or f(left)","f(s1(f)) or f(left)","f(s1(f))","not f(List.cons(s0(f), s1(f))) or f(left)","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"f(List.nil[T])","proof":["List.nil[T].length + right.length != (List.nil[T] + right).length or f(List.nil[T])","List.nil[T] != List.nil[T] or List.nil[T].length = 0","List.nil[T] + right = right","0 + right.length = right.length","List.nil[T].length = 0","List.nil[T].length + right.length != (List.nil[T] + right).length"]}
{"goal":"f(List.cons(head, tail))","proof":["List.cons(head, tail).length + right.length != (List.cons(head, tail) + right).length or f(List.cons(head, tail))","not f(tail) or tail.length + right.length = (tail + right).length","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + right = List.cons(head, tail + right)","List.cons(head, tail + right) != List.cons(head, tail + right) or List.cons(head, tail + right).length = (tail + right).length.suc","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","tail.length.suc + right.length = (tail.length + right.length).suc","List.cons(head, tail + right).length = (tail + right).length.suc","List.cons(head, tail).length = tail.length.suc","List.cons(head, tail) + right = List.cons(head, tail + right)","List.cons(head, tail).length + right.length != (List.cons(head, tail) + right).length","tail.length + right.length = (tail + right).length"]}
{"goal":"add_length","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","not f(left) or left.length + right.length = (left + right).length","not f(left)","not f(List.cons(s0(f), s1(f))) or not f(List.nil[T]) or f(left)","not f(List.nil[T]) or f(s1(f)) or f(left)","f(s1(f)) or f(left)","f(s1(f))","not f(List.cons(s0(f), s1(f))) or f(left)","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"singleton_unique","proof":["List.cons(item, List.nil[T]) != List.singleton(item) or List.cons(item, List.nil[T].unique) = List.singleton(item).unique or item ∈ List.nil[T]","List.singleton(item).unique != List.singleton(item) or List.singleton(item).is_unique","List.singleton(item).unique != List.singleton(item)","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]","List.cons(item, List.nil[T]) = List.singleton(item)","not item ∈ List.nil[T] or List.nil[T] != List.nil[T]","not item ∈ List.nil[T]","List.nil[T].unique = List.nil[T]","List.singleton(item).unique != List.cons(item, List.nil[T])","List.cons(item, List.nil[T].unique) != List.singleton(item).unique"]}
{"goal":"f(List.nil[T])","proof":["List.nil[T].unique.length <= List.nil[T].length = f(List.nil[T])","not List.nil[T].unique.length <= List.nil[T].length","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]","List.nil[T].length <= List.nil[T].length","List.nil[T].unique = List.nil[T]"]}
{"goal":"tail.unique.length <= tail.length","proof":["tail.unique.length <= tail.length = f(tail)"]}
{"goal":"List.cons(head, tail).unique.length <= List.cons(head, tail).length","proof":["not head ∈ tail or List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = tail.unique","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","not tail.unique.length <= tail.length or not tail.length < tail.length.suc or tail.unique.length < tail.length.suc","List.cons(head, tail).unique.length <= List.cons(head, tail).length or List.cons(head, tail).length < List.cons(head, tail).unique.length","not tail.length.suc < List.cons(head, tail).unique.length or not List.cons(head, tail).unique.length < tail.length.suc","tail.length < tail.length.suc","List.cons(head, tail).length = tail.length.suc","List.cons(head, tail).length < List.cons(head, tail).unique.length","not head ∈ tail or List.cons(head, tail).unique = tail.unique","List.cons(head, tail).unique = tail.unique","tail.length.suc < List.cons(head, tail).unique.length","not tail.length < tail.length.suc or tail.unique.length < tail.length.suc","tail.unique.length < tail.length.suc","not List.cons(head, tail).unique.length < tail.length.suc","List.cons(head, tail).unique.length < tail.length.suc"]}
{"goal":"List.cons(head, tail).unique.length <= List.cons(head, tail).length","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","List.cons(head, tail.unique) != List.cons(head, tail.unique) or List.cons(head, tail.unique).length = tail.unique.length.suc","not tail.unique.length <= tail.length or not tail.length < tail.length.suc or tail.unique.length < tail.length.suc","not tail.unique.length < tail.length.suc or tail.unique.length.suc <= tail.length.suc","tail.length < tail.length.suc","List.cons(head, tail).length = tail.length.suc","List.cons(head, tail.unique).length = tail.unique.length.suc","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique)","List.cons(head, tail).unique = List.cons(head, tail.unique)","not List.cons(head, tail.unique).length <= List.cons(head, tail).length","not tail.length < tail.length.suc or tail.unique.length < tail.length.suc","tail.unique.length < tail.length.suc","not List.cons(head, tail.unique).length <= tail.length.suc","tail.unique.length.suc <= tail.length.suc","not tail.unique.length.suc <= tail.length.suc"]}
{"goal":"f(List.cons(head, tail))","proof":["List.cons(head, tail).unique.length <= List.cons(head, tail).length = f(List.cons(head, tail))","not List.cons(head, tail).unique.length <= List.cons(head, tail).length"]}
{"goal":"unique_length","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","list.unique.length <= list.length = f(list)","not f(list)","not f(List.cons(s0(f), s1(f))) or not f(List.nil[T]) or f(list)","not f(List.nil[T]) or f(s1(f)) or f(list)","f(s1(f))","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"p(List.nil[T], item)","proof":["item ∈ List.nil[T].unique != item ∈ List.nil[T] or p(List.nil[T], item)","List.nil[T].unique != List.nil[T] or p(List.nil[T], item)","List.nil[T].unique != List.nil[T]","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]"]}
{"goal":"tail.unique.contains(item) = tail.contains(item)","proof":["not p(tail, item) or item ∈ tail.unique = item ∈ tail"]}
{"goal":"List.cons(head, tail).unique = tail.unique","proof":["not head ∈ tail or List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = tail.unique","List.cons(head, tail) != List.cons(head, tail) or not head ∈ tail"]}
{"goal":"List.cons(head, tail).contains(item) implies tail.contains(item)","proof":["not item ∈ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or item ∈ tail or head = item","not item ∈ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or head = item","not item ∈ List.cons(head, tail) or head = item","head = item"]}
{"goal":"tail.contains(item) implies List.cons(head, tail).contains(item)","proof":["List.cons(head, List.nil[T]) != List.cons(head, List.nil[T]) or List.cons(head, List.nil[T]) + tail = List.cons(head, List.nil[T] + tail)","not item ∈ tail or item ∈ List.cons(head, List.nil[T]) + tail","List.nil[T] + tail = tail","not item ∈ List.cons(head, List.nil[T] + tail)","item ∈ List.cons(head, List.nil[T]) + tail","List.cons(head, List.nil[T]) + tail = List.cons(head, List.nil[T] + tail)"]}
{"goal":"List.cons(head, tail).contains(item) = tail.contains(item)","proof":["item ∈ List.cons(head, tail) or item ∈ tail","item ∈ tail","item ∈ List.cons(head, tail)","not item ∈ List.cons(head, tail)"]}
{"goal":"p(List.cons(head, tail), item)","proof":["item ∈ List.cons(head, tail).unique != item ∈ List.cons(head, tail) or p(List.cons(head, tail), item)","item ∈ List.cons(head, tail).unique != item ∈ List.cons(head, tail)"]}
{"goal":"List.cons(head, tail).unique = List.cons(head, tail.unique)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail"]}
{"goal":"List.cons(head, tail.unique).contains(item) implies List.cons(head, tail).contains(item)","proof":["not p(tail, item) or item ∈ tail.unique = item ∈ tail","not item ∈ tail or List.cons(head, tail) != List.cons(head, tail) or item ∈ List.cons(head, tail) or head = item","not item ∈ List.cons(head, tail.unique) or List.cons(head, tail.unique) != List.cons(head, tail.unique) or item ∈ tail.unique or head = item","List.cons(head, tail) != List.cons(head, tail) or head != item or item ∈ List.cons(head, tail)","not item ∈ tail.unique or not p(tail, item) or item ∈ tail","List.cons(head, tail) != List.cons(head, tail) or head != item","head != item","not item ∈ List.cons(head, tail.unique) or item ∈ tail.unique or head = item","item ∈ tail.unique","not item ∈ tail or item ∈ List.cons(head, tail) or head = item","item ∈ tail","not item ∈ tail"]}
{"goal":"List.cons(head, tail).contains(item) implies List.cons(head, tail.unique).contains(item)","proof":["not p(tail, item) or item ∈ tail.unique = item ∈ tail","not item ∈ tail.unique or List.cons(head, tail.unique) != List.cons(head, tail.unique) or item ∈ List.cons(head, tail.unique) or head = item","not item ∈ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or item ∈ tail or head = item","List.cons(head, tail.unique) != List.cons(head, tail.unique) or head != item or item ∈ List.cons(head, tail.unique)","not item ∈ tail or not p(tail, item) or item ∈ tail.unique","List.cons(head, tail.unique) != List.cons(head, tail.unique) or head != item","head != item","not item ∈ List.cons(head, tail) or item ∈ tail or head = item","item ∈ tail","not item ∈ tail.unique or item ∈ List.cons(head, tail.unique) or head = item","item ∈ tail.unique","not item ∈ tail.unique"]}
{"goal":"List.cons(head, tail).contains(item) = List.cons(head, tail.unique).contains(item)","proof":["item ∈ List.cons(head, tail.unique) or item ∈ List.cons(head, tail)","not item ∈ List.cons(head, tail.unique) or not item ∈ List.cons(head, tail)","item ∈ List.cons(head, tail.unique)","not item ∈ List.cons(head, tail.unique)"]}
{"goal":"p(List.cons(head, tail), item)","proof":["item ∈ List.cons(head, tail).unique != item ∈ List.cons(head, tail) or p(List.cons(head, tail), item)","item ∈ List.cons(head, tail).unique != item ∈ List.cons(head, tail)","item ∈ List.cons(head, tail).unique = item ∈ List.cons(head, tail)"]}
{"goal":"p(List.cons(head, tail), item)","proof":[]}
{"goal":"list.unique.contains(item) implies list.contains(item)","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T], item) or p(s1, item) or p(x0, item) } and forall(x1: List[T]) { not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(x1, item) } }","not p(List.nil[T], item) or p(s1, item) or p(s1, item)","p(s1, item) or p(s1, item)","not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(list, item)","not p(List.cons(s0, s1), item) or p(list, item)","not p(s1, item) or p(List.cons(s0, s1), item)","not p(list, item) or item ∈ list.unique = item ∈ list","p(s1, item)","not item ∈ list.unique or not p(list, item) or item ∈ list","not p(list, item)","not p(List.cons(s0, s1), item)"]}
{"goal":"list.contains(item) implies list.unique.contains(item)","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T], item) or p(s1, item) or p(x0, item) } and forall(x1: List[T]) { not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(x1, item) } }","not p(List.nil[T], item) or p(s1, item) or p(s1, item)","p(s1, item) or p(s1, item)","not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(list, item)","not p(List.cons(s0, s1), item) or p(list, item)","not p(s1, item) or p(List.cons(s0, s1), item)","not p(list, item) or item ∈ list.unique = item ∈ list","p(s1, item)","not item ∈ list or not p(list, item) or item ∈ list.unique","not p(list, item)","not p(List.cons(s0, s1), item)"]}
{"goal":"unique_preserves_contains","proof":["item ∈ list.unique or item ∈ list","item ∈ list","item ∈ list.unique","not item ∈ list.unique"]}
{"goal":"f(List.nil[T])","proof":["List.nil[T].unique.unique != List.nil[T].unique or f(List.nil[T])","List.nil[T].unique.unique != List.nil[T].unique","List.nil[T].unique != List.nil[T]","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]"]}
{"goal":"tail.unique.unique = tail.unique","proof":["not f(tail) or tail.unique.unique = tail.unique"]}
{"goal":"tail.unique.contains(head)","proof":["head ∈ tail.unique = head ∈ tail"]}
{"goal":"List.cons(head, tail).unique.unique = List.cons(head, tail).unique","proof":["not head ∈ tail or List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = tail.unique","tail.unique.unique != tail.unique or tail.unique.is_unique","not List.cons(head, tail).unique.is_unique or List.cons(head, tail).unique.unique = List.cons(head, tail).unique","not List.cons(head, tail).unique.is_unique","tail.unique.is_unique","not head ∈ tail or List.cons(head, tail).unique = tail.unique","List.cons(head, tail).unique = tail.unique"]}
{"goal":"not tail.unique.contains(head)","proof":["head ∈ tail.unique = head ∈ tail"]}
{"goal":"List.cons(head, tail).unique.unique = List.cons(head, tail).unique","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail","List.cons(head, tail).unique != List.cons(head, tail.unique) or List.cons(head, tail).unique.unique = List.cons(head, tail.unique.unique) or head ∈ tail.unique","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique)","List.cons(head, tail).unique = List.cons(head, tail.unique)","List.cons(head, tail).unique.unique != List.cons(head, tail.unique)","List.cons(head, tail).unique.unique = List.cons(head, tail.unique.unique)","List.cons(head, tail).unique.unique != List.cons(head, tail.unique.unique)"]}
{"goal":"List.cons(head, tail).unique = List.cons(head, tail).unique.unique","proof":[]}
{"goal":"f(List.cons(head, tail))","proof":["List.cons(head, tail).unique.unique != List.cons(head, tail).unique or f(List.cons(head, tail))","List.cons(head, tail).unique.unique != List.cons(head, tail).unique"]}
{"goal":"unique_indemp","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","not f(list) or list.unique.unique = list.unique","not f(list)","not f(List.cons(s0(f), s1(f))) or not f(List.nil[T]) or f(list)","not f(List.nil[T]) or f(s1(f)) or f(list)","f(s1(f)) or f(list)","f(s1(f))","not f(List.cons(s0(f), s1(f))) or f(list)","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"unique_list_is_unique","proof":["list.unique.unique != list.unique or list.unique.is_unique","list.unique.unique != list.unique","list.unique.unique = list.unique"]}
{"goal":"List.cons(head, tail).unique = tail.unique","proof":["not head ∈ tail or List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = tail.unique","List.cons(head, tail) != List.cons(head, tail) or not head ∈ tail"]}
{"goal":"tail.length < List.cons(head, tail).length","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","tail.length < tail.length.suc","List.cons(head, tail).length = tail.length.suc"]}
{"goal":"not List.cons(head, tail).is_unique","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","List.cons(head, tail) != tail.unique or tail.unique.length = tail.length.suc","not tail.unique.length <= tail.length or not tail.length < List.cons(head, tail).length or tail.unique.length < List.cons(head, tail).length","tail.unique.length <= tail.length","not tail.unique.length < tail.length.suc or tail.unique.length != tail.length.suc","not List.cons(head, tail).is_unique or List.cons(head, tail).unique = List.cons(head, tail)","List.cons(head, tail).unique = List.cons(head, tail)","List.cons(head, tail) = tail.unique","List.cons(head, tail).length = tail.length.suc","not tail.unique.length <= tail.length or tail.unique.length < List.cons(head, tail).length","tail.unique.length < List.cons(head, tail).length","tail.unique.length < tail.length.suc","tail.unique.length = tail.length.suc","tail.unique.length != tail.length.suc"]}
{"goal":"List.cons(head, tail).unique = List.cons(head, tail.unique)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail"]}
{"goal":"unique_implies_tail_unique","proof":["List.cons(head, tail.unique) != List.cons(head, tail) or tail.unique = tail","tail.unique != tail or tail.is_unique","tail.unique != tail","not List.cons(head, tail).is_unique or List.cons(head, tail).unique = List.cons(head, tail)","List.cons(head, tail).unique = List.cons(head, tail)","List.cons(head, tail.unique) = List.cons(head, tail)"]}
{"goal":"p(List.nil[T], item)","proof":["item ∈ List.nil[T] or p(List.nil[T], item)","item ∈ List.nil[T]","not item ∈ List.nil[T] or List.nil[T] != List.nil[T]"]}
{"goal":"List.cons(head, tail).count(item) = 1 + tail.count(item)","proof":["List.cons(head, tail) != List.cons(head, tail) or head != item or List.cons(head, tail).count(item) = 1 + tail.count(item)","List.cons(head, tail) != List.cons(head, tail) or head != item"]}
{"goal":"List.cons(head, tail).count(item) >= 1","proof":["List.cons(head, tail).count(item) != 1 + tail.count(item) or 1 <= List.cons(head, tail).count(item)","1 <= List.cons(head, tail).count(item) = List.cons(head, tail).count(item) >= 1","1 <= List.cons(head, tail).count(item)","not 1 <= List.cons(head, tail).count(item)"]}
{"goal":"tail.count(item) >= 1","proof":["not item ∈ tail or not p(tail, item) or tail.count(item) >= 1","not item ∈ tail","not item ∈ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or item ∈ tail or head = item","not item ∈ List.cons(head, tail) or item ∈ tail or head = item"]}
{"goal":"List.cons(head, tail).count(item) = tail.count(item)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(item) = tail.count(item) or head = item","List.cons(head, tail) != List.cons(head, tail) or head = item"]}
{"goal":"List.cons(head, tail).count(item) >= 1","proof":[]}
{"goal":"p(List.cons(head, tail), item)","proof":["not List.cons(head, tail).count(item) >= 1 or p(List.cons(head, tail), item)"]}
{"goal":"list_contains_implies_count_geq_one","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T], item) or p(s1, item) or p(x0, item) } and forall(x1: List[T]) { not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(x1, item) } }","not p(List.nil[T], item) or p(s1, item) or p(s1, item)","p(s1, item) or p(s1, item)","item ∈ List.cons(s0, s1) or p(List.cons(s0, s1), item)","not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(list, item)","not p(List.cons(s0, s1), item) or p(list, item)","not item ∈ list or not p(list, item) or list.count(item) >= 1","not item ∈ List.cons(s0, s1) or not p(s1, item) or p(List.cons(s0, s1), item)","not p(list, item)","p(s1, item)","not p(List.cons(s0, s1), item)","not item ∈ List.cons(s0, s1)","item ∈ List.cons(s0, s1)"]}
{"goal":"p(List.nil[T], item)","proof":["List.nil[T].count(item) != 0 or p(List.nil[T], item)","List.nil[T].count(item) != 0","List.nil[T] != List.nil[T] or List.nil[T].count(item) = 0"]}
{"goal":"List.cons(head, tail).count(item) = tail.count(item)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(item) = tail.count(item) or head = item","List.cons(item, tail) != List.cons(item, tail) or item != item or item ∈ List.cons(item, tail)","List.cons(head, tail) != List.cons(head, tail) or head = item","head = item","not item ∈ List.cons(item, tail)","item != item or item ∈ List.cons(item, tail)"]}
{"goal":"tail.count(item) = 0","proof":["not p(tail, item) or tail.count(item) = 0 or item ∈ tail","item ∈ tail","not item ∈ tail or List.cons(head, tail) != List.cons(head, tail) or item ∈ List.cons(head, tail) or head = item","List.cons(head, tail) != List.cons(head, tail) or head != item or item ∈ List.cons(head, tail)","head != item or item ∈ List.cons(head, tail)","head != item","not item ∈ tail or item ∈ List.cons(head, tail) or head = item"]}
{"goal":"p(List.cons(head, tail), item)","proof":["List.cons(head, tail).count(item) != 0 or p(List.cons(head, tail), item)","List.cons(head, tail).count(item) != 0","List.cons(head, tail).count(item) = 0"]}
{"goal":"p(List.cons(head, tail), item)","proof":["not item ∈ List.cons(head, tail) or p(List.cons(head, tail), item)"]}
{"goal":"p(list, item)","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T], item) or p(s1, item) or p(x0, item) } and forall(x1: List[T]) { not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(x1, item) } }","not p(List.nil[T], item) or p(s1, item) or p(list, item)","p(s1, item) or p(list, item)","p(s1, item)","not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(list, item)","not p(List.cons(s0, s1), item) or p(list, item)","not p(s1, item) or p(List.cons(s0, s1), item)","not p(List.cons(s0, s1), item)"]}
{"goal":"list_not_contains_impl_count_zero","proof":["not p(list, item) or list.count(item) = 0 or item ∈ list"]}
{"goal":"p(List.nil[T], item)","proof":["not List.nil[T].count(item) <= 1 or p(List.nil[T], item)","not List.nil[T].count(item) <= 1","List.nil[T] != List.nil[T] or List.nil[T].count(item) = 0","0 <= 1 or 1 < 0","not 1 < 0","List.nil[T].count(item) = 0","not 0 <= 1"]}
{"goal":"List.cons(head, tail).unique = List.cons(head, tail)","proof":["not List.cons(head, tail).is_unique or List.cons(head, tail).unique = List.cons(head, tail)"]}
{"goal":"List.cons(head, tail).length = tail.unique.length","proof":["List.cons(head, tail) != tail.unique","not head ∈ tail or List.cons(head, tail).unique != List.cons(head, tail) or List.cons(head, tail).unique.unique = tail.unique","List.cons(head, tail).unique.unique = List.cons(head, tail).unique","List.cons(head, tail).unique != tail.unique","List.cons(head, tail).unique.unique = tail.unique","List.cons(head, tail).unique.unique != tail.unique"]}
{"goal":"false","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","not List.cons(head, tail).is_unique or tail.is_unique","tail.is_unique","not tail.is_unique or tail.unique = tail","tail.length.suc != tail.length","List.cons(head, tail).length = tail.length.suc","tail.unique.length = tail.length.suc","tail.unique = tail"]}
{"goal":"not tail.contains(head)","proof":[]}
{"goal":"List.cons(head, tail).count(item) = 1 + tail.count(item)","proof":["List.cons(head, tail) != List.cons(head, tail) or head != item or List.cons(head, tail).count(item) = 1 + tail.count(item)","List.cons(head, tail) != List.cons(head, tail) or head != item"]}
{"goal":"tail.count(item) = 0","proof":["not item ∈ tail","tail.count(item) = 0 or item ∈ tail"]}
{"goal":"List.cons(head, tail).count(item) <= 1","proof":["not 1 + tail.count(item) <= 1","not 1 + 0 <= 1","1 <= 1 or 1 <= 1","1 + 0 = 0 + 1","not 0 + 1 <= 1","0 + 1 = 1","not 1 <= 1"]}
{"goal":"List.cons(head, tail).count(item) = tail.count(item)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(item) = tail.count(item) or head = item","List.cons(head, tail) != List.cons(head, tail) or head = item"]}
{"goal":"List.cons(head, tail).count(item) <= 1","proof":["not tail.is_unique or not p(tail, item) or tail.count(item) <= 1","not tail.count(item) <= 1","not tail.is_unique","not List.cons(head, tail).is_unique or tail.is_unique"]}
{"goal":"List.cons(head, tail).count(item) <= 1","proof":[]}
{"goal":"p(List.cons(head, tail), item)","proof":["not List.cons(head, tail).count(item) <= 1 or p(List.cons(head, tail), item)"]}
{"goal":"p(List.cons(head, tail), item)","proof":["List.cons(head, tail).is_unique or p(List.cons(head, tail), item)"]}
{"goal":"unique_implies_no_duplicate","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T], item) or p(s1, item) or p(x0, item) } and forall(x1: List[T]) { not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(x1, item) } }","not p(List.nil[T], item) or p(s1, item) or p(s1, item)","p(s1, item) or p(s1, item)","not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(list, item)","not p(List.cons(s0, s1), item) or p(list, item)","not p(s1, item) or p(List.cons(s0, s1), item)","not list.is_unique or not p(list, item) or list.count(item) <= 1","not p(list, item)","p(s1, item)","not p(List.cons(s0, s1), item)"]}
{"goal":"p(List.nil[T])","proof":["List.nil[T].unique.length < List.nil[T].length or p(List.nil[T])","List.nil[T].unique.length < List.nil[T].length","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]","not List.nil[T].length < List.nil[T].length","List.nil[T].unique = List.nil[T]"]}
{"goal":"exists(k0: T) { tail.count(k0) > 1 }","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { not x0.unique.length < x0.length or not p(x0) or x0.count(s0(x0)) > 1 } and forall(x1: List[T]) { x1.unique.length < x1.length or p(x1) } and forall(x2: List[T], x3: T) { not x2.count(x3) > 1 or p(x2) } }","not tail.count(s0(tail)) > 1","not tail.unique.length < tail.length or not p(tail) or tail.count(s0(tail)) > 1"]}
{"goal":"List.cons(head, tail).count(x) = 1 + tail.count(x)","proof":["List.cons(head, tail) != List.cons(head, tail) or x != head or List.cons(head, tail).count(x) = 1 + tail.count(x)","List.cons(head, tail) != List.cons(head, tail) or x != head"]}
{"goal":"List.cons(head, tail).count(x) >= tail.count(x)","proof":["tail.count(x) + 1 != tail.count(x) + 1 or tail.count(x) <= tail.count(x) + 1","tail.count(x) <= List.cons(head, tail).count(x) = List.cons(head, tail).count(x) >= tail.count(x)","tail.count(x) + 1 = 1 + tail.count(x)","tail.count(x) <= tail.count(x) + 1","not tail.count(x) <= List.cons(head, tail).count(x)","not tail.count(x) <= 1 + tail.count(x)"]}
{"goal":"List.cons(head, tail).count(x) = tail.count(x)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(x) = tail.count(x) or x = head","List.cons(head, tail) != List.cons(head, tail) or x = head"]}
{"goal":"List.cons(head, tail).count(x) >= tail.count(x)","proof":["not tail.count(x) >= tail.count(x)","tail.count(x) <= tail.count(x) = tail.count(x) >= tail.count(x)","tail.count(x) <= tail.count(x)"]}
{"goal":"p(List.cons(head, tail))","proof":["not List.cons(head, tail).count(x) > 1 or p(List.cons(head, tail))","not tail.count(x) <= List.cons(head, tail).count(x) or not 1 < tail.count(x) or 1 < List.cons(head, tail).count(x)","tail.count(x) <= List.cons(head, tail).count(x) = List.cons(head, tail).count(x) >= tail.count(x)","List.cons(head, tail).count(x) > 1 = 1 < List.cons(head, tail).count(x)","tail.count(x) > 1 = 1 < tail.count(x)","1 < tail.count(x)","not List.cons(head, tail).count(x) > 1","not 1 < List.cons(head, tail).count(x) or List.cons(head, tail).count(x) > 1","tail.count(x) <= List.cons(head, tail).count(x)","not tail.count(x) <= List.cons(head, tail).count(x) or 1 < List.cons(head, tail).count(x)","not 1 < List.cons(head, tail).count(x)"]}
{"goal":"tail.contains(head)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","List.cons(head, tail.unique) != List.cons(head, tail.unique) or List.cons(head, tail.unique).length = tail.unique.length.suc","not tail.unique.length.suc < tail.length.suc or tail.unique.length < tail.length","List.cons(head, tail).length > List.cons(head, tail).unique.length = List.cons(head, tail).unique.length < List.cons(head, tail).length","tail.length.suc > tail.unique.length.suc = tail.unique.length.suc < tail.length.suc","List.cons(head, tail).length = tail.length.suc","List.cons(head, tail.unique).length = tail.unique.length.suc","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique)","List.cons(head, tail).unique = List.cons(head, tail.unique)","not tail.unique.length.suc < tail.length.suc"]}
{"goal":"tail.count(head) >= 1","proof":["not head ∈ tail or tail.count(head) >= 1"]}
{"goal":"List.cons(head, tail).count(head) = 1 + tail.count(head)","proof":["List.cons(head, tail) != List.cons(head, tail) or head != head or List.cons(head, tail).count(head) = 1 + tail.count(head)","List.cons(head, tail) != List.cons(head, tail) or head != head"]}
{"goal":"List.cons(head, tail).count(head) > 1","proof":["not 1 + tail.count(head) > 1","not 1 <= tail.count(head) or not tail.count(head) < tail.count(head).suc or 1 < tail.count(head).suc","1 <= tail.count(head) = tail.count(head) >= 1","tail.count(head).suc > 1 = 1 < tail.count(head).suc","1 + tail.count(head) = tail.count(head).suc","not tail.count(head).suc > 1","not 1 < tail.count(head).suc","tail.count(head) < tail.count(head).suc","1 <= tail.count(head)","not tail.count(head) < tail.count(head).suc or not 1 <= tail.count(head)"]}
{"goal":"p(List.cons(head, tail))","proof":["not List.cons(head, tail).count(head) > 1 or p(List.cons(head, tail))"]}
{"goal":"p(List.cons(head, tail))","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["List.cons(head, tail).unique.length < List.cons(head, tail).length or p(List.cons(head, tail))"]}
{"goal":"unique_len_smaller_implies_duplicate","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { not x0.unique.length < x0.length or not p(x0) or x0.count(s0(x0)) > 1 } and forall(x1: List[T]) { x1.unique.length < x1.length or p(x1) } and forall(x2: List[T], x3: T) { not x2.count(x3) > 1 or p(x2) } }","not list.count(s0(list)) > 1","let (s1: T, s2: List[T]) satisfy { forall(x4: List[T]) { not p(List.nil[T]) or p(s2) or p(x4) } and forall(x5: List[T]) { not p(List.cons(s1, s2)) or not p(List.nil[T]) or p(x5) } }","not p(List.nil[T]) or p(s2) or p(s2)","p(s2) or p(s2)","not p(List.cons(s1, s2)) or not p(List.nil[T]) or p(list)","not p(List.cons(s1, s2)) or p(list)","not p(s2) or p(List.cons(s1, s2))","not list.unique.length < list.length or not p(list) or list.count(s0(list)) > 1","p(s2)","not p(list)","not p(List.cons(s1, s2))"]}
{"goal":"List.cons(head, tail).count(x) = 1 + tail.count(x)","proof":["List.cons(head, tail) != List.cons(head, tail) or head != x or List.cons(head, tail).count(x) = 1 + tail.count(x)","List.cons(head, tail) != List.cons(head, tail) or head != x"]}
{"goal":"List.cons(head, tail).count(x) >= tail.count(x)","proof":["tail.count(x) + 1 != tail.count(x) + 1 or tail.count(x) <= tail.count(x) + 1","tail.count(x) <= List.cons(head, tail).count(x) = List.cons(head, tail).count(x) >= tail.count(x)","tail.count(x) + 1 = 1 + tail.count(x)","tail.count(x) <= tail.count(x) + 1","not tail.count(x) <= List.cons(head, tail).count(x)","not tail.count(x) <= 1 + tail.count(x)"]}
{"goal":"List.cons(head, tail).count(x) >= tail.count(x)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(x) = tail.count(x) or head = x","tail.count(x) <= List.cons(head, tail).count(x) = List.cons(head, tail).count(x) >= tail.count(x)","tail.count(x) <= tail.count(x)","not tail.count(x) <= List.cons(head, tail).count(x)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(x) = tail.count(x)","List.cons(head, tail).count(x) = tail.count(x)"]}
{"goal":"List.cons(head, tail).count(x) >= n","proof":["not lib(util).is_transitive[Nat](Nat.lte) or not n <= tail.count(x) or not tail.count(x) <= List.cons(head, tail).count(x) or n <= List.cons(head, tail).count(x)","n <= List.cons(head, tail).count(x) = List.cons(head, tail).count(x) >= n","n <= tail.count(x) = tail.count(x) >= n","tail.count(x) <= List.cons(head, tail).count(x) = List.cons(head, tail).count(x) >= tail.count(x)","not n <= List.cons(head, tail).count(x)","n <= tail.count(x)","tail.count(x) <= List.cons(head, tail).count(x)","not tail.count(x) <= List.cons(head, tail).count(x) or not n <= tail.count(x)"]}
{"goal":"cons_duplicate_inequality","proof":[]}
{"goal":"p(List.nil[T])","proof":["not List.nil[T].is_unique or p(List.nil[T])","not List.nil[T].is_unique","List.nil[T].unique != List.nil[T] or List.nil[T].is_unique","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]","List.nil[T].unique != List.nil[T]","List.nil[T].unique = List.nil[T]"]}
{"goal":"exists(k0: T) { tail.count(k0) > 1 }","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { not p(x0) or x0.count(s0(x0)) > 1 or x0.is_unique } and forall(x1: List[T]) { not x1.is_unique or p(x1) } and forall(x2: List[T], x3: T) { not x2.count(x3) > 1 or p(x2) } }","not tail.count(s0(tail)) > 1","not p(tail) or tail.count(s0(tail)) > 1 or tail.is_unique"]}
{"goal":"List.cons(head, tail).count(x) = 1 + tail.count(x)","proof":["List.cons(head, tail) != List.cons(head, tail) or x != head or List.cons(head, tail).count(x) = 1 + tail.count(x)","List.cons(head, tail) != List.cons(head, tail) or x != head"]}
{"goal":"List.cons(head, tail).count(x) = tail.count(x)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(x) = tail.count(x) or x = head","List.cons(head, tail) != List.cons(head, tail) or x = head"]}
{"goal":"List.cons(head, tail).count(x) >= tail.count(x)","proof":["not tail.count(x) >= tail.count(x) or List.cons(head, tail).count(x) >= tail.count(x)","tail.count(x) <= tail.count(x) = tail.count(x) >= tail.count(x)","tail.count(x) <= tail.count(x)","not tail.count(x) >= tail.count(x)"]}
{"goal":"List.cons(head, tail).count(x) > 1","proof":["not tail.count(x) <= List.cons(head, tail).count(x) or not 1 < tail.count(x) or 1 < List.cons(head, tail).count(x)","List.cons(head, tail).count(x) > 1 = 1 < List.cons(head, tail).count(x)","tail.count(x) > 1 = 1 < tail.count(x)","not 1 < List.cons(head, tail).count(x)","1 < tail.count(x)","tail.count(x) <= List.cons(head, tail).count(x) = List.cons(head, tail).count(x) >= tail.count(x)","not tail.count(x) <= List.cons(head, tail).count(x) or not 1 < tail.count(x)","tail.count(x) <= List.cons(head, tail).count(x)","not tail.count(x) <= List.cons(head, tail).count(x)"]}
{"goal":"p(List.cons(head, tail))","proof":["not List.cons(head, tail).count(x) > 1 or p(List.cons(head, tail))"]}
{"goal":"tail.is_unique","proof":[]}
{"goal":"tail.contains(head)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail","List.cons(head, tail).unique != List.cons(head, tail) or List.cons(head, tail).is_unique","not tail.is_unique or tail.unique = tail","tail.unique = tail","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique)","List.cons(head, tail).unique = List.cons(head, tail.unique)","List.cons(head, tail).unique != List.cons(head, tail)","List.cons(head, tail).unique = List.cons(head, tail)"]}
{"goal":"tail.count(head) = 1","proof":["not head ∈ tail or tail.count(head) >= 1","not tail.count(head) <= 1 or not 1 <= tail.count(head) or tail.count(head) = 1","not tail.is_unique or tail.count(head) <= 1","1 <= tail.count(head) = tail.count(head) >= 1","tail.count(head) <= 1","not 1 <= tail.count(head)","tail.count(head) >= 1","not tail.count(head) >= 1"]}
{"goal":"List.cons(head, tail).count(head) > 1","proof":["List.cons(head, tail) != List.cons(head, tail) or head != head or List.cons(head, tail).count(head) = 1 + tail.count(head)","1.suc > 1 = 1 < 1.suc","1 + 1 = 1.suc","1 < 1.suc","not 1 < 1.suc or 1.suc > 1","head != head or List.cons(head, tail).count(head) = 1 + tail.count(head)","List.cons(head, tail).count(head) = 1 + tail.count(head)","not 1 + tail.count(head) > 1","not 1 + 1 > 1","not 1.suc > 1"]}
{"goal":"p(List.cons(head, tail))","proof":["not List.cons(head, tail).count(head) > 1 or p(List.cons(head, tail))"]}
{"goal":"p(List.cons(head, tail))","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["not List.cons(head, tail).is_unique or p(List.cons(head, tail))"]}
{"goal":"not_unique_implies_duplicate","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { not p(x0) or x0.count(s0(x0)) > 1 or x0.is_unique } and forall(x1: List[T]) { not x1.is_unique or p(x1) } and forall(x2: List[T], x3: T) { not x2.count(x3) > 1 or p(x2) } }","not list.count(s0(list)) > 1","let (s1: List[T] -> Bool -> T, s2: List[T] -> Bool -> List[T]) satisfy { forall(x4: List[T] -> Bool, x5: List[T]) { not x4(List.nil[T]) or x4(s2(x4)) or x4(x5) } and forall(x6: List[T] -> Bool, x7: List[T]) { not x6(List.cons(s1(x6), s2(x6))) or not x6(List.nil[T]) or x6(x7) } }","not p(s2(p)) or p(List.cons(s1(p), s2(p)))","not p(list) or list.count(s0(list)) > 1 or list.is_unique","not p(list)","not p(List.cons(s1(p), s2(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s2(p)) or p(list)","p(s2(p)) or p(list)","p(s2(p))","not p(List.cons(s1(p), s2(p))) or p(list)","not p(List.cons(s1(p), s2(p)))"]}
{"goal":"p(List.nil[T])","proof":["List.nil[T].filter(f).length <= List.nil[T].length = p(List.nil[T])","List.nil[T] != List.nil[T] or List.nil[T].filter(f) = List.nil[T]","List.nil[T].length <= List.nil[T].length","not List.nil[T].filter(f).length <= List.nil[T].length","List.nil[T].filter(f) = List.nil[T]"]}
{"goal":"List.cons(head, tail).filter(f).length <= List.cons(head, tail).length","proof":["tail.filter(f).length <= tail.length = p(tail)","List.cons(head, tail) != List.cons(head, tail) or not f(head) or List.cons(head, tail).filter(f) = List.cons(head, tail.filter(f))","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","List.cons(head, tail.filter(f)) != List.cons(head, tail.filter(f)) or List.cons(head, tail.filter(f)).length = tail.filter(f).length.suc","not tail.length.suc < tail.filter(f).length.suc or tail.length < tail.filter(f).length","not tail.filter(f).length <= tail.length or not tail.length < tail.filter(f).length","List.cons(head, tail).filter(f).length <= List.cons(head, tail).length or List.cons(head, tail).length < List.cons(head, tail).filter(f).length","List.cons(head, tail).length = tail.length.suc","List.cons(head, tail.filter(f)).length = tail.filter(f).length.suc","List.cons(head, tail).length < List.cons(head, tail).filter(f).length","tail.filter(f).length <= tail.length","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).filter(f) = List.cons(head, tail.filter(f))","List.cons(head, tail).filter(f) = List.cons(head, tail.filter(f))","List.cons(head, tail).length < List.cons(head, tail.filter(f)).length","tail.length.suc < List.cons(head, tail.filter(f)).length","tail.length.suc < tail.filter(f).length.suc","not tail.length < tail.filter(f).length","tail.length < tail.filter(f).length"]}
{"goal":"List.cons(head, tail).filter(f).length <= List.cons(head, tail).length","proof":["tail.filter(f).length <= tail.length = p(tail)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).filter(f) = tail.filter(f) or f(head)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","not tail.length.suc < tail.filter(f).length.suc or tail.length < tail.filter(f).length","not tail.length.suc < tail.filter(f).length or tail.length.suc < tail.filter(f).length.suc","not tail.filter(f).length <= tail.length or not tail.length < tail.filter(f).length","List.cons(head, tail).filter(f).length <= List.cons(head, tail).length or List.cons(head, tail).length < List.cons(head, tail).filter(f).length","List.cons(head, tail).length = tail.length.suc","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).filter(f) = tail.filter(f)","List.cons(head, tail).filter(f) = tail.filter(f)","List.cons(head, tail).length < List.cons(head, tail).filter(f).length","tail.filter(f).length <= tail.length","List.cons(head, tail).length < tail.filter(f).length","tail.length.suc < tail.filter(f).length","not tail.length < tail.filter(f).length","tail.length.suc < tail.filter(f).length.suc","not tail.length.suc < tail.filter(f).length.suc"]}
{"goal":"p(List.cons(head, tail))","proof":["List.cons(head, tail).filter(f).length <= List.cons(head, tail).length = p(List.cons(head, tail))","not List.cons(head, tail).filter(f).length <= List.cons(head, tail).length"]}
{"goal":"filter_only_removes_elems","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","list.filter(f).length <= list.length = p(list)","not p(list)","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p))","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"p(List.nil[T], item)","proof":["item ∈ List.nil[T] or p(List.nil[T], item)","item ∈ List.nil[T]","not item ∈ List.nil[T] or List.nil[T] != List.nil[T]"]}
{"goal":"tail.filter(f).contains(item)","proof":["not item ∈ tail or not p(tail, item) or not f(item) or item ∈ tail.filter(f)"]}
{"goal":"List.cons(head, tail).filter(f) = List.cons(head, tail.filter(f))","proof":["List.cons(head, tail) != List.cons(head, tail) or not f(head) or List.cons(head, tail).filter(f) = List.cons(head, tail.filter(f))"]}
{"goal":"List.cons(head, tail).filter(f).contains(item)","proof":["not item ∈ List.cons(head, tail.filter(f))","not item ∈ tail.filter(f) or List.cons(head, tail.filter(f)) != List.cons(head, tail.filter(f)) or item ∈ List.cons(head, tail.filter(f)) or head = item","List.cons(head, tail.filter(f)) != List.cons(head, tail.filter(f)) or head != item or item ∈ List.cons(head, tail.filter(f))","head != item or item ∈ List.cons(head, tail.filter(f))","head != item","not item ∈ tail.filter(f) or item ∈ List.cons(head, tail.filter(f)) or head = item"]}
{"goal":"List.cons(head, tail).filter(f) = tail.filter(f)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).filter(f) = tail.filter(f) or f(head)","List.cons(head, tail) != List.cons(head, tail) or f(head)"]}
{"goal":"List.cons(head, tail).filter(f).contains(item)","proof":[]}
{"goal":"not tail.contains(item)","proof":[]}
{"goal":"List.cons(head, tail).filter(f) = List.cons(head, tail.filter(f))","proof":["List.cons(head, tail) != List.cons(head, tail) or not f(head) or List.cons(head, tail).filter(f) = List.cons(head, tail.filter(f))","f(head)","not f(head)"]}
{"goal":"List.cons(head, tail).filter(f).contains(item)","proof":["List.cons(head, tail).filter(f) != List.cons(item, tail.filter(f)) or item != item or item ∈ List.cons(head, tail).filter(f)","List.cons(head, tail).filter(f) = List.cons(item, tail.filter(f))","List.cons(head, tail).filter(f) != List.cons(item, tail.filter(f)) or item ∈ List.cons(head, tail).filter(f)"]}
{"goal":"p(List.cons(head, tail), item)","proof":["item ∈ List.cons(head, tail) or p(List.cons(head, tail), item)","not item ∈ List.cons(head, tail).filter(f) or p(List.cons(head, tail), item)","not item ∈ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or item ∈ tail or head = item","item ∈ List.cons(head, tail)","not item ∈ List.cons(head, tail).filter(f)","not item ∈ tail","head != item","not item ∈ List.cons(head, tail) or item ∈ tail or head = item"]}
{"goal":"filter_contains_and","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T], item) or p(s1, item) or p(x0, item) } and forall(x1: List[T]) { not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(x1, item) } }","not p(List.nil[T], item) or p(s1, item) or p(s1, item)","p(s1, item) or p(s1, item)","not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(list, item)","not p(List.cons(s0, s1), item) or p(list, item)","not p(s1, item) or p(List.cons(s0, s1), item)","not item ∈ list or not p(list, item) or not f(item) or item ∈ list.filter(f)","not p(list, item)","p(s1, item)","not p(List.cons(s0, s1), item)"]}
{"goal":"p(List.nil[T], item)","proof":["item ∈ List.nil[T].filter(f) or p(List.nil[T], item)","item ∈ List.nil[T].filter(f)","List.nil[T] != List.nil[T] or List.nil[T].filter(f) = List.nil[T]","not item ∈ List.nil[T] or List.nil[T] != List.nil[T]","not item ∈ List.nil[T]","List.nil[T].filter(f) = List.nil[T]"]}
{"goal":"f(item) and List.cons(head, tail).contains(item)","proof":["not item ∈ tail.filter(f) or not p(tail, item) or f(item)","not item ∈ tail.filter(f) or not p(tail, item) or item ∈ tail","not item ∈ tail or List.cons(head, tail) != List.cons(head, tail) or item ∈ List.cons(head, tail) or head = item","List.cons(head, tail) != List.cons(head, tail) or head != item or item ∈ List.cons(head, tail)","f(item)","not item ∈ List.cons(head, tail)","item ∈ tail","head != item or item ∈ List.cons(head, tail)","not item ∈ tail or item ∈ List.cons(head, tail) or head = item","head != item","head = item"]}
{"goal":"f(head)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).filter(f) = tail.filter(f) or f(head)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).filter(f) = tail.filter(f)","List.cons(head, tail).filter(f) = tail.filter(f)"]}
{"goal":"head = item","proof":["List.cons(head, tail) != List.cons(head, tail) or not f(head) or List.cons(head, tail).filter(f) = List.cons(head, tail.filter(f))","not item ∈ List.cons(head, tail).filter(f) or List.cons(head, tail).filter(f) != List.cons(head, tail.filter(f)) or item ∈ tail.filter(f) or head = item","List.cons(head, tail).filter(f) != List.cons(head, tail.filter(f)) or not item ∈ List.cons(head, tail).filter(f) or item ∈ tail.filter(f)","not f(head) or List.cons(head, tail).filter(f) = List.cons(head, tail.filter(f))","List.cons(head, tail).filter(f) != List.cons(head, tail.filter(f)) or item ∈ tail.filter(f)","List.cons(head, tail).filter(f) != List.cons(head, tail.filter(f))"]}
{"goal":"f(item) and List.cons(head, tail).contains(item)","proof":["f(item)","not item ∈ List.cons(head, tail)","not item ∈ List.cons(item, tail)","List.cons(item, tail) != List.cons(item, tail) or item != item or item ∈ List.cons(item, tail)","item != item or item ∈ List.cons(item, tail)"]}
{"goal":"f(item) and List.cons(head, tail).contains(item)","proof":["not item ∈ List.cons(head, tail)"]}
{"goal":"List.cons(head, tail).filter(f).contains(item) implies List.cons(head, tail).contains(item) and f(item)","proof":["not item ∈ List.cons(head, tail)"]}
{"goal":"p(List.cons(head, tail), item)","proof":["not item ∈ List.cons(head, tail) or not f(item) or p(List.cons(head, tail), item)","item ∈ List.cons(head, tail).filter(f) or p(List.cons(head, tail), item)","item ∈ List.cons(head, tail).filter(f)","f(item)","item ∈ List.cons(head, tail)","not item ∈ List.cons(head, tail)"]}
{"goal":"filter_contained_by_and","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T], item) or p(s1, item) or p(x0, item) } and forall(x1: List[T]) { not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(x1, item) } }","not p(List.nil[T], item) or p(s1, item) or p(s1, item)","p(s1, item) or p(s1, item)","not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(list, item)","not p(List.cons(s0, s1), item) or p(list, item)","not p(s1, item) or p(List.cons(s0, s1), item)","not item ∈ list.filter(f) or not p(list, item) or f(item)","not item ∈ list.filter(f) or not p(list, item) or item ∈ list","p(s1, item)","not p(list, item) or f(item)","not p(list, item) or item ∈ list","p(List.cons(s0, s1), item)","p(list, item)","f(item)","item ∈ list","not item ∈ list"]}
{"goal":"list.filter(f).contains(item) implies list.contains(item) and f(item)","proof":["not item ∈ list.filter(f) or item ∈ list","not item ∈ list.filter(f) or f(item)","f(item)","item ∈ list","not item ∈ list"]}
{"goal":"list.contains(item) and f(item) implies list.filter(f).contains(item)","proof":["not item ∈ list or not f(item) or item ∈ list.filter(f)"]}
{"goal":"filter_equivalent_to_and","proof":["f(item)","item ∈ list","item ∈ list.filter(f)","not item ∈ list.filter(f)"]}
{"goal":"f(List.nil[T])","proof":["List.nil[T].filter(filter) != List.nil[T] or f(List.nil[T])","List.nil[T].filter(filter) != List.nil[T]","List.nil[T] != List.nil[T] or List.nil[T].filter(filter) = List.nil[T]"]}
{"goal":"List.cons(head, tail).filter(filter) = List.cons(head, tail.filter(filter))","proof":["List.cons(head, tail) != List.cons(head, tail) or not filter(head) or List.cons(head, tail).filter(filter) = List.cons(head, tail.filter(filter))"]}
{"goal":"List.cons(head, tail).filter(filter) = tail.filter(filter)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).filter(filter) = tail.filter(filter) or filter(head)","List.cons(head, tail) != List.cons(head, tail) or filter(head)"]}
{"goal":"f(List.cons(head, tail))","proof":["List.cons(head, tail).filter(filter) != List.cons(head, tail) or f(List.cons(head, tail))","let s0: List[T] -> T satisfy { forall(x0: List[T]) { not f(x0) or s0(x0) ∈ x0 or x0.filter(filter) = x0 } and forall(x1: List[T]) { not filter(s0(x1)) or not f(x1) or x1.filter(filter) = x1 } and forall(x2: List[T], x3: T) { not x3 ∈ x2 or f(x2) or filter(x3) } and forall(x4: List[T]) { x4.filter(filter) != x4 or f(x4) } }","not head ∈ List.cons(head, tail) or f(List.cons(head, tail)) or filter(head)","not s0(tail) ∈ List.cons(head, List.nil[T]) + tail or f(List.cons(head, List.nil[T]) + tail) or filter(s0(tail))","not filter(s0(tail)) or not f(tail) or tail.filter(filter) = tail","not f(tail) or s0(tail) ∈ tail or tail.filter(filter) = tail","List.cons(head, List.nil[T]) != List.cons(head, List.nil[T]) or List.cons(head, List.nil[T]) + tail = List.cons(head, List.nil[T] + tail)","List.cons(head, tail) != List.cons(head, tail) or head != head or head ∈ List.cons(head, tail)","not s0(tail) ∈ tail or s0(tail) ∈ List.cons(head, List.nil[T]) + tail","List.nil[T] + tail = tail","not f(List.cons(head, List.nil[T] + tail))","not head ∈ List.cons(head, tail) or filter(head)","List.cons(head, tail).filter(filter) != List.cons(head, tail)","head != head or head ∈ List.cons(head, tail)","List.cons(head, List.nil[T]) + tail = List.cons(head, List.nil[T] + tail)","head ∈ List.cons(head, tail)","filter(head)","not filter(s0(tail)) or tail.filter(filter) = tail","s0(tail) ∈ tail or tail.filter(filter) = tail","List.cons(head, tail).filter(filter) = List.cons(head, tail.filter(filter))","List.cons(head, tail.filter(filter)) != List.cons(head, tail)","tail.filter(filter) != tail","not filter(s0(tail))","s0(tail) ∈ tail","not f(List.cons(head, List.nil[T]) + tail)","not s0(tail) ∈ List.cons(head, List.nil[T]) + tail or filter(s0(tail))","s0(tail) ∈ List.cons(head, List.nil[T]) + tail"]}
{"goal":"filter_of_super_is_self","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not f(List.nil[T]) or f(s1) or f(x0) } and forall(x1: List[T]) { not f(List.cons(s0, s1)) or not f(List.nil[T]) or f(x1) } }","not f(List.nil[T]) or f(s1) or f(s1)","f(s1) or f(s1)","let s2: List[T] -> T satisfy { forall(x2: List[T]) { not f(x2) or s2(x2) ∈ x2 or x2.filter(filter) = x2 } and forall(x3: List[T]) { not filter(s2(x3)) or not f(x3) or x3.filter(filter) = x3 } and forall(x4: List[T], x5: T) { not x5 ∈ x4 or f(x4) or filter(x5) } and forall(x6: List[T]) { x6.filter(filter) != x6 or f(x6) } }","not s2(list) ∈ list or filter(s2(list))","not f(List.cons(s0, s1)) or not f(List.nil[T]) or f(list)","not f(List.cons(s0, s1)) or f(list)","not f(s1) or f(List.cons(s0, s1))","not filter(s2(list)) or not f(list) or list.filter(filter) = list","not f(list) or s2(list) ∈ list or list.filter(filter) = list","f(s1)","not filter(s2(list)) or not f(list)","not f(list) or s2(list) ∈ list","f(List.cons(s0, s1))","f(list)","not filter(s2(list))","s2(list) ∈ list","not s2(list) ∈ list"]}
{"goal":"filter_of_self_is_self","proof":["let s0: (List[T], T -> Bool) -> T satisfy { forall(x0: List[T], x1: T -> Bool) { s0(x0, x1) ∈ x0 or x0.filter(x1) = x0 } and forall(x2: T -> Bool, x3: List[T]) { not x2(s0(x3, x2)) or x3.filter(x2) = x3 } }","s0(list, list.contains) ∈ list or list.filter(list.contains) = list","not s0(list, list.contains) ∈ list or list.filter(list.contains) = list","s0(list, list.contains) ∈ list","not s0(list, list.contains) ∈ list"]}
{"goal":"0.range = List.nil[Nat]","proof":["0 != 0 or 0.range = List.nil[Nat]"]}
{"goal":"List.nil[Nat].length = 0","proof":["List.nil[Nat] != List.nil[Nat] or List.nil[Nat].length = 0"]}
{"goal":"f(0)","proof":["0.range.length != 0 or f(0)","0.range.length = 0","0.range.length != 0"]}
{"goal":"x.suc.range = x.suc.range","proof":[]}
{"goal":"x.suc.range = x.range.append(x)","proof":["x.suc != x.suc or x.range.append(x) = x.suc.range"]}
{"goal":"x.suc.range = x.range + List.singleton(x)","proof":["x.range + List.singleton(x) = x.range.append(x)"]}
{"goal":"x.range.length + List.singleton(x).length = (x.range + List.singleton(x)).length","proof":["x.range.length + List.singleton(x).length = (x.range + List.singleton(x)).length"]}
{"goal":"x.range.length + List.singleton(x).length = x.suc.range.length","proof":["x.range.length + List.singleton(x).length != (x.range + List.singleton(x)).length"]}
{"goal":"x.range.length = x","proof":["not f(x) or x.range.length = x"]}
{"goal":"List.singleton(x).length = 1","proof":["List.cons(x, List.nil[Nat]) != List.cons(x, List.nil[Nat]) or List.cons(x, List.nil[Nat]).length = List.nil[Nat].length.suc","List.cons(x, List.nil[Nat]) = List.singleton(x)","List.cons(x, List.nil[Nat]).length != 1","List.nil[Nat].length.suc = 1","List.cons(x, List.nil[Nat]).length = List.nil[Nat].length.suc"]}
{"goal":"x + 1 = x.suc","proof":["x + 1 = 1 + x","1 + x != x.suc","1 + x = x.suc"]}
{"goal":"x + List.singleton(x).length = x.suc","proof":["x + 1 != x.suc"]}
{"goal":"x.range.length + List.singleton(x).length = x.suc","proof":["x + List.singleton(x).length != x.suc"]}
{"goal":"x.suc.range.length = x.suc","proof":["x.range.length + List.singleton(x).length != x.suc.range.length"]}
{"goal":"f(x.suc)","proof":["x.suc.range.length != x.suc or f(x.suc)"]}
{"goal":"f(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(s0(f).suc) or not f(0) or f(n)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(n)","not f(s0(f))","f(s0(f))"]}
{"goal":"length_range","proof":["not f(n) or n.range.length = n"]}
{"goal":"List.singleton(n).contains(n)","proof":["List.cons(n, List.nil[Nat]) != List.singleton(n) or n != n or n ∈ List.singleton(n)","List.cons(n, List.nil[Nat]) = List.singleton(n)","List.cons(n, List.nil[Nat]) != List.singleton(n) or n != n"]}
{"goal":"n.suc.range = n.range.append(n)","proof":["n.suc != n.suc or n.range.append(n) = n.suc.range"]}
{"goal":"n.suc.range.contains(n)","proof":["not n ∈ List.singleton(n) or n ∈ n.range + List.singleton(n)","n.range + List.singleton(n) = n.range.append(n)","not n ∈ n.range.append(n)","n ∈ n.range + List.singleton(n)"]}
{"goal":"suc_range_contains","proof":[]}
{"goal":"p(0)","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or not p(x1) or x0 ∈ x1.range } and forall(x2: Nat) { s0(x2) < x2 or p(x2) } and forall(x3: Nat) { not s0(x3) ∈ x3.range or p(x3) } }","s0(0) < 0 or p(0)","s0(0) < 0","not s0(0) < 0"]}
{"goal":"m.range.contains(x)","proof":["not x < m or not p(m) or x ∈ m.range"]}
{"goal":"m.suc.range.contains(x)","proof":["m.suc != m.suc or m.range.append(m) = m.suc.range","not x ∈ m.range or x ∈ m.range + List.singleton(m)","m.range + List.singleton(m) = m.range.append(m)","m.range.append(m) = m.suc.range","not x ∈ m.range.append(m)","x ∈ m.range + List.singleton(m)"]}
{"goal":"x = m","proof":["not x < m.suc or x < m or x = m"]}
{"goal":"m.suc.range.contains(m)","proof":["m ∈ m.suc.range"]}
{"goal":"m.suc.range.contains(x)","proof":["not m ∈ m.suc.range"]}
{"goal":"m.suc.range.contains(x)","proof":[]}
{"goal":"p(m.suc)","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or not p(x1) or x0 ∈ x1.range } and forall(x2: Nat) { s0(x2) < x2 or p(x2) } and forall(x3: Nat) { not s0(x3) ∈ x3.range or p(x3) } }","s0(m.suc) < m.suc or p(m.suc)","not s0(m.suc) ∈ m.suc.range or p(m.suc)","not s0(m.suc) < m.suc or s0(m.suc) ∈ m.suc.range","s0(m.suc) < m.suc","not s0(m.suc) ∈ m.suc.range","s0(m.suc) ∈ m.suc.range"]}
{"goal":"p(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not p(s0(p)) or p(s0(p).suc)","not p(s0(p).suc) or not p(0) or p(n)","not p(s0(p).suc)","not p(0) or p(s0(p)) or p(n)","not p(s0(p))","p(s0(p))"]}
{"goal":"range_contains_all_leq","proof":["let s0: Nat satisfy { s0 < n and not s0 ∈ n.range }","not s0 < n or not p(n) or s0 ∈ n.range"]}
{"goal":"p(0)","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x1 ∈ x0.range or not x1 >= x0 or not p(x0) } and forall(x2: Nat) { s0(x2) >= x2 or p(x2) } and forall(x3: Nat) { s0(x3) ∈ x3.range or p(x3) } }","s0(0) ∈ 0.range or p(0)","s0(0) ∈ 0.range","not s0(0) ∈ 0.range or 0.range != List.nil[Nat]","0 != 0 or 0.range = List.nil[Nat]","0.range != List.nil[Nat]","0.range = List.nil[Nat]"]}
{"goal":"x.suc.range.contains(x)","proof":["x ∈ x.suc.range"]}
{"goal":"not x.range.contains(x.suc)","proof":["not x.suc ∈ x.range or not x.suc >= x or not p(x)","not x.suc >= x","x <= x.suc = x.suc >= x","not x < x.suc or x <= x.suc","x < x.suc","not x <= x.suc"]}
{"goal":"not x.range.contains(y)","proof":["not y ∈ x.range or not y >= x or not p(x)","not y >= x","not y < x or y < x.suc","x <= y = y >= x","x.suc <= y = y >= x.suc","not x.suc <= y or not y < x.suc","x <= y or y < x","x.suc <= y","not x <= y","not y < x.suc","y < x","not y < x"]}
{"goal":"not List.singleton(x).contains(y)","proof":["List.cons(x, List.nil[Nat]) != List.singleton(x) or not y ∈ List.singleton(x) or y ∈ List.nil[Nat] or y = x","not x.suc <= x or x.suc < x or x.suc = x","not x.suc < x or x.suc ∈ x.range","x.suc <= y = y >= x.suc","not y ∈ List.nil[Nat] or List.nil[Nat] != List.nil[Nat]","List.cons(x, List.nil[Nat]) = List.singleton(x)","x.suc != x","not y ∈ List.nil[Nat]","x.suc <= y","not x.suc < x","List.cons(x, List.nil[Nat]) != List.singleton(x) or y ∈ List.nil[Nat] or y = x","y = x","not x.suc <= x","x.suc <= x"]}
{"goal":"x.suc.range = x.range + List.singleton(x)","proof":["x.suc != x.suc or x.range.append(x) = x.suc.range","x.range + List.singleton(x) = x.range.append(x)","x.range.append(x) != x.suc.range"]}
{"goal":"not x.suc.range.contains(y)","proof":["not y ∈ x.range + List.singleton(x) or y ∈ x.range or y ∈ List.singleton(x)","y ∈ x.range + List.singleton(x)"]}
{"goal":"p(x.suc)","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x1 ∈ x0.range or not x1 >= x0 or not p(x0) } and forall(x2: Nat) { s0(x2) >= x2 or p(x2) } and forall(x3: Nat) { s0(x3) ∈ x3.range or p(x3) } }","s0(x.suc) >= x.suc or p(x.suc)","s0(x.suc) ∈ x.suc.range or p(x.suc)","not s0(x.suc) ∈ x.suc.range or not s0(x.suc) >= x.suc","s0(x.suc) >= x.suc","s0(x.suc) ∈ x.suc.range","not s0(x.suc) ∈ x.suc.range"]}
{"goal":"range_does_not_contain_geq","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not p(s0(p)) or p(s0(p).suc)","not n ∈ m.range or not n >= m or not p(m)","not p(m)","not p(s0(p).suc) or not p(0) or p(m)","not p(0) or p(s0(p)) or p(m)","p(s0(p)) or p(m)","p(s0(p))","not p(s0(p).suc)","p(s0(p).suc)"]}
{"goal":"p(List.nil[T], item)","proof":["List.nil[T].remove_elem(item) != List.nil[T] or p(List.nil[T], item)","List.nil[T].remove_elem(item) != List.nil[T]","List.nil[T] != List.nil[T] or List.nil[T].remove_elem(item) = List.nil[T]"]}
{"goal":"head != item","proof":["List.cons(head, tail) != List.cons(head, tail) or head != item or item ∈ List.cons(head, tail)","List.cons(head, tail) != List.cons(head, tail) or item ∈ List.cons(head, tail)","item ∈ List.cons(head, tail)"]}
{"goal":"not tail.contains(item)","proof":["not item ∈ tail or List.cons(head, tail) != List.cons(head, tail) or item ∈ List.cons(head, tail) or head = item","List.cons(head, tail) != List.cons(head, tail) or item ∈ List.cons(head, tail) or head = item","List.cons(head, tail) != List.cons(head, tail) or item ∈ List.cons(head, tail)"]}
{"goal":"List.cons(head, tail).remove_elem(item) = List.cons(head, tail)","proof":["not p(tail, item) or tail.remove_elem(item) = tail or item ∈ tail","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).remove_elem(item) = List.cons(head, tail.remove_elem(item)) or head = item","tail.remove_elem(item) = tail","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).remove_elem(item) = List.cons(head, tail.remove_elem(item))","List.cons(head, tail).remove_elem(item) = List.cons(head, tail.remove_elem(item))"]}
{"goal":"p(List.cons(head, tail), item)","proof":["not item ∈ List.cons(head, tail) or p(List.cons(head, tail), item)","List.cons(head, tail).remove_elem(item) != List.cons(head, tail) or p(List.cons(head, tail), item)","not item ∈ List.cons(head, tail)","List.cons(head, tail).remove_elem(item) != List.cons(head, tail)","List.cons(head, tail).remove_elem(item) = List.cons(head, tail)"]}
{"goal":"remove_element_not_in_list","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T], item) or p(s1, item) or p(x0, item) } and forall(x1: List[T]) { not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(x1, item) } }","not p(List.nil[T], item) or p(s1, item) or p(s1, item)","p(s1, item) or p(s1, item)","not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(list, item)","not p(List.cons(s0, s1), item) or p(list, item)","not p(s1, item) or p(List.cons(s0, s1), item)","not p(list, item) or list.remove_elem(item) = list or item ∈ list","not p(list, item)","p(s1, item)","not p(List.cons(s0, s1), item)"]}
{"goal":"p(List.nil[T], item)","proof":["item ∈ List.nil[T] or p(List.nil[T], item)","item ∈ List.nil[T]","not item ∈ List.nil[T] or List.nil[T] != List.nil[T]"]}
{"goal":"cons_list.remove_elem(item) = tail.remove_elem(item)","proof":["List.cons(item, tail) = cons_list","List.cons(item, tail) != cons_list or item != item or cons_list.remove_elem(item) = tail.remove_elem(item)","List.cons(item, tail) != cons_list or item != item"]}
{"goal":"not cons_list.remove_elem(item).contains(item)","proof":["not item ∈ tail.remove_elem(item) or not item ∈ tail or not p(tail, item)","item ∈ tail.remove_elem(item)","not item ∈ tail","tail.remove_elem(item) = tail or item ∈ tail","tail.remove_elem(item) = tail"]}
{"goal":"cons_list.remove_elem(item) = List.cons(head, tail.remove_elem(item))","proof":["List.cons(head, tail) != cons_list or List.cons(head, tail.remove_elem(item)) = cons_list.remove_elem(item) or head = item"]}
{"goal":"not tail.remove_elem(item).contains(item)","proof":["not item ∈ tail.remove_elem(item) or not item ∈ tail or not p(tail, item)","not item ∈ tail","not item ∈ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or item ∈ tail or head = item","item ∈ List.cons(head, tail)","not item ∈ List.cons(head, tail) or item ∈ tail or head = item"]}
{"goal":"not cons_list.remove_elem(item).contains(item)","proof":["not item ∈ cons_list.remove_elem(item) or List.cons(head, tail.remove_elem(item)) != cons_list.remove_elem(item) or item ∈ tail.remove_elem(item) or head = item","List.cons(head, tail.remove_elem(item)) != cons_list.remove_elem(item) or not item ∈ cons_list.remove_elem(item) or item ∈ tail.remove_elem(item)"]}
{"goal":"not cons_list.remove_elem(item).contains(item)","proof":[]}
{"goal":"p(List.cons(head, tail), item)","proof":["not p(cons_list, item)","item ∈ cons_list or p(cons_list, item)","item ∈ cons_list.remove_elem(item) or p(cons_list, item)","item ∈ cons_list","item ∈ cons_list.remove_elem(item)","not item ∈ cons_list.remove_elem(item)"]}
{"goal":"remove_element_removes_element","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T], item) or p(s1, item) or p(x0, item) } and forall(x1: List[T]) { not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(x1, item) } }","not p(List.nil[T], item) or p(s1, item) or p(s1, item)","p(s1, item) or p(s1, item)","not p(List.cons(s0, s1), item) or not p(List.nil[T], item) or p(list, item)","not p(List.cons(s0, s1), item) or p(list, item)","not p(s1, item) or p(List.cons(s0, s1), item)","not item ∈ list.remove_elem(item) or not item ∈ list or not p(list, item)","not p(list, item)","p(s1, item)","not p(List.cons(s0, s1), item)"]}
{"goal":"p(List.nil[T], removed_item, elem)","proof":["elem ∈ List.nil[T].remove_elem(removed_item) != elem ∈ List.nil[T] or p(List.nil[T], removed_item, elem)","List.nil[T] != List.nil[T] or List.nil[T].remove_elem(removed_item) = List.nil[T]","List.nil[T].remove_elem(removed_item) != List.nil[T] or p(List.nil[T], removed_item, elem)","List.nil[T].remove_elem(removed_item) != List.nil[T]"]}
{"goal":"p(cons_list, removed_item, elem)","proof":["elem ∈ cons_list.remove_elem(removed_item) != elem ∈ cons_list or p(cons_list, removed_item, elem)","cons_list.remove_elem(removed_item) = cons_list or removed_item ∈ cons_list","cons_list.remove_elem(removed_item) != cons_list or p(cons_list, removed_item, elem)","cons_list.remove_elem(removed_item) = cons_list","cons_list.remove_elem(removed_item) != cons_list"]}
{"goal":"cons_list.remove_elem(removed_item) = tail.remove_elem(removed_item)","proof":["List.cons(removed_item, tail) = cons_list","List.cons(removed_item, tail) != cons_list or removed_item != removed_item or tail.remove_elem(removed_item) = cons_list.remove_elem(removed_item)","List.cons(removed_item, tail) != cons_list or removed_item != removed_item"]}
{"goal":"tail.remove_elem(removed_item).contains(elem) = tail.contains(elem)","proof":["not p(tail, removed_item, elem) or elem ∈ tail.remove_elem(removed_item) = elem ∈ tail or elem = removed_item"]}
{"goal":"cons_list.contains(elem) = tail.contains(elem)","proof":["elem ∈ tail or elem ∈ cons_list","not elem ∈ tail or not elem ∈ cons_list","List.cons(removed_item, tail) = cons_list","not elem ∈ tail or List.cons(head, tail) != cons_list or elem ∈ cons_list or head = elem","not elem ∈ cons_list or List.cons(removed_item, tail) != cons_list or elem ∈ tail or elem = removed_item","head != elem","not elem ∈ tail or elem ∈ cons_list or head = elem","not elem ∈ cons_list or List.cons(removed_item, tail) != cons_list or elem ∈ tail","not elem ∈ cons_list or elem ∈ tail","not elem ∈ cons_list","elem ∈ tail","not elem ∈ tail"]}
{"goal":"cons_list.remove_elem(removed_item).contains(elem) = cons_list.contains(elem)","proof":[]}
{"goal":"p(cons_list, removed_item, elem)","proof":["elem ∈ cons_list.remove_elem(removed_item) != elem ∈ cons_list or p(cons_list, removed_item, elem)"]}
{"goal":"cons_list.remove_elem(removed_item).contains(elem) = (head = elem) or tail.remove_elem(removed_item).contains(elem)","proof":["List.cons(head, tail) != cons_list or List.cons(head, tail.remove_elem(removed_item)) = cons_list.remove_elem(removed_item) or head = removed_item","not elem ∈ cons_list.remove_elem(removed_item) or List.cons(head, tail.remove_elem(removed_item)) != cons_list.remove_elem(removed_item) or elem ∈ tail.remove_elem(removed_item) or head = elem","List.cons(head, tail.remove_elem(removed_item)) != cons_list.remove_elem(removed_item) or head != head or head ∈ cons_list.remove_elem(removed_item)","List.cons(head, tail.remove_elem(removed_item)) != cons_list.remove_elem(removed_item) or head ∈ cons_list.remove_elem(removed_item)","List.cons(head, tail.remove_elem(removed_item)) != cons_list.remove_elem(removed_item) or not elem ∈ cons_list.remove_elem(removed_item) or head = elem","List.cons(head, tail.remove_elem(removed_item)) = cons_list.remove_elem(removed_item) or head = removed_item","List.cons(head, tail.remove_elem(removed_item)) = cons_list.remove_elem(removed_item)","not elem ∈ cons_list.remove_elem(removed_item) or head = elem","head = elem","not elem ∈ cons_list.remove_elem(removed_item)","head ∈ cons_list.remove_elem(removed_item)","not head ∈ cons_list.remove_elem(removed_item)"]}
{"goal":"cons_list.remove_elem(removed_item).contains(elem)","proof":["List.cons(head, tail) != cons_list or List.cons(head, tail.remove_elem(removed_item)) = cons_list.remove_elem(removed_item) or head = removed_item","List.cons(head, tail.remove_elem(removed_item)) != cons_list.remove_elem(removed_item) or head != elem or elem ∈ cons_list.remove_elem(removed_item)","List.cons(head, tail.remove_elem(removed_item)) != cons_list.remove_elem(removed_item) or head != elem","List.cons(head, tail.remove_elem(removed_item)) != cons_list.remove_elem(removed_item)","List.cons(head, tail.remove_elem(removed_item)) = cons_list.remove_elem(removed_item) or head = removed_item"]}
{"goal":"cons_list.contains(elem)","proof":["List.cons(elem, tail) = cons_list","List.cons(elem, tail) != cons_list or elem != elem or elem ∈ cons_list","List.cons(elem, tail) != cons_list or elem != elem"]}
{"goal":"p(cons_list, removed_item, elem)","proof":["elem ∈ cons_list.remove_elem(removed_item) != elem ∈ cons_list or p(cons_list, removed_item, elem)","not elem ∈ cons_list.remove_elem(removed_item) or not elem ∈ cons_list or p(cons_list, removed_item, elem)"]}
{"goal":"tail.remove_elem(removed_item).contains(elem) = tail.contains(elem)","proof":["not p(tail, removed_item, elem) or elem ∈ tail.remove_elem(removed_item) = elem ∈ tail or elem = removed_item"]}
{"goal":"cons_list.contains(elem) = tail.contains(elem)","proof":["elem ∈ tail or elem ∈ cons_list","not elem ∈ tail or List.cons(head, tail) != List.cons(head, tail) or elem ∈ List.cons(head, tail) or head = elem","not elem ∈ cons_list or List.cons(head, tail) != cons_list or elem ∈ tail or head = elem","elem ∈ List.cons(head, tail) != elem ∈ tail","not elem ∈ tail or elem ∈ List.cons(head, tail) or head = elem","not elem ∈ cons_list or elem ∈ tail or head = elem","not elem ∈ cons_list or elem ∈ tail","elem ∈ tail","not elem ∈ List.cons(head, tail)"]}
{"goal":"cons_list.remove_elem(removed_item).contains(elem) = tail.remove_elem(removed_item).contains(elem)","proof":["elem ∈ tail.remove_elem(removed_item) or elem ∈ cons_list.remove_elem(removed_item)","not elem ∈ tail.remove_elem(removed_item) or not elem ∈ cons_list.remove_elem(removed_item)","not elem ∈ cons_list.remove_elem(removed_item)","elem ∈ tail.remove_elem(removed_item)","List.cons(head, tail) != cons_list or List.cons(head, tail.remove_elem(removed_item)) = cons_list.remove_elem(removed_item) or head = removed_item","not elem ∈ tail.remove_elem(removed_item) or List.cons(head, tail.remove_elem(removed_item)) != cons_list.remove_elem(removed_item) or elem ∈ cons_list.remove_elem(removed_item) or head = elem","List.cons(head, tail.remove_elem(removed_item)) != cons_list.remove_elem(removed_item) or not elem ∈ tail.remove_elem(removed_item) or elem ∈ cons_list.remove_elem(removed_item)","List.cons(head, tail.remove_elem(removed_item)) != cons_list.remove_elem(removed_item) or not elem ∈ tail.remove_elem(removed_item)","List.cons(head, tail.remove_elem(removed_item)) = cons_list.remove_elem(removed_item) or head = removed_item","List.cons(head, tail.remove_elem(removed_item)) != cons_list.remove_elem(removed_item)","List.cons(head, tail.remove_elem(removed_item)) = cons_list.remove_elem(removed_item)"]}
{"goal":"p(cons_list, removed_item, elem)","proof":["elem ∈ cons_list.remove_elem(removed_item) != elem ∈ cons_list or p(cons_list, removed_item, elem)","elem ∈ cons_list.remove_elem(removed_item) = elem ∈ tail","elem ∈ cons_list.remove_elem(removed_item) != elem ∈ cons_list","elem ∈ cons_list.remove_elem(removed_item) = elem ∈ cons_list"]}
{"goal":"cons_list.remove_elem(removed_item).contains(elem) = cons_list.contains(elem)","proof":["not p(cons_list, removed_item, elem) or elem ∈ cons_list.remove_elem(removed_item) = elem ∈ cons_list or elem = removed_item"]}
{"goal":"p(cons_list, removed_item, elem)","proof":[]}
{"goal":"p(cons_list, removed_item, elem)","proof":[]}
{"goal":"p(List.cons(head, tail), removed_item, elem)","proof":[]}
{"goal":"p(list, removed_item, elem)","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T], removed_item, elem) or p(s1, removed_item, elem) or p(x0, removed_item, elem) } and forall(x1: List[T]) { not p(List.cons(s0, s1), removed_item, elem) or not p(List.nil[T], removed_item, elem) or p(x1, removed_item, elem) } }","not p(List.nil[T], removed_item, elem) or p(s1, removed_item, elem) or p(list, removed_item, elem)","p(s1, removed_item, elem) or p(list, removed_item, elem)","p(s1, removed_item, elem)","not p(List.cons(s0, s1), removed_item, elem) or not p(List.nil[T], removed_item, elem) or p(list, removed_item, elem)","not p(List.cons(s0, s1), removed_item, elem) or p(list, removed_item, elem)","not p(s1, removed_item, elem) or p(List.cons(s0, s1), removed_item, elem)","not p(List.cons(s0, s1), removed_item, elem)"]}
{"goal":"remove_element_removes_no_other_elements","proof":["not p(list, removed_item, elem) or elem ∈ list.remove_elem(removed_item) = elem ∈ list or elem = removed_item"]}
{"goal":"p(List.nil[T])","proof":["item ∈ List.nil[T] or p(List.nil[T])","item ∈ List.nil[T]","not item ∈ List.nil[T] or List.nil[T] != List.nil[T]"]}
{"goal":"List.cons(head, tail).unique = tail.unique","proof":["not head ∈ tail or List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = tail.unique","List.cons(head, tail) != List.cons(head, tail) or not head ∈ tail"]}
{"goal":"List.cons(head, tail).unique.remove_elem(item).length + 1 = List.cons(head, tail).unique.length","proof":["not item ∈ tail or not p(tail) or tail.unique.remove_elem(item).length + 1 = tail.unique.length","tail.unique.remove_elem(item).length + 1 != List.cons(head, tail).unique.length","item ∈ List.cons(head, tail).unique = item ∈ List.cons(head, tail)","item ∈ tail.unique = item ∈ tail","tail.unique.remove_elem(item).length + 1 != tail.unique.length","not item ∈ tail"]}
{"goal":"List.cons(head, tail).unique = List.cons(head, tail.unique)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail"]}
{"goal":"not tail.contains(item)","proof":[]}
{"goal":"List.cons(head, tail).unique.remove_elem(item) = tail.unique","proof":["List.cons(head, tail.unique) != List.cons(head, tail.unique) or head != head or List.cons(head, tail.unique).remove_elem(head) = tail.unique.remove_elem(head)","tail.unique.remove_elem(head) = tail.unique or head ∈ tail.unique","head ∈ tail.unique = head ∈ tail","List.cons(head, tail).unique.remove_elem(head) != tail.unique","not head ∈ tail.unique","List.cons(head, tail.unique).remove_elem(head) != tail.unique","head != head or List.cons(head, tail.unique).remove_elem(head) = tail.unique.remove_elem(head)","List.cons(head, tail.unique).remove_elem(head) = tail.unique.remove_elem(head)","tail.unique.remove_elem(head) = tail.unique","tail.unique.remove_elem(head) != tail.unique"]}
{"goal":"List.cons(head, tail).unique.remove_elem(item).length + 1 = List.cons(head, tail).unique.length","proof":["List.cons(head, tail).unique.length != tail.unique.length + 1","List.cons(head, tail).unique != List.cons(head, tail.unique) or List.cons(head, tail).unique.length = tail.unique.length.suc","tail.unique.length + 1 = tail.unique.length.suc","List.cons(head, tail).unique.length = tail.unique.length.suc","List.cons(head, tail).unique.length != tail.unique.length.suc"]}
{"goal":"tail.contains(item)","proof":["not item ∈ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or item ∈ tail or head = item","not item ∈ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or head = item","List.cons(head, tail) != List.cons(head, tail) or not item ∈ List.cons(head, tail)"]}
{"goal":"List.cons(head, tail).unique.remove_elem(item) = List.cons(head, tail.unique.remove_elem(item))","proof":["List.cons(head, tail).unique != List.cons(head, tail.unique) or List.cons(head, tail).unique.remove_elem(item) = List.cons(head, tail.unique.remove_elem(item)) or head = item"]}
{"goal":"List.cons(head, tail).unique.remove_elem(item).length + 1 = List.cons(head, tail).unique.length","proof":["not item ∈ tail or not p(tail) or tail.unique.remove_elem(item).length + 1 = tail.unique.length","List.cons(head, tail.unique.remove_elem(item)).length + 1 != List.cons(head, tail).unique.length","List.cons(head, tail).unique != List.cons(head, tail.unique) or List.cons(head, tail).unique.length = tail.unique.length.suc","List.cons(head, tail.unique.remove_elem(item)) != List.cons(head, tail.unique.remove_elem(item)) or List.cons(head, tail.unique.remove_elem(item)).length = tail.unique.remove_elem(item).length.suc","tail.unique.remove_elem(item).length.suc + 1 = (tail.unique.remove_elem(item).length + 1).suc","List.cons(head, tail.unique.remove_elem(item)).length = tail.unique.remove_elem(item).length.suc","tail.unique.remove_elem(item).length.suc + 1 != List.cons(head, tail).unique.length","List.cons(head, tail).unique.length = tail.unique.length.suc","(tail.unique.remove_elem(item).length + 1).suc != List.cons(head, tail).unique.length","tail.unique.remove_elem(item).length + 1 = tail.unique.length"]}
{"goal":"p(List.cons(head, tail))","proof":["item ∈ List.cons(head, tail) or p(List.cons(head, tail))","List.cons(head, tail).unique.remove_elem(item).length + 1 != List.cons(head, tail).unique.length or p(List.cons(head, tail))","item ∈ List.cons(head, tail)","List.cons(head, tail).unique.remove_elem(item).length + 1 != List.cons(head, tail).unique.length","List.cons(head, tail).unique.remove_elem(item).length + 1 = List.cons(head, tail).unique.length"]}
{"goal":"remove_element_in_unique_equals_length_minus_one","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not item ∈ list or not p(list) or list.unique.remove_elem(item).length + 1 = list.unique.length","not p(list)","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p)) or p(list)","p(s1(p))","not p(List.cons(s0(p), s1(p))) or p(list)","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"p(List.nil[T], elem)","proof":["List.nil[T].unique.remove_elem(elem) != List.nil[T].remove_elem(elem).unique or p(List.nil[T], elem)","List.nil[T] != List.nil[T] or List.nil[T].remove_elem(elem) = List.nil[T]","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]","List.nil[T].unique = List.nil[T]","List.nil[T].unique.remove_elem(elem) != List.nil[T].remove_elem(elem).unique","List.nil[T].remove_elem(elem) = List.nil[T]"]}
{"goal":"List.cons(head, tail).unique.remove_elem(elem) = tail.unique.remove_elem(elem)","proof":["List.cons(head, tail).unique != tail.unique","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail","List.cons(head, tail).unique != List.cons(head, tail.unique) or head != elem or List.cons(head, tail).unique.remove_elem(elem) = tail.unique.remove_elem(elem)","not head ∈ tail or List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = tail.unique","List.cons(head, tail).unique != List.cons(head, tail.unique) or head != elem","not head ∈ tail or List.cons(head, tail).unique = tail.unique","not head ∈ tail","List.cons(head, tail).unique != List.cons(head, tail.unique)"]}
{"goal":"List.cons(head, tail).remove_elem(elem) = tail.remove_elem(elem)","proof":["List.cons(head, tail) != List.cons(head, tail) or head != elem or List.cons(head, tail).remove_elem(elem) = tail.remove_elem(elem)","List.cons(head, tail) != List.cons(head, tail) or head != elem"]}
{"goal":"p(List.cons(head, tail), elem)","proof":["List.cons(head, tail).unique.remove_elem(elem) != List.cons(head, tail).remove_elem(elem).unique or p(List.cons(head, tail), elem)","not p(tail, elem) or tail.unique.remove_elem(elem) = tail.remove_elem(elem).unique","List.cons(head, tail).unique.remove_elem(elem) != List.cons(head, tail).remove_elem(elem).unique","List.cons(head, tail).unique.remove_elem(elem) != tail.remove_elem(elem).unique","tail.unique.remove_elem(elem) = tail.remove_elem(elem).unique","tail.unique.remove_elem(elem) != tail.remove_elem(elem).unique"]}
{"goal":"List.cons(head, tail).remove_elem(elem).unique = List.cons(head, tail.remove_elem(elem)).unique","proof":["List.cons(head, tail).remove_elem(elem) != List.cons(head, tail.remove_elem(elem))","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).remove_elem(elem) = List.cons(head, tail.remove_elem(elem)) or head = elem"]}
{"goal":"p(List.cons(head, tail), elem)","proof":["List.cons(head, tail).unique.remove_elem(elem) != List.cons(head, tail).remove_elem(elem).unique or p(List.cons(head, tail), elem)","not p(tail, elem) or tail.unique.remove_elem(elem) = tail.remove_elem(elem).unique","not head ∈ tail or List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = tail.unique","not head ∈ tail.remove_elem(elem) or List.cons(head, tail.remove_elem(elem)) != List.cons(head, tail.remove_elem(elem)) or List.cons(head, tail.remove_elem(elem)).unique = tail.remove_elem(elem).unique","head ∈ tail.remove_elem(elem) = head ∈ tail or head = elem","head ∈ tail.remove_elem(elem) = head ∈ tail","not head ∈ tail or List.cons(head, tail).unique = tail.unique","not head ∈ tail.remove_elem(elem) or List.cons(head, tail.remove_elem(elem)).unique = tail.remove_elem(elem).unique","not head ∈ tail or head ∈ tail.remove_elem(elem)","head ∈ tail.remove_elem(elem)","List.cons(head, tail).unique.remove_elem(elem) != List.cons(head, tail).remove_elem(elem).unique","List.cons(head, tail).unique = tail.unique","tail.unique.remove_elem(elem) = tail.remove_elem(elem).unique","List.cons(head, tail).remove_elem(elem).unique != tail.unique.remove_elem(elem)","List.cons(head, tail.remove_elem(elem)).unique != tail.unique.remove_elem(elem)","List.cons(head, tail.remove_elem(elem)).unique = tail.remove_elem(elem).unique","List.cons(head, tail.remove_elem(elem)).unique != tail.remove_elem(elem).unique"]}
{"goal":"p(List.cons(head, tail), elem)","proof":["List.cons(head, tail).unique.remove_elem(elem) != List.cons(head, tail).remove_elem(elem).unique or p(List.cons(head, tail), elem)","not p(tail, elem) or tail.unique.remove_elem(elem) = tail.remove_elem(elem).unique","List.cons(head, tail.unique) != List.cons(head, tail.unique) or List.cons(head, tail.unique).remove_elem(elem) = List.cons(head, tail.unique.remove_elem(elem)) or head = elem","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail","List.cons(head, tail.remove_elem(elem)) != List.cons(head, tail.remove_elem(elem)) or List.cons(head, tail.remove_elem(elem)).unique = List.cons(head, tail.remove_elem(elem).unique) or head ∈ tail.remove_elem(elem)","head ∈ tail.remove_elem(elem) = head ∈ tail or head = elem","head ∈ tail.remove_elem(elem) = head ∈ tail","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique)","List.cons(head, tail).unique = List.cons(head, tail.unique)","not head ∈ tail.remove_elem(elem) or head ∈ tail","not head ∈ tail.remove_elem(elem)","List.cons(head, tail.remove_elem(elem)).unique = List.cons(head, tail.remove_elem(elem).unique) or head ∈ tail.remove_elem(elem)","List.cons(head, tail.unique) != List.cons(head, tail.unique) or List.cons(head, tail.unique).remove_elem(elem) = List.cons(head, tail.unique.remove_elem(elem))","List.cons(head, tail).unique.remove_elem(elem) != List.cons(head, tail).remove_elem(elem).unique","List.cons(head, tail.unique).remove_elem(elem) = List.cons(head, tail.unique.remove_elem(elem))","tail.unique.remove_elem(elem) = tail.remove_elem(elem).unique","List.cons(head, tail.unique).remove_elem(elem) != List.cons(head, tail).remove_elem(elem).unique","List.cons(head, tail).remove_elem(elem).unique != List.cons(head, tail.unique.remove_elem(elem))","List.cons(head, tail.remove_elem(elem)).unique != List.cons(head, tail.unique.remove_elem(elem))","List.cons(head, tail.remove_elem(elem)).unique = List.cons(head, tail.remove_elem(elem).unique)","List.cons(head, tail.remove_elem(elem)).unique != List.cons(head, tail.remove_elem(elem).unique)"]}
{"goal":"p(List.cons(head, tail), elem)","proof":[]}
{"goal":"p(List.cons(head, tail), elem)","proof":[]}
{"goal":"p(list, elem)","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T], elem) or p(s1, elem) or p(x0, elem) } and forall(x1: List[T]) { not p(List.cons(s0, s1), elem) or not p(List.nil[T], elem) or p(x1, elem) } }","not p(List.nil[T], elem) or p(s1, elem) or p(list, elem)","p(s1, elem) or p(list, elem)","p(s1, elem)","not p(List.cons(s0, s1), elem) or not p(List.nil[T], elem) or p(list, elem)","not p(List.cons(s0, s1), elem) or p(list, elem)","not p(s1, elem) or p(List.cons(s0, s1), elem)","not p(List.cons(s0, s1), elem)"]}
{"goal":"unique_comm_remove_elem","proof":["not p(list, elem) or list.unique.remove_elem(elem) = list.remove_elem(elem).unique"]}
{"goal":"p(List.nil[T])","proof":["let s0: List[T] -> List[T] satisfy { forall(x0: List[T], x1: List[T]) { not p(x0) or pc(x0, x1) } and forall(x2: List[T]) { not pc(x2, s0(x2)) or p(x2) } }","not pc(List.nil[T], s0(List.nil[T])) or p(List.nil[T])","not List.nil[T].unique.length <= s0(List.nil[T]).unique.length or pc(List.nil[T], s0(List.nil[T]))","not pc(List.nil[T], s0(List.nil[T]))","0 <= s0(List.nil[T]).unique.length or s0(List.nil[T]).unique.length < 0","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]","List.nil[T] != List.nil[T] or List.nil[T].length = 0","not s0(List.nil[T]).unique.length < 0","List.nil[T].length = 0","List.nil[T].unique = List.nil[T]","not List.nil[T].unique.length <= s0(List.nil[T]).unique.length","not List.nil[T].length <= s0(List.nil[T]).unique.length","not 0 <= s0(List.nil[T]).unique.length"]}
{"goal":"c.contains(head)","proof":["not is_contained(List.cons(head, tail).contains, c.contains) or not head ∈ List.cons(head, tail) or head ∈ c","List.cons(head, tail) != List.cons(head, tail) or head != head or head ∈ List.cons(head, tail)","head != head or head ∈ List.cons(head, tail)","head ∈ List.cons(head, tail)","not head ∈ List.cons(head, tail) or head ∈ c"]}
{"goal":"List.cons(head, tail).unique = tail.unique","proof":["not head ∈ tail or List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = tail.unique","List.cons(head, tail) != List.cons(head, tail) or not head ∈ tail"]}
{"goal":"List.cons(head, tail).unique.length = tail.unique.length","proof":["List.cons(head, tail).unique != tail.unique"]}
{"goal":"is_contained(tail.contains, c.contains)","proof":["let s0: (T -> Bool, T -> Bool) -> T satisfy { forall(x0: T -> Bool, x1: T -> Bool, x2: T) { not is_contained(x0, x1) or not x0(x2) or x1(x2) } and forall(x3: T -> Bool, x4: T -> Bool) { x3(s0(x3, x4)) or is_contained(x3, x4) } and forall(x5: T -> Bool, x6: T -> Bool) { not x5(s0(x6, x5)) or is_contained(x6, x5) } }","not s0(tail.contains, c.contains) ∈ c or is_contained(tail.contains, c.contains)","s0(tail.contains, c.contains) ∈ tail or is_contained(tail.contains, c.contains)","not is_contained(List.cons(head, tail).contains, c.contains) or not s0(tail.contains, c.contains) ∈ List.cons(head, tail) or s0(tail.contains, c.contains) ∈ c","s0(tail.contains, c.contains) ∈ List.cons(head, tail).unique = s0(tail.contains, c.contains) ∈ List.cons(head, tail)","s0(tail.contains, c.contains) ∈ tail.unique = s0(tail.contains, c.contains) ∈ tail","s0(tail.contains, c.contains) ∈ tail","not s0(tail.contains, c.contains) ∈ c","not s0(tail.contains, c.contains) ∈ List.cons(head, tail) or s0(tail.contains, c.contains) ∈ c","not s0(tail.contains, c.contains) ∈ List.cons(head, tail)"]}
{"goal":"tail.unique.length <= c.unique.length","proof":["not p(tail) or pc(tail, c)","not is_contained(tail.contains, c.contains) or not pc(tail, c) or tail.unique.length <= c.unique.length","not pc(tail, c)"]}
{"goal":"pc(List.cons(head, tail), c)","proof":["not List.cons(head, tail).unique.length <= c.unique.length or pc(List.cons(head, tail), c)","List.cons(head, tail).unique.length <= c.unique.length","not List.cons(head, tail).unique.length <= c.unique.length"]}
{"goal":"c.contains(head)","proof":["not is_contained(List.cons(head, tail).contains, c.contains) or not head ∈ List.cons(head, tail) or head ∈ c","List.cons(head, tail) != List.cons(head, tail) or head != head or head ∈ List.cons(head, tail)","head != head or head ∈ List.cons(head, tail)","head ∈ List.cons(head, tail)","not head ∈ List.cons(head, tail) or head ∈ c"]}
{"goal":"List.cons(head, tail).unique = List.cons(head, tail.unique)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail"]}
{"goal":"List.cons(head, tail).unique.length = tail.unique.length + 1","proof":["List.cons(head, tail).unique != List.cons(head, tail.unique) or List.cons(head, tail).unique.length = tail.unique.length.suc","tail.unique.length + 1 = 1 + tail.unique.length","List.cons(head, tail).unique.length != 1 + tail.unique.length","1 + tail.unique.length = tail.unique.length.suc","List.cons(head, tail).unique.length = tail.unique.length.suc","List.cons(head, tail).unique.length != tail.unique.length.suc"]}
{"goal":"c.unique.remove_elem(head).length + 1 = c.unique.length","proof":["not head ∈ c or c.unique.remove_elem(head).length + 1 = c.unique.length"]}
{"goal":"tail.remove_elem(head) = tail","proof":["tail.remove_elem(head) = tail or head ∈ tail"]}
{"goal":"tail.contains(x) implies c.remove_elem(head).contains(x)","proof":["not is_contained(List.cons(head, tail).contains, c.contains) or not x ∈ List.cons(head, tail) or x ∈ c","not x ∈ tail or List.cons(head, tail) != List.cons(head, tail) or x ∈ List.cons(head, tail) or x = head","x ∈ c.remove_elem(head) = x ∈ c or x = head","not x ∈ c or x ∈ c.remove_elem(head) or x = head","not x ∈ c","not x ∈ List.cons(head, tail) or x ∈ c","List.cons(head, tail) != List.cons(head, tail) or x ∈ List.cons(head, tail) or x = head","List.cons(head, tail) != List.cons(head, tail) or x ∈ List.cons(head, tail)","not x ∈ List.cons(head, tail)","x ∈ List.cons(head, tail)"]}
{"goal":"not tail.contains(x)","proof":[]}
{"goal":"not c.remove_elem(head).contains(x)","proof":["head ∈ c.remove_elem(head)","not head ∈ c.remove_elem(head) or not head ∈ c"]}
{"goal":"tail.contains(x) implies c.remove_elem(head).contains(x)","proof":["x = head","head ∈ tail"]}
{"goal":"is_contained(tail.contains, c.remove_elem(head).contains)","proof":["let s0: (T -> Bool, T -> Bool) -> T satisfy { forall(x0: T -> Bool, x1: T -> Bool, x2: T) { not is_contained(x0, x1) or not x0(x2) or x1(x2) } and forall(x3: T -> Bool, x4: T -> Bool) { x3(s0(x3, x4)) or is_contained(x3, x4) } and forall(x5: T -> Bool, x6: T -> Bool) { not x5(s0(x6, x5)) or is_contained(x6, x5) } }","not s0(tail.contains, c.remove_elem(head).contains) ∈ c.remove_elem(head) or is_contained(tail.contains, c.remove_elem(head).contains)","s0(tail.contains, c.remove_elem(head).contains) ∈ tail or is_contained(tail.contains, c.remove_elem(head).contains)","not s0(tail.contains, c.remove_elem(head).contains) ∈ tail or s0(tail.contains, c.remove_elem(head).contains) ∈ c.remove_elem(head)","s0(tail.contains, c.remove_elem(head).contains) ∈ tail","not s0(tail.contains, c.remove_elem(head).contains) ∈ c.remove_elem(head)","s0(tail.contains, c.remove_elem(head).contains) ∈ c.remove_elem(head)"]}
{"goal":"pc(tail, c.remove_elem(head))","proof":["not p(tail) or pc(tail, c.remove_elem(head))"]}
{"goal":"tail.unique.length <= c.remove_elem(head).unique.length","proof":["not is_contained(tail.contains, c.remove_elem(head).contains) or not pc(tail, c.remove_elem(head)) or tail.unique.length <= c.remove_elem(head).unique.length"]}
{"goal":"List.cons(head, tail).unique.length = tail.unique.length + 1","proof":[]}
{"goal":"c.remove_elem(head).unique.length + 1 = c.unique.length","proof":["c.unique.remove_elem(head) = c.remove_elem(head).unique"]}
{"goal":"tail.unique.length + 1 <= c.remove_elem(head).unique.length + 1","proof":["not tail.unique.length <= c.remove_elem(head).unique.length or not 1 <= 1 or tail.unique.length + 1 <= c.remove_elem(head).unique.length + 1","not 1 <= 1","1 <= 1 or 1 <= 1"]}
{"goal":"List.cons(head, tail).unique.length <= c.unique.length","proof":[]}
{"goal":"pc(List.cons(head, tail), c)","proof":["not List.cons(head, tail).unique.length <= c.unique.length or pc(List.cons(head, tail), c)"]}
{"goal":"p(List.cons(head, tail))","proof":["let s0: List[T] -> List[T] satisfy { forall(x0: List[T], x1: List[T]) { not p(x0) or pc(x0, x1) } and forall(x2: List[T]) { not pc(x2, s0(x2)) or p(x2) } }","not pc(List.cons(head, tail), s0(List.cons(head, tail))) or p(List.cons(head, tail))","is_contained(List.cons(head, tail).contains, s0(List.cons(head, tail)).contains) or pc(List.cons(head, tail), s0(List.cons(head, tail)))","not is_contained(List.cons(head, tail).contains, s0(List.cons(head, tail)).contains) or pc(List.cons(head, tail), s0(List.cons(head, tail)))","not pc(List.cons(head, tail), s0(List.cons(head, tail)))","not is_contained(List.cons(head, tail).contains, s0(List.cons(head, tail)).contains)","is_contained(List.cons(head, tail).contains, s0(List.cons(head, tail)).contains)"]}
{"goal":"pc(list, container)","proof":["not p(list) or pc(list, container)","let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(list)","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p)) or p(list)","p(s1(p))","not p(List.cons(s0(p), s1(p))) or p(list)","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"unique_is_smallest_containing_list","proof":["let s0: (T -> Bool, T -> Bool) -> T satisfy { forall(x0: T -> Bool, x1: T -> Bool, x2: T) { not is_contained(x0, x1) or not x0(x2) or x1(x2) } and forall(x3: T -> Bool, x4: T -> Bool) { x3(s0(x3, x4)) or is_contained(x3, x4) } and forall(x5: T -> Bool, x6: T -> Bool) { not x5(s0(x6, x5)) or is_contained(x6, x5) } }","not s0(list.contains, container.contains) ∈ list or s0(list.contains, container.contains) ∈ container","not s0(list.contains, container.contains) ∈ container or is_contained(list.contains, container.contains)","s0(list.contains, container.contains) ∈ list or is_contained(list.contains, container.contains)","not is_contained(list.contains, container.contains) or not pc(list, container) or list.unique.length <= container.unique.length","not lib(util).is_transitive[Nat](Nat.lte) or not list.unique.length <= container.unique.length or not container.unique.length <= container.length or list.unique.length <= container.length","container.unique.length <= container.length","not list.unique.length <= container.unique.length or not container.unique.length <= container.length","not list.unique.length <= container.unique.length","not is_contained(list.contains, container.contains)","s0(list.contains, container.contains) ∈ list","not s0(list.contains, container.contains) ∈ container","s0(list.contains, container.contains) ∈ container"]}
{"goal":"p(List.nil[T], list2)","proof":["not (List.nil[T] + list2).is_unique or p(List.nil[T], list2)","not (List.nil[T] + list2).is_unique","List.nil[T] + list2 = list2"]}
{"goal":"disjoint(tail, list2)","proof":["let s0: (List[T], List[T]) -> T satisfy { forall(x0: List[T], x1: T, x2: List[T]) { not x1 ∈ x0 or not x1 ∈ x2 or not disjoint(x0, x2) } and forall(x3: List[T], x4: List[T]) { s0(x3, x4) ∈ x3 or disjoint(x3, x4) } and forall(x5: List[T], x6: List[T]) { s0(x6, x5) ∈ x5 or disjoint(x6, x5) } }","s0(tail, list2) ∈ list2 or disjoint(tail, list2)","s0(tail, list2) ∈ tail or disjoint(tail, list2)","not s0(tail, list2) ∈ List.cons(head, tail) or not s0(tail, list2) ∈ list2 or not disjoint(List.cons(head, tail), list2)","not s0(tail, list2) ∈ tail or List.cons(head, tail) != List.cons(head, tail) or s0(tail, list2) ∈ List.cons(head, tail) or s0(tail, list2) = head","s0(tail, list2) ∈ tail","s0(tail, list2) ∈ list2","List.cons(head, tail) != List.cons(head, tail) or s0(tail, list2) != head or s0(tail, list2) ∈ List.cons(head, tail)","s0(tail, list2) != head or s0(tail, list2) ∈ List.cons(head, tail)","not s0(tail, list2) ∈ tail or s0(tail, list2) ∈ List.cons(head, tail) or s0(tail, list2) = head","not s0(tail, list2) ∈ List.cons(head, tail) or not disjoint(List.cons(head, tail), list2)","not s0(tail, list2) ∈ List.cons(head, tail)","s0(tail, list2) != head","s0(tail, list2) = head"]}
{"goal":"(tail + list2).is_unique","proof":["let s0: (List[T], List[T]) -> T satisfy { forall(x0: List[T], x1: List[T]) { not x0.is_unique or not x1.is_unique or not p(x0, x1) or s0(x0, x1) ∈ x0 or (x0 + x1).is_unique } and forall(x2: List[T], x3: List[T]) { not x2.is_unique or not x3.is_unique or not p(x2, x3) or s0(x2, x3) ∈ x3 or (x2 + x3).is_unique } and forall(x4: List[T], x5: List[T]) { x4.is_unique or p(x4, x5) } and forall(x6: List[T], x7: List[T]) { x6.is_unique or p(x7, x6) } and forall(x8: List[T], x9: T, x10: List[T]) { not x9 ∈ x8 or not x9 ∈ x10 or p(x8, x10) } and forall(x11: List[T], x12: List[T]) { not (x11 + x12).is_unique or p(x11, x12) } }","not s0(tail, list2) ∈ tail or not s0(tail, list2) ∈ list2 or not disjoint(tail, list2)","not tail.is_unique or not list2.is_unique or not p(tail, list2) or s0(tail, list2) ∈ list2 or (tail + list2).is_unique","not tail.is_unique or not list2.is_unique or not p(tail, list2) or s0(tail, list2) ∈ tail or (tail + list2).is_unique","not List.cons(head, tail).is_unique or tail.is_unique","tail.is_unique","s0(tail, list2) ∈ tail","s0(tail, list2) ∈ list2","not s0(tail, list2) ∈ tail or not s0(tail, list2) ∈ list2"]}
{"goal":"(List.cons(head, tail) + list2).unique = List.cons(head, tail + list2).unique","proof":["List.cons(head, tail) + list2 != List.cons(head, tail + list2)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + list2 = List.cons(head, tail + list2)"]}
{"goal":"tail.unique = tail","proof":["not List.cons(head, tail).is_unique or tail.is_unique","tail.is_unique","not tail.is_unique or tail.unique = tail"]}
{"goal":"List.cons(head, tail).unique = List.cons(head, tail)","proof":["not List.cons(head, tail).is_unique or List.cons(head, tail).unique = List.cons(head, tail)"]}
{"goal":"not list2.contains(head)","proof":["not head ∈ List.cons(head, tail) or not head ∈ list2 or not disjoint(List.cons(head, tail), list2)","List.cons(head, tail).unique != List.cons(head, tail) or head != head or head ∈ List.cons(head, tail).unique","not head ∈ List.cons(head, tail) or not disjoint(List.cons(head, tail), list2)","not head ∈ List.cons(head, tail)","List.cons(head, tail).unique != List.cons(head, tail) or head ∈ List.cons(head, tail).unique","not head ∈ List.cons(head, tail).unique","head ∈ List.cons(head, tail).unique"]}
{"goal":"List.cons(head, tail + list2).unique = List.cons(head, (tail + list2).unique)","proof":["List.cons(head, tail + list2) != List.cons(head, tail + list2) or List.cons(head, tail + list2).unique = List.cons(head, (tail + list2).unique) or head ∈ tail + list2","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + list2 = List.cons(head, tail + list2)","not head ∈ tail or List.cons(head, tail).unique != List.cons(head, tail) or List.cons(head, tail).unique.unique = tail.unique","not head ∈ tail + list2 or head ∈ tail or head ∈ list2","head ∈ tail + list2","not (tail + list2).is_unique or (tail + list2).unique = tail + list2","not List.cons(head, tail + list2).is_unique or List.cons(head, tail + list2).unique = List.cons(head, tail + list2)","List.cons(head, tail) + list2 = List.cons(head, tail + list2)","(tail + list2).unique = tail + list2","List.cons(head, tail + list2).unique != List.cons(head, tail + list2)","not head ∈ tail or List.cons(head, tail).unique.unique = tail.unique","head ∈ tail","not List.cons(head, tail + list2).is_unique","List.cons(head, tail).unique.unique = tail.unique"]}
{"goal":"(List.cons(head, tail) + list2).unique = List.cons(head, (tail + list2).unique)","proof":["(List.cons(head, tail) + list2).unique != List.cons(head, tail + list2).unique"]}
{"goal":"p(List.cons(head, tail), list2)","proof":["not (List.cons(head, tail) + list2).is_unique or p(List.cons(head, tail), list2)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + list2 = List.cons(head, tail + list2)","not (List.cons(head, tail) + list2).is_unique","List.cons(head, tail + list2).unique != List.cons(head, tail + list2) or List.cons(head, tail + list2).is_unique","not (tail + list2).is_unique or (tail + list2).unique = tail + list2","List.cons(head, tail) + list2 = List.cons(head, tail + list2)","not List.cons(head, tail + list2).is_unique","(tail + list2).unique = tail + list2","List.cons(head, tail + list2).unique != List.cons(head, tail + list2)","List.cons(head, tail + list2).unique = List.cons(head, tail + list2)"]}
{"goal":"p(List.cons(head, tail), list2)","proof":["List.cons(head, tail).is_unique or p(List.cons(head, tail), list2)","let s0: (List[T], List[T]) -> T satisfy { forall(x0: List[T], x1: T, x2: List[T]) { not x1 ∈ x0 or not x1 ∈ x2 or not disjoint(x0, x2) } and forall(x3: List[T], x4: List[T]) { s0(x3, x4) ∈ x3 or disjoint(x3, x4) } and forall(x5: List[T], x6: List[T]) { s0(x6, x5) ∈ x5 or disjoint(x6, x5) } }","s0(List.cons(head, tail), list2) ∈ list2 or disjoint(List.cons(head, tail), list2)","s0(List.cons(head, tail), list2) ∈ List.cons(head, tail) or disjoint(List.cons(head, tail), list2)","not s0(List.cons(head, tail), list2) ∈ List.cons(head, tail) or not s0(List.cons(head, tail), list2) ∈ list2 or p(List.cons(head, tail), list2)","List.cons(head, tail).is_unique","not disjoint(List.cons(head, tail), list2)","not s0(List.cons(head, tail), list2) ∈ List.cons(head, tail) or not s0(List.cons(head, tail), list2) ∈ list2","s0(List.cons(head, tail), list2) ∈ list2","s0(List.cons(head, tail), list2) ∈ List.cons(head, tail)","not s0(List.cons(head, tail), list2) ∈ List.cons(head, tail)"]}
{"goal":"p(list1, list2)","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T], list2) or p(s1, list2) or p(x0, list2) } and forall(x1: List[T]) { not p(List.cons(s0, s1), list2) or not p(List.nil[T], list2) or p(x1, list2) } }","not p(List.nil[T], list2) or p(s1, list2) or p(list1, list2)","p(s1, list2) or p(list1, list2)","p(s1, list2)","not p(List.cons(s0, s1), list2) or not p(List.nil[T], list2) or p(list1, list2)","not p(List.cons(s0, s1), list2) or p(list1, list2)","not p(s1, list2) or p(List.cons(s0, s1), list2)","not p(List.cons(s0, s1), list2)"]}
{"goal":"unique_list_sum","proof":["let s0: (List[T], List[T]) -> T satisfy { forall(x0: List[T], x1: List[T]) { not x0.is_unique or not x1.is_unique or not p(x0, x1) or s0(x0, x1) ∈ x0 or (x0 + x1).is_unique } and forall(x2: List[T], x3: List[T]) { not x2.is_unique or not x3.is_unique or not p(x2, x3) or s0(x2, x3) ∈ x3 or (x2 + x3).is_unique } and forall(x4: List[T], x5: List[T]) { x4.is_unique or p(x4, x5) } and forall(x6: List[T], x7: List[T]) { x6.is_unique or p(x7, x6) } and forall(x8: List[T], x9: T, x10: List[T]) { not x9 ∈ x8 or not x9 ∈ x10 or p(x8, x10) } and forall(x11: List[T], x12: List[T]) { not (x11 + x12).is_unique or p(x11, x12) } }","not s0(list1, list2) ∈ list2 or not s0(list1, list2) ∈ list1","not list1.is_unique or not list2.is_unique or not p(list1, list2) or s0(list1, list2) ∈ list2 or (list1 + list2).is_unique","not list1.is_unique or not list2.is_unique or not p(list1, list2) or s0(list1, list2) ∈ list1 or (list1 + list2).is_unique","s0(list1, list2) ∈ list1","s0(list1, list2) ∈ list2","not s0(list1, list2) ∈ list2"]}
{"goal":"unique_list_sum_length","proof":["let s0: (List[T], List[T]) -> T satisfy { forall(x0: List[T], x1: List[T]) { not x0.is_unique or not x1.is_unique or s0(x0, x1) ∈ x0 or (x0 + x1).is_unique } and forall(x2: List[T], x3: List[T]) { not x2.is_unique or not x3.is_unique or s0(x2, x3) ∈ x3 or (x2 + x3).is_unique } }","not s0(list1, list2) ∈ list2 or not s0(list1, list2) ∈ list1","not list1.is_unique or not list2.is_unique or s0(list1, list2) ∈ list2 or (list1 + list2).is_unique","not list1.is_unique or not list2.is_unique or s0(list1, list2) ∈ list1 or (list1 + list2).is_unique","list1.length + list2.length = (list1 + list2).length","(list1 + list2).unique.length != (list1 + list2).length","(list1 + list2).unique != list1 + list2","not (list1 + list2).is_unique or (list1 + list2).unique = list1 + list2","not (list1 + list2).is_unique","not list1.is_unique or s0(list1, list2) ∈ list1 or (list1 + list2).is_unique","s0(list1, list2) ∈ list1","s0(list1, list2) ∈ list2","not s0(list1, list2) ∈ list2"]}
{"goal":"p(List.nil[T])","proof":["map[T, U](List.nil[T], f) != List.nil[T].map(f) or p(List.nil[T])","List.nil[T] != List.nil[T] or map[T, U](List.nil[T], f) = List.nil[U]","List.nil[T] != List.nil[T] or List.nil[T].map(f) = List.nil[U]","map[T, U](List.nil[T], f) != List.nil[T].map(f)","List.nil[T].map(f) = List.nil[U]","map[T, U](List.nil[T], f) != List.nil[U]"]}
{"goal":"p(ts)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","map[T, U](List.cons(s0(p), s1(p)), f) != List.cons(s0(p), s1(p)).map(f) or p(List.cons(s0(p), s1(p)))","not p(s1(p)) or map[T, U](s1(p), f) = s1(p).map(f)","List.cons(s0(p), s1(p)) != List.cons(s0(p), s1(p)) or List.cons(f(s0(p)), map[T, U](s1(p), f)) = map[T, U](List.cons(s0(p), s1(p)), f)","List.cons(s0(p), s1(p)) != List.cons(s0(p), s1(p)) or List.cons(f(s0(p)), s1(p).map(f)) = List.cons(s0(p), s1(p)).map(f)","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(ts)","not p(List.nil[T]) or p(s1(p)) or p(ts)","p(s1(p))","not p(List.cons(s0(p), s1(p)))","List.cons(f(s0(p)), s1(p).map(f)) = List.cons(s0(p), s1(p)).map(f)","List.cons(f(s0(p)), map[T, U](s1(p), f)) = map[T, U](List.cons(s0(p), s1(p)), f)","map[T, U](s1(p), f) = s1(p).map(f)","map[T, U](List.cons(s0(p), s1(p)), f) != List.cons(s0(p), s1(p)).map(f)"]}
{"goal":"ts.map(f) = map[T, U](ts, f)","proof":["not p(ts) or map[T, U](ts, f) = ts.map(f)"]}
{"goal":"map_equivalence","proof":["let (s0: List[T], s1: T -> U) satisfy { map[T, U](s0, s1) != s0.map(s1) }","map[T, U](s0, s1) = s0.map(s1)"]}
