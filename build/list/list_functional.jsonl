{"goal":"p(List.nil[T])","proof":["reverse[T](List.nil[T]).length != List.nil[T].length or p(List.nil[T])","reverse[T](List.nil[T]).length != List.nil[T].length","reverse[T](List.nil[T]) != List.nil[T]","List.nil[T] != List.nil[T] or reverse[T](List.nil[T]) = List.nil[T]"]}
{"goal":"reverse[T](List.cons(head, tail)).length = (reverse[T](tail) + List.singleton(head)).length","proof":["List.cons(head, tail) != List.cons(head, tail) or reverse[T](tail).append(head) = reverse[T](List.cons(head, tail))","reverse[T](tail) + List.singleton(head) = reverse[T](tail).append(head)","reverse[T](tail).append(head).length != reverse[T](List.cons(head, tail)).length","reverse[T](tail).append(head) != reverse[T](List.cons(head, tail))"]}
{"goal":"(reverse[T](tail) + List.singleton(head)).length = reverse[T](tail).length + List.singleton(head).length","proof":["reverse[T](tail).length + List.singleton(head).length = (reverse[T](tail) + List.singleton(head)).length"]}
{"goal":"reverse[T](tail).length = tail.length","proof":["not p(tail) or reverse[T](tail).length = tail.length"]}
{"goal":"List.cons(head, tail).length = tail.length.suc","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","List.cons(head, tail) != List.cons(head, tail)"]}
{"goal":"p(List.cons(head, tail))","proof":["reverse[T](List.cons(head, tail)).length != List.cons(head, tail).length or p(List.cons(head, tail))","List.cons(head, List.nil[T]) != List.cons(head, List.nil[T]) or List.cons(head, List.nil[T]) + tail = List.cons(head, List.nil[T] + tail)","List.singleton(head).length + tail.length = (List.singleton(head) + tail).length","reverse[T](tail).length + List.singleton(head).length = List.singleton(head).length + reverse[T](tail).length","List.cons(head, List.nil[T]) = List.singleton(head)","List.nil[T] + tail = tail","reverse[T](List.cons(head, tail)).length != List.cons(head, tail).length","List.cons(head, List.nil[T]) + tail = List.cons(head, List.nil[T] + tail)"]}
{"goal":"reverse_length","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T]) or p(s1) or p(x0) } and forall(x1: List[T]) { not p(List.cons(s0, s1)) or not p(List.nil[T]) or p(x1) } }","not p(List.nil[T]) or p(s1) or p(s1)","p(s1) or p(s1)","not p(List.cons(s0, s1)) or not p(List.nil[T]) or p(list)","not p(List.cons(s0, s1)) or p(list)","not p(s1) or p(List.cons(s0, s1))","not p(list) or reverse[T](list).length = list.length","p(s1)","not p(list)","not p(List.cons(s0, s1))"]}
