{"goal":"p(List.nil[T])","proof":["reverse[T](List.nil[T]).length != List.nil[T].length or p(List.nil[T])","reverse[T](List.nil[T]).length != List.nil[T].length","reverse[T](List.nil[T]) != List.nil[T]","List.nil[T] != List.nil[T] or reverse[T](List.nil[T]) = List.nil[T]"]}
{"goal":"reverse[T](List.cons(head, tail)).length = (reverse[T](tail) + List.singleton(head)).length","proof":["List.cons(head, tail) != List.cons(head, tail) or reverse[T](tail).append(head) = reverse[T](List.cons(head, tail))","reverse[T](tail) + List.singleton(head) = reverse[T](tail).append(head)","reverse[T](tail).append(head).length != reverse[T](List.cons(head, tail)).length","reverse[T](tail).append(head) != reverse[T](List.cons(head, tail))"]}
{"goal":"(reverse[T](tail) + List.singleton(head)).length = reverse[T](tail).length + List.singleton(head).length","proof":["reverse[T](tail).length + List.singleton(head).length = (reverse[T](tail) + List.singleton(head)).length"]}
{"goal":"reverse[T](tail).length = tail.length","proof":["not p(tail) or reverse[T](tail).length = tail.length"]}
{"goal":"List.cons(head, tail).length = tail.length.suc","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","List.cons(head, tail) != List.cons(head, tail)"]}
{"goal":"p(List.cons(head, tail))","proof":["reverse[T](List.cons(head, tail)).length != List.cons(head, tail).length or p(List.cons(head, tail))","List.cons(head, List.nil[T]) != List.cons(head, List.nil[T]) or List.cons(head, List.nil[T]) + tail = List.cons(head, List.nil[T] + tail)","List.singleton(head).length + tail.length = (List.singleton(head) + tail).length","reverse[T](tail).length + List.singleton(head).length = List.singleton(head).length + reverse[T](tail).length","List.cons(head, List.nil[T]) = List.singleton(head)","List.nil[T] + tail = tail","reverse[T](List.cons(head, tail)).length != List.cons(head, tail).length","List.cons(head, List.nil[T]) + tail = List.cons(head, List.nil[T] + tail)"]}
{"goal":"reverse_length","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T]) or p(s1) or p(x0) } and forall(x1: List[T]) { not p(List.cons(s0, s1)) or not p(List.nil[T]) or p(x1) } }","not p(List.nil[T]) or p(s1) or p(s1)","p(s1) or p(s1)","not p(List.cons(s0, s1)) or not p(List.nil[T]) or p(list)","not p(List.cons(s0, s1)) or p(list)","not p(s1) or p(List.cons(s0, s1))","not p(list) or reverse[T](list).length = list.length","p(s1)","not p(list)","not p(List.cons(s0, s1))"]}
{"goal":"reverse[T](List.nil[T] + list2) = reverse[T](list2)","proof":["List.nil[T] + list2 != list2","List.nil[T] != List.nil[T] or List.nil[T] + list2 = list2"]}
{"goal":"reverse[T](list2) + reverse[T](List.nil[T]) = reverse[T](list2) + List.nil[T]","proof":["reverse[T](List.nil[T]) != List.nil[T]","List.nil[T] != List.nil[T] or reverse[T](List.nil[T]) = List.nil[T]"]}
{"goal":"reverse[T](list2) + List.nil[T] = reverse[T](list2)","proof":["reverse[T](list2) + List.nil[T] = reverse[T](list2)"]}
{"goal":"p(List.nil[T])","proof":["reverse[T](list2) + reverse[T](List.nil[T]) != reverse[T](List.nil[T] + list2) or p(List.nil[T])","reverse[T](list2) + List.nil[T] = reverse[T](list2)","reverse[T](list2) + reverse[T](List.nil[T]) = reverse[T](list2)","reverse[T](list2) + reverse[T](List.nil[T]) != reverse[T](List.nil[T] + list2)","reverse[T](list2) + reverse[T](List.nil[T]) = reverse[T](List.nil[T] + list2)"]}
{"goal":"reverse[T](List.cons(head, tail) + list2) = reverse[T](List.cons(head, tail + list2))","proof":["List.cons(head, tail) + list2 != List.cons(head, tail + list2)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + list2 = List.cons(head, tail + list2)"]}
{"goal":"reverse[T](List.cons(head, tail + list2)) = reverse[T](tail + list2).append(head)","proof":["List.cons(head, tail + list2) != List.cons(head, tail + list2) or reverse[T](tail + list2).append(head) = reverse[T](List.cons(head, tail + list2))"]}
{"goal":"reverse[T](tail + list2).append(head) = reverse[T](tail + list2) + List.singleton(head)","proof":["reverse[T](tail + list2) + List.singleton(head) = reverse[T](tail + list2).append(head)"]}
{"goal":"reverse[T](tail + list2) + List.singleton(head) = reverse[T](list2) + reverse[T](tail) + List.singleton(head)","proof":["not p(tail) or reverse[T](list2) + reverse[T](tail) = reverse[T](tail + list2)","reverse[T](list2) + reverse[T](tail) != reverse[T](tail + list2)","reverse[T](list2) + reverse[T](tail) = reverse[T](tail + list2)"]}
{"goal":"reverse[T](list2) + reverse[T](tail) + List.singleton(head) = reverse[T](list2) + (reverse[T](tail) + List.singleton(head))","proof":["reverse[T](list2) + (reverse[T](tail) + List.singleton(head)) = reverse[T](list2) + reverse[T](tail) + List.singleton(head)"]}
{"goal":"reverse[T](list2) + (reverse[T](tail) + List.singleton(head)) = reverse[T](list2) + reverse[T](tail).append(head)","proof":["reverse[T](tail) + List.singleton(head) != reverse[T](tail).append(head)","reverse[T](tail) + List.singleton(head) = reverse[T](tail).append(head)"]}
{"goal":"reverse[T](list2) + reverse[T](tail).append(head) = reverse[T](list2) + reverse[T](List.cons(head, tail))","proof":["reverse[T](tail).append(head) != reverse[T](List.cons(head, tail))","List.cons(head, tail) != List.cons(head, tail) or reverse[T](tail).append(head) = reverse[T](List.cons(head, tail))"]}
{"goal":"reverse[T](List.cons(head, tail) + list2) = reverse[T](list2) + reverse[T](List.cons(head, tail))","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["reverse[T](list2) + reverse[T](List.cons(head, tail)) != reverse[T](List.cons(head, tail) + list2) or p(List.cons(head, tail))","reverse[T](list2) + reverse[T](List.cons(head, tail)) != reverse[T](List.cons(head, tail) + list2)"]}
{"goal":"reverse_add","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T]) or p(s1) or p(x0) } and forall(x1: List[T]) { not p(List.cons(s0, s1)) or not p(List.nil[T]) or p(x1) } }","not p(List.nil[T]) or p(s1) or p(s1)","p(s1) or p(s1)","not p(List.cons(s0, s1)) or not p(List.nil[T]) or p(list1)","not p(List.cons(s0, s1)) or p(list1)","not p(s1) or p(List.cons(s0, s1))","not p(list1) or reverse[T](list2) + reverse[T](list1) = reverse[T](list1 + list2)","p(s1)","not p(list1)","not p(List.cons(s0, s1))"]}
{"goal":"p(List.nil[T])","proof":["reverse[T](reverse[T](List.nil[T])) != List.nil[T] or p(List.nil[T])","reverse[T](reverse[T](List.nil[T])) != List.nil[T]","List.nil[T] != List.nil[T] or reverse[T](List.nil[T]) = List.nil[T]","reverse[T](List.nil[T]) != List.nil[T] or reverse[T](reverse[T](List.nil[T])) = List.nil[T]","reverse[T](List.nil[T]) = List.nil[T]","reverse[T](List.nil[T]) != List.nil[T]"]}
{"goal":"reverse[T](reverse[T](List.cons(head, tail))) = reverse[T](reverse[T](tail).append(head))","proof":["reverse[T](tail).append(head) != reverse[T](List.cons(head, tail))","List.cons(head, tail) != List.cons(head, tail) or reverse[T](tail).append(head) = reverse[T](List.cons(head, tail))"]}
{"goal":"reverse[T](reverse[T](tail).append(head)) = reverse[T](reverse[T](tail) + List.singleton(head))","proof":["reverse[T](tail) + List.singleton(head) != reverse[T](tail).append(head)","reverse[T](tail) + List.singleton(head) = reverse[T](tail).append(head)"]}
{"goal":"reverse[T](reverse[T](tail) + List.singleton(head)) = reverse[T](List.singleton(head)) + reverse[T](reverse[T](tail))","proof":["reverse[T](List.singleton(head)) + reverse[T](reverse[T](tail)) = reverse[T](reverse[T](tail) + List.singleton(head))"]}
{"goal":"reverse[T](List.singleton(head)) = List.singleton(head)","proof":["List.cons(head, List.nil[T]) != List.cons(head, List.nil[T]) or reverse[T](List.nil[T]).append(head) = reverse[T](List.cons(head, List.nil[T]))","List.nil[T] + List.singleton(head) = List.nil[T].append(head)","List.nil[T] != List.nil[T] or reverse[T](List.nil[T]) = List.nil[T]","List.cons(head, List.nil[T]) = List.singleton(head)","List.nil[T] + List.cons(head, List.nil[T]) = List.cons(head, List.nil[T])","reverse[T](List.nil[T]) = List.nil[T]","reverse[T](List.nil[T]).append(head) = reverse[T](List.cons(head, List.nil[T]))"]}
{"goal":"reverse[T](List.singleton(head)) + reverse[T](reverse[T](tail)) = List.singleton(head) + tail","proof":["not p(tail) or reverse[T](reverse[T](tail)) = tail","List.singleton(head) + reverse[T](reverse[T](tail)) != List.singleton(head) + tail","reverse[T](reverse[T](tail)) = tail","reverse[T](reverse[T](tail)) != tail"]}
{"goal":"List.singleton(head) + tail = List.cons(head, tail)","proof":["List.cons(head, List.nil[T]) != List.singleton(head) or List.cons(head, List.nil[T] + tail) = List.singleton(head) + tail","List.cons(head, List.nil[T]) = List.singleton(head)","List.nil[T] + tail = tail","List.cons(head, List.nil[T] + tail) != List.singleton(head) + tail"]}
{"goal":"reverse[T](reverse[T](List.cons(head, tail))) = List.cons(head, tail)","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["reverse[T](reverse[T](List.cons(head, tail))) != List.cons(head, tail) or p(List.cons(head, tail))","reverse[T](reverse[T](List.cons(head, tail))) != List.cons(head, tail)"]}
{"goal":"reverse_involution","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T]) or p(s1) or p(x0) } and forall(x1: List[T]) { not p(List.cons(s0, s1)) or not p(List.nil[T]) or p(x1) } }","not p(List.nil[T]) or p(s1) or p(s1)","p(s1) or p(s1)","not p(List.cons(s0, s1)) or not p(List.nil[T]) or p(list)","not p(List.cons(s0, s1)) or p(list)","not p(s1) or p(List.cons(s0, s1))","not p(list) or reverse[T](reverse[T](list)) = list","p(s1)","not p(list)","not p(List.cons(s0, s1))"]}
{"goal":"p(List.nil[T])","proof":["item âˆˆ reverse[T](List.nil[T]) != item âˆˆ List.nil[T] or p(List.nil[T])","reverse[T](List.nil[T]) != List.nil[T] or p(List.nil[T])","reverse[T](List.nil[T]) != List.nil[T]","List.nil[T] != List.nil[T] or reverse[T](List.nil[T]) = List.nil[T]"]}
{"goal":"reverse[T](List.cons(head, tail)).contains(item) = (reverse[T](tail) + List.singleton(head)).contains(item)","proof":["List.cons(head, tail) != List.cons(head, tail) or reverse[T](tail).append(head) = reverse[T](List.cons(head, tail))","reverse[T](tail) + List.singleton(head) = reverse[T](tail).append(head)","item âˆˆ reverse[T](tail).append(head) != item âˆˆ reverse[T](List.cons(head, tail))","reverse[T](tail).append(head) != reverse[T](List.cons(head, tail))"]}
{"goal":"tail.contains(item)","proof":["not p(tail) or item âˆˆ reverse[T](tail) = item âˆˆ tail","not item âˆˆ reverse[T](tail) or not p(tail) or item âˆˆ tail"]}
{"goal":"List.cons(head, tail).contains(item)","proof":["List.cons(head, List.nil[T]) != List.cons(head, List.nil[T]) or List.cons(head, List.nil[T]) + tail = List.cons(head, List.nil[T] + tail)","not item âˆˆ tail or item âˆˆ List.cons(head, List.nil[T]) + tail","List.nil[T] + tail = tail","not item âˆˆ List.cons(head, List.nil[T] + tail)","item âˆˆ List.cons(head, List.nil[T]) + tail","List.cons(head, List.nil[T]) + tail = List.cons(head, List.nil[T] + tail)"]}
{"goal":"List.singleton(head).contains(item)","proof":["not item âˆˆ reverse[T](tail) + List.singleton(head) or item âˆˆ reverse[T](tail) or item âˆˆ List.singleton(head)"]}
{"goal":"head = item","proof":["not item âˆˆ List.singleton(head) or List.cons(head, List.nil[T]) != List.singleton(head) or item âˆˆ List.nil[T] or head = item","not item âˆˆ List.nil[T] or List.nil[T] != List.nil[T]","List.cons(head, List.nil[T]) = List.singleton(head)","not item âˆˆ List.nil[T]","not item âˆˆ List.singleton(head) or List.cons(head, List.nil[T]) != List.singleton(head) or item âˆˆ List.nil[T]"]}
{"goal":"List.cons(head, tail).contains(item)","proof":["List.cons(head, tail) != List.cons(head, tail) or head != item or item âˆˆ List.cons(head, tail)","List.cons(head, tail) != List.cons(head, tail) or head != item"]}
{"goal":"List.cons(head, tail).contains(item)","proof":[]}
{"goal":"List.singleton(head).contains(item)","proof":["List.cons(head, List.nil[T]) != List.singleton(head) or head != item or item âˆˆ List.singleton(head)","List.cons(head, List.nil[T]) = List.singleton(head)","List.cons(head, List.nil[T]) != List.singleton(head) or head != item"]}
{"goal":"(reverse[T](tail) + List.singleton(head)).contains(item)","proof":["not item âˆˆ List.singleton(head) or item âˆˆ reverse[T](tail) + List.singleton(head)"]}
{"goal":"tail.contains(item)","proof":["not item âˆˆ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or item âˆˆ tail or head = item","not item âˆˆ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or head = item","List.cons(head, tail) != List.cons(head, tail) or not item âˆˆ List.cons(head, tail)"]}
{"goal":"reverse[T](tail).contains(item)","proof":["not p(tail) or item âˆˆ reverse[T](tail) = item âˆˆ tail","not item âˆˆ tail or not p(tail) or item âˆˆ reverse[T](tail)"]}
{"goal":"(reverse[T](tail) + List.singleton(head)).contains(item)","proof":["not item âˆˆ reverse[T](tail) or item âˆˆ reverse[T](tail) + List.singleton(head)"]}
{"goal":"(reverse[T](tail) + List.singleton(head)).contains(item)","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["item âˆˆ reverse[T](List.cons(head, tail)) != item âˆˆ List.cons(head, tail) or p(List.cons(head, tail))","item âˆˆ reverse[T](List.cons(head, tail)) != item âˆˆ List.cons(head, tail)","item âˆˆ reverse[T](tail) + List.singleton(head) != item âˆˆ List.cons(head, tail)","item âˆˆ reverse[T](tail) + List.singleton(head) or item âˆˆ List.cons(head, tail)","item âˆˆ List.cons(head, tail)","item âˆˆ reverse[T](tail) + List.singleton(head)","not item âˆˆ reverse[T](tail) + List.singleton(head)"]}
{"goal":"reverse_contains","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T]) or p(s1) or p(x0) } and forall(x1: List[T]) { not p(List.cons(s0, s1)) or not p(List.nil[T]) or p(x1) } }","not p(List.nil[T]) or p(s1) or p(s1)","p(s1) or p(s1)","not p(List.cons(s0, s1)) or not p(List.nil[T]) or p(list)","not p(List.cons(s0, s1)) or p(list)","not p(s1) or p(List.cons(s0, s1))","not p(list) or item âˆˆ reverse[T](list) = item âˆˆ list","p(s1)","not p(list)","not p(List.cons(s0, s1))"]}
{"goal":"p(List.nil[T])","proof":["idx < List.nil[T].length or p(List.nil[T])","idx < List.nil[T].length","List.nil[T] != List.nil[T] or List.nil[T].length = 0","not idx < 0","List.nil[T].length = 0"]}
{"goal":"reverse[T](List.cons(head, tail)) = reverse[T](tail) + List.singleton(head)","proof":["List.cons(head, tail) != List.cons(head, tail) or reverse[T](tail).append(head) = reverse[T](List.cons(head, tail))","reverse[T](tail) + List.singleton(head) = reverse[T](tail).append(head)","reverse[T](tail).append(head) != reverse[T](List.cons(head, tail))"]}
{"goal":"List.cons(head, tail).length = tail.length.suc","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","List.cons(head, tail) != List.cons(head, tail)"]}
{"goal":"idx < reverse[T](tail).length","proof":["reverse[T](tail).length = tail.length"]}
{"goal":"reverse[T](List.cons(head, tail)).get_idx(idx) = reverse[T](tail).get_idx(idx)","proof":["not idx < reverse[T](tail).length or (reverse[T](tail) + List.singleton(head)).get_idx(idx) = reverse[T](tail).get_idx(idx)","(reverse[T](tail) + List.singleton(head)).get_idx(idx) != reverse[T](tail).get_idx(idx)"]}
{"goal":"reverse[T](tail).get_idx(idx) = tail.get_idx(tail.length - 1 - idx)","proof":["not idx < tail.length or not p(tail) or tail.get_idx(tail.length - 1 - idx) = reverse[T](tail).get_idx(idx)"]}
{"goal":"tail.length.suc - 1 = tail.length","proof":["tail.length.suc - 1 = tail.length"]}
{"goal":"tail.length.suc - 1 - idx = tail.length - idx","proof":["tail.length.suc - 1 != tail.length"]}
{"goal":"idx < tail.length","proof":[]}
{"goal":"idx + 1 <= tail.length","proof":["not idx < tail.length or idx.suc <= tail.length","idx + 1 = 1 + idx","not 1 + idx <= tail.length","1 + idx = idx.suc","idx.suc <= tail.length","not idx.suc <= tail.length"]}
{"goal":"idx + 1 + (tail.length - idx) = tail.length + 1","proof":["not idx <= tail.length or tail.length - idx + idx = tail.length","idx.suc + (tail.length - idx) = (idx + (tail.length - idx)).suc","not idx < tail.length or idx <= tail.length","idx + (tail.length - idx) = tail.length - idx + idx","idx + 1 = idx.suc","tail.length + 1 = tail.length.suc","idx.suc + (tail.length - idx) != tail.length + 1","(idx + (tail.length - idx)).suc != tail.length + 1","idx <= tail.length","(idx + (tail.length - idx)).suc != tail.length.suc","idx + (tail.length - idx) != tail.length","tail.length - idx + idx = tail.length","tail.length - idx + idx != tail.length"]}
{"goal":"1 + (tail.length - idx) = tail.length - idx + 1","proof":["tail.length - idx + 1 = 1 + (tail.length - idx)"]}
{"goal":"tail.length - idx > 0","proof":["not tail.length > idx or tail.length - idx > 0","not tail.length > idx","tail.length > idx = idx < tail.length"]}
{"goal":"List.cons(head, tail).get_idx(tail.length - idx) = tail.get_idx(tail.length - idx - 1)","proof":["not tail.length - idx > 0 or List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).get_idx(tail.length - idx) = tail.get_idx(tail.length - idx - 1)","List.cons(head, tail) != List.cons(head, tail)"]}
{"goal":"1 + idx <= tail.length","proof":["idx + 1 = 1 + idx"]}
{"goal":"tail.length - idx - 1 = tail.length - 1 - idx","proof":["not 1 + idx <= tail.length or tail.length - idx - 1 = tail.length - 1 - idx"]}
{"goal":"tail.get_idx(tail.length - idx - 1) = tail.get_idx(tail.length - 1 - idx)","proof":["tail.length - idx - 1 != tail.length - 1 - idx"]}
{"goal":"List.cons(head, tail).get_idx(tail.length - idx) = tail.get_idx(tail.length - 1 - idx)","proof":["List.cons(head, tail).get_idx(tail.length - idx) != tail.get_idx(tail.length - idx - 1)"]}
{"goal":"List.cons(head, tail).get_idx(tail.length.suc - 1 - idx) = tail.get_idx(tail.length - 1 - idx)","proof":["List.cons(head, tail).get_idx(tail.length - idx) != tail.get_idx(tail.length - 1 - idx)"]}
{"goal":"reverse[T](List.cons(head, tail)).get_idx(idx) = List.cons(head, tail).get_idx(List.cons(head, tail).length - 1 - idx)","proof":[]}
{"goal":"idx = tail.length","proof":["not idx < tail.length.suc or idx < tail.length or tail.length = idx","idx < tail.length.suc","not idx < tail.length.suc"]}
{"goal":"reverse[T](tail).length = tail.length","proof":["reverse[T](tail).length = tail.length"]}
{"goal":"(reverse[T](tail) + List.singleton(head)).get_idx(tail.length) = Option.some(head)","proof":["(reverse[T](tail) + List.singleton(head)).get_idx(reverse[T](tail).length) = Option.some(head)"]}
{"goal":"List.cons(head, tail).get_idx(0) = Option.some(head)","proof":["List.cons(head, tail) != List.cons(head, tail) or 0 > 0 or List.cons(head, tail).get_idx(0) = Option.some(head)","0 > 0 = 0 < 0","not 0 < 0","List.cons(head, tail) != List.cons(head, tail) or 0 > 0","0 > 0"]}
{"goal":"tail.length.suc - 1 = tail.length","proof":["idx.suc - 1 != tail.length","idx.suc - 1 != idx","idx.suc - 1 = idx"]}
{"goal":"tail.length - tail.length = 0","proof":["0 + tail.length != tail.length or tail.length - tail.length = 0","0 + tail.length != tail.length","0 + tail.length = tail.length"]}
{"goal":"reverse[T](List.cons(head, tail)).get_idx(idx) = List.cons(head, tail).get_idx(List.cons(head, tail).length - 1 - idx)","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["List.cons(head, tail).get_idx(List.cons(head, tail).length - 1 - idx) != reverse[T](List.cons(head, tail)).get_idx(idx) or p(List.cons(head, tail))","List.cons(head, tail).get_idx(List.cons(head, tail).length - 1 - idx) != reverse[T](List.cons(head, tail)).get_idx(idx)"]}
{"goal":"reverse_get_idx","proof":["let (s0: T, s1: List[T]) satisfy { forall(x0: List[T]) { not p(List.nil[T]) or p(s1) or p(x0) } and forall(x1: List[T]) { not p(List.cons(s0, s1)) or not p(List.nil[T]) or p(x1) } }","not p(List.nil[T]) or p(s1) or p(s1)","p(s1) or p(s1)","not p(List.cons(s0, s1)) or not p(List.nil[T]) or p(list)","not p(List.cons(s0, s1)) or p(list)","idx < List.cons(s0, s1).length or p(List.cons(s0, s1))","not idx < List.cons(s0, s1).length or not p(s1) or p(List.cons(s0, s1))","not idx < list.length or not p(list) or list.get_idx(list.length - 1 - idx) = reverse[T](list).get_idx(idx)","p(s1)","not p(list)","not p(List.cons(s0, s1))","not idx < List.cons(s0, s1).length","idx < List.cons(s0, s1).length"]}
