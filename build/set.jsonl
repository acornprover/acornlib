{"goal":"negate_fun(negate_fun[K](f), x) = f(x)","proof":["not negate_fun(negate_fun[K](f), x)","negate_fun(negate_fun[K](f), x) or negate_fun(f, x)","negate_fun(f, x)","not negate_fun(f, x) or not f(x)"]}
{"goal":"negate_fun(negate_fun[K](f), x) = f(x)","proof":["negate_fun(negate_fun[K](f), x)","negate_fun(f, x) or f(x)","not negate_fun(negate_fun[K](f), x) or not negate_fun(f, x)","negate_fun(f, x)","not negate_fun(f, x)"]}
{"goal":"neg_of_neg_is_self","proof":["let s0: K satisfy { negate_fun(negate_fun[K](f), s0) != f(s0) }","negate_fun(negate_fun[K](f), s0) = f(s0)"]}
{"goal":"empty_set_is_empty","proof":["let s0: Set[K] -> K satisfy { forall(x0: Set[K], x1: K) { not x0.contains(x1) or not x0.is_empty } and forall(x2: Set[K]) { x2.contains(s0(x2)) or x2.is_empty } }","Set.empty_set[K].contains(s0(Set.empty_set[K])) or Set.empty_set[K].is_empty","Set.empty_set[K].contains(s0(Set.empty_set[K]))","Set.new[K](constant_false[K]).contains(s0(Set.empty_set[K])) = constant_false(s0(Set.empty_set[K]))","not constant_false(s0(Set.empty_set[K]))","Set.new[K](constant_false[K]).contains(s0(Set.empty_set[K]))"]}
{"goal":"singleton_set_is_singleton","proof":["Set.singleton(a) != Set.singleton(a) or Set.singleton(a).is_singleton","Set.singleton(a) != Set.singleton(a)"]}
{"goal":"s.c.c.contains(x)","proof":["Set.new[K](negate_fun[K](s.c.contains)) = s.c.c","Set.new[K](negate_fun[K](s.contains)) = s.c","Set.new[K](negate_fun[K](s.c.contains)).contains(x) = negate_fun(s.c.contains, x)","Set.new[K](negate_fun[K](s.contains)).contains(x) = negate_fun(s.contains, x)","negate_fun(Set.new[K](negate_fun[K](s.contains)).contains, x) or Set.new[K](negate_fun[K](s.contains)).contains(x)","not negate_fun(s.contains, x) or not s.contains(x)","not Set.new[K](negate_fun[K](s.c.contains)).contains(x)","not negate_fun(s.c.contains, x)","not negate_fun(Set.new[K](negate_fun[K](s.contains)).contains, x)","Set.new[K](negate_fun[K](s.contains)).contains(x)","negate_fun(s.contains, x)"]}
{"goal":"not s.c.c.contains(x)","proof":["Set.new[K](negate_fun[K](s.c.contains)) = s.c.c","Set.new[K](negate_fun[K](s.contains)) = s.c","Set.new[K](negate_fun[K](s.c.contains)).contains(x) = negate_fun(s.c.contains, x)","Set.new[K](negate_fun[K](s.contains)).contains(x) = negate_fun(s.contains, x)","negate_fun(s.contains, x) or s.contains(x)","not negate_fun(Set.new[K](negate_fun[K](s.contains)).contains, x) or not Set.new[K](negate_fun[K](s.contains)).contains(x)","Set.new[K](negate_fun[K](s.c.contains)).contains(x)","negate_fun(s.c.contains, x)","negate_fun(Set.new[K](negate_fun[K](s.contains)).contains, x)","not Set.new[K](negate_fun[K](s.contains)).contains(x)","not negate_fun(s.contains, x)"]}
{"goal":"s.c.c.contains(x) = s.contains(x)","proof":["s.contains(x)","not s.c.c.contains(x)"]}
{"goal":"s.c.c.contains = s.contains","proof":["let s0: K satisfy { s.c.c.contains(s0) != s.contains(s0) }","s.c.c.contains(s0) = s.contains(s0)"]}
{"goal":"compl_of_compl_is_self","proof":["Set.new[K](negate_fun[K](s.c.contains)) = s.c.c","Set.new[K](Set.new[K](negate_fun[K](s.c.contains)).contains) = Set.new[K](negate_fun[K](s.c.contains))","Set.new[K](s.contains) = s"]}
{"goal":"e.c.contains(x)","proof":["Set.new[K](negate_fun[K](e.contains)) = e.c","Set.new[K](negate_fun[K](e.contains)).contains(x) = negate_fun(e.contains, x)","not Set.new[K](negate_fun[K](e.contains)).contains(x)","not negate_fun(e.contains, x)","not e.is_empty or not e.contains(x)","negate_fun(e.contains, x) or e.contains(x)","e.is_empty","not e.contains(x)"]}
{"goal":"u.contains(x)","proof":["not Set.universal_set[K].contains(x)","Set.new[K](negate_fun[K](constant_false[K])).contains(x) = negate_fun(constant_false[K], x)","negate_fun(constant_false[K], x) or constant_false(x)","not constant_false(x)","not Set.new[K](negate_fun[K](constant_false[K])).contains(x)","not negate_fun(constant_false[K], x)"]}
{"goal":"e.c.contains = u.contains","proof":["let s0: K satisfy { e.c.contains(s0) != u.contains(s0) }","u.contains(s0)","not e.c.contains(s0)","Set.new[K](negate_fun[K](e.contains)) = e.c","Set.new[K](negate_fun[K](e.contains)).contains(s0) = negate_fun(e.contains, s0)","negate_fun(e.contains, s0) != e.contains(s0)","not e.is_empty or not e.contains(s0)","e.is_empty","not Set.new[K](negate_fun[K](e.contains)).contains(s0)","not negate_fun(e.contains, s0)","negate_fun(e.contains, s0) or e.contains(s0)","not e.contains(s0)"]}
{"goal":"empty_set_compl_is_universal","proof":["Set.new[K](negate_fun[K](e.contains)) = e.c","Set.new[K](Set.new[K](negate_fun[K](Set.empty_set[K].contains)).contains) = Set.new[K](negate_fun[K](Set.empty_set[K].contains))","Set.new[K](u.contains) = u"]}
{"goal":"not u.c.contains(x)","proof":["not u.c.is_empty or not u.c.contains(x)","not u.c.is_empty","e.c.c = e"]}
{"goal":"not e.contains(x)","proof":["Set.empty_set[K].contains(x)","not Set.empty_set[K].is_empty or not Set.empty_set[K].contains(x)","not Set.empty_set[K].is_empty"]}
{"goal":"u.c.contains = e.contains","proof":["let s0: K satisfy { u.c.contains(s0) != e.contains(s0) }","u.c != e","e.c.c = e","e.c.c != u.c","e.c != u"]}
{"goal":"universal_set_compl_is_empty","proof":["Set.new[K](e.contains) = e","Set.new[K](u.c.contains) = u.c"]}
{"goal":"s.contains(a)","proof":["not Set.singleton(a).contains(a)","Set.new[K](singleton_fun(a)).contains(a) = singleton_fun(a, a)","Set.new[K](singleton_fun(a)) = Set.singleton(a)","a != a or singleton_fun(a, a)","singleton_fun(a, a)","not Set.new[K](singleton_fun(a)).contains(a)"]}
{"goal":"singleton_set_is_not_empty","proof":["s.is_empty","not s.contains(a) or not s.is_empty"]}
{"goal":"empty_set_is_always_subset","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","Set.empty_set[K].contains(s0(Set.empty_set[K], s)) or Set.empty_set[K].subset(s)","Set.empty_set[K].contains(s0(Set.empty_set[K], s))","not Set.empty_set[K].contains(s0(Set.empty_set[K], s)) or not Set.empty_set[K].is_empty","not Set.empty_set[K].is_empty"]}
{"goal":"all_sets_subset_universal","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not Set.universal_set[K].contains(s0(s, Set.universal_set[K])) or s.subset(Set.universal_set[K])","not Set.universal_set[K].contains(s0(s, Set.universal_set[K]))","Set.new[K](negate_fun[K](constant_false[K])).contains(s0(s, Set.universal_set[K])) = negate_fun(constant_false[K], s0(s, Set.universal_set[K]))","negate_fun(constant_false[K], s0(s, Set.universal_set[K])) or constant_false(s0(s, Set.universal_set[K]))","not constant_false(s0(s, Set.universal_set[K]))","not Set.new[K](negate_fun[K](constant_false[K])).contains(s0(s, Set.universal_set[K]))","not negate_fun(constant_false[K], s0(s, Set.universal_set[K]))"]}
{"goal":"subset_refl","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not s.contains(s0(s, s)) or s.subset(s)","not s.contains(s0(s, s))","s.contains(s0(s, s)) or s.subset(s)"]}
{"goal":"subset_trans","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not a.contains(s0(a, c)) or not a.subset(b) or b.contains(s0(a, c))","not b.contains(s0(a, c)) or not b.subset(c) or c.contains(s0(a, c))","not c.contains(s0(a, c)) or a.subset(c)","not c.contains(s0(a, c))","a.contains(s0(a, c)) or a.subset(c)","a.contains(s0(a, c))","not b.contains(s0(a, c)) or c.contains(s0(a, c))","not a.contains(s0(a, c)) or b.contains(s0(a, c))","not b.contains(s0(a, c))","b.contains(s0(a, c))"]}
{"goal":"a.contains(x) implies b.contains(x)","proof":["not a.subset(b) or not a.contains(x) or b.contains(x)","not a.subset(b) or not a.contains(x)"]}
{"goal":"b.contains(x) implies a.contains(x)","proof":["not b.subset(a) or not b.contains(x) or a.contains(x)","not b.contains(x) or not b.subset(a)"]}
{"goal":"a.contains(x) = b.contains(x)","proof":["not b.contains(x)","a.contains(x)"]}
{"goal":"a.contains = b.contains","proof":["let s0: K satisfy { b.contains(s0) != a.contains(s0) }","b.contains(s0) = a.contains(s0)"]}
{"goal":"double_inclusion","proof":["Set.new[K](a.contains) = a","Set.new[K](b.contains) = b"]}
{"goal":"difference_subset","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: Set[K], x2: K) { not x0 ⊂ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: Set[K], x4: Set[K]) { s0(x3, x4) ∈ x3 or x3 ⊂ x4 } and forall(x5: Set[K], x6: Set[K]) { not s0(x6, x5) ∈ x5 or x6 ⊂ x5 } }","not s0(a ∖ b, a) ∈ a or a ∖ b ⊂ a","s0(a ∖ b, a) ∈ a ∖ b or a ∖ b ⊂ a","Set.new[K](elem_in_difference[K](a, b)) = a ∖ b","not elem_in_difference(a, b, s0(a ∖ b, a)) or s0(a ∖ b, a) ∈ a","s0(a ∖ b, a) ∈ Set.new[K](elem_in_difference[K](a, b)) = elem_in_difference(a, b, s0(a ∖ b, a))","not s0(a ∖ b, a) ∈ a","s0(a ∖ b, a) ∈ a ∖ b","not s0(a ∖ b, a) ∈ Set.new[K](elem_in_difference[K](a, b)) or elem_in_difference(a, b, s0(a ∖ b, a))","not elem_in_difference(a, b, s0(a ∖ b, a))","s0(a ∖ b, a) ∈ Set.new[K](elem_in_difference[K](a, b))"]}
{"goal":"difference_contains_imp_not_contains","proof":["Set.new[K](elem_in_difference[K](a, b)) = a ∖ b","not elem_in_difference(a, b, x) or not x ∈ b","not elem_in_difference(a, b, x)","x ∈ Set.new[K](elem_in_difference[K](a, b)) = elem_in_difference(a, b, x)","not x ∈ Set.new[K](elem_in_difference[K](a, b)) or elem_in_difference(a, b, x)","x ∈ Set.new[K](elem_in_difference[K](a, b))"]}
{"goal":"difference_contains_imp_contains","proof":["not a ∖ b ⊂ a or not x ∈ a ∖ b or x ∈ a","not a ∖ b ⊂ a or not x ∈ a ∖ b","a ∖ b ⊂ a"]}
{"goal":"difference_contains_of_membership","proof":["not x ∈ a or elem_in_difference(a, b, x) or x ∈ b","Set.new[K](elem_in_difference[K](a, b)) = a ∖ b","x ∈ Set.new[K](elem_in_difference[K](a, b)) = elem_in_difference(a, b, x)","not x ∈ Set.new[K](elem_in_difference[K](a, b))","not elem_in_difference(a, b, x)"]}
{"goal":"difference_of_self_is_empty","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: Set[K], x2: K) { not x0 ⊂ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: Set[K], x4: Set[K]) { s0(x3, x4) ∈ x3 or x3 ⊂ x4 } and forall(x5: Set[K], x6: Set[K]) { not s0(x6, x5) ∈ x5 or x6 ⊂ x5 } }","not s0(a ∖ a, Set.empty_set[K]) ∈ a ∖ a or s0(a ∖ a, Set.empty_set[K]) ∈ a","not s0(a ∖ a, Set.empty_set[K]) ∈ a ∖ a or not s0(a ∖ a, Set.empty_set[K]) ∈ a","not a ∖ a ⊂ Set.empty_set[K] or not Set.empty_set[K] ⊂ a ∖ a or a ∖ a = Set.empty_set[K]","s0(a ∖ a, Set.empty_set[K]) ∈ a ∖ a or a ∖ a ⊂ Set.empty_set[K]","Set.empty_set[K] ⊂ a ∖ a","not a ∖ a ⊂ Set.empty_set[K]","s0(a ∖ a, Set.empty_set[K]) ∈ a ∖ a","s0(a ∖ a, Set.empty_set[K]) ∈ a","not s0(a ∖ a, Set.empty_set[K]) ∈ a"]}
{"goal":"elem_in_union(s, t, x)","proof":["Set.new[K](elem_in_union[K](s, t)) = s ∪ t","x ∈ Set.new[K](elem_in_union[K](s, t)) = elem_in_union(s, t, x)","not x ∈ Set.new[K](elem_in_union[K](s, t)) or elem_in_union(s, t, x)","x ∈ s ∪ t","x ∈ Set.new[K](elem_in_union[K](s, t))"]}
{"goal":"v.contains(x)","proof":["Set.new[K](elem_in_union[K](t, s ∖ t)) = t ∪ (s ∖ t)","not x ∈ t or elem_in_union(t, s ∖ t, x)","x ∈ Set.new[K](elem_in_union[K](t, s ∖ t)) = elem_in_union(t, s ∖ t, x)","not x ∈ t ∪ (s ∖ t)","elem_in_union(t, s ∖ t, x)","not elem_in_union(t, s ∖ t, x) or x ∈ Set.new[K](elem_in_union[K](t, s ∖ t))","not x ∈ Set.new[K](elem_in_union[K](t, s ∖ t))"]}
{"goal":"not t.contains(x)","proof":[]}
{"goal":"s.difference(t).contains(x)","proof":["not x ∈ s"]}
{"goal":"v.contains(x)","proof":["Set.new[K](elem_in_union[K](t, s ∖ t)) = t ∪ (s ∖ t)","not x ∈ s ∖ t or elem_in_union(t, s ∖ t, x)","x ∈ Set.new[K](elem_in_union[K](t, s ∖ t)) = elem_in_union(t, s ∖ t, x)","not x ∈ t ∪ (s ∖ t)","not elem_in_union(t, s ∖ t, x) or x ∈ Set.new[K](elem_in_union[K](t, s ∖ t))","elem_in_union(t, s ∖ t, x)","not x ∈ Set.new[K](elem_in_union[K](t, s ∖ t))"]}
{"goal":"t.contains(x)","proof":["not elem_in_union(s, t, x) or x ∈ s or x ∈ t"]}
{"goal":"v.contains(x)","proof":["Set.new[K](elem_in_union[K](t, s ∖ t)) = t ∪ (s ∖ t)","not x ∈ t or elem_in_union(t, s ∖ t, x)","x ∈ Set.new[K](elem_in_union[K](t, s ∖ t)) = elem_in_union(t, s ∖ t, x)","not x ∈ t ∪ (s ∖ t)","elem_in_union(t, s ∖ t, x)","not elem_in_union(t, s ∖ t, x) or x ∈ Set.new[K](elem_in_union[K](t, s ∖ t))","not x ∈ Set.new[K](elem_in_union[K](t, s ∖ t))"]}
{"goal":"v.contains(x)","proof":["not b.contains(x) or not a.contains(x) or elem_in_intersection(b, a, x)","not b.intersection(a).contains(x)","Set.new[K](elem_in_intersection[K](b, a)) = b.intersection(a)","Set.new[K](elem_in_intersection[K](b, a)).contains(x) = elem_in_intersection(b, a, x)","not b.contains(x) or elem_in_intersection(b, a, x)","elem_in_intersection(b, a, x)","not Set.new[K](elem_in_intersection[K](b, a)).contains(x)"]}
{"goal":"u.subset(v)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not u.contains(s0(u, v)) or v.contains(s0(u, v))","not v.contains(s0(u, v)) or u.subset(v)","not v.contains(s0(u, v))","u.contains(s0(u, v)) or u.subset(v)","not u.contains(s0(u, v))","u.contains(s0(u, v))"]}
{"goal":"elem_in_union(t, s.difference(t), x)","proof":["Set.new[K](elem_in_union[K](t, s ∖ t)) = t ∪ (s ∖ t)","x ∈ Set.new[K](elem_in_union[K](t, s ∖ t)) = elem_in_union(t, s ∖ t, x)","not x ∈ Set.new[K](elem_in_union[K](t, s ∖ t)) or elem_in_union(t, s ∖ t, x)","x ∈ t ∪ (s ∖ t)","x ∈ Set.new[K](elem_in_union[K](t, s ∖ t))"]}
{"goal":"u.contains(x)","proof":["not x ∈ s ∪ t","Set.new[K](elem_in_union[K](s, t)) = s ∪ t","not x ∈ t or elem_in_union(s, t, x)","x ∈ Set.new[K](elem_in_union[K](s, t)) = elem_in_union(s, t, x)","elem_in_union(s, t, x)","not elem_in_union(s, t, x) or x ∈ Set.new[K](elem_in_union[K](s, t))","not x ∈ Set.new[K](elem_in_union[K](s, t))"]}
{"goal":"s.difference(t).contains(x)","proof":["not elem_in_union(t, s ∖ t, x) or x ∈ t or x ∈ s ∖ t"]}
{"goal":"s.contains(x)","proof":[]}
{"goal":"u.contains(x)","proof":["not x ∈ s ∪ t","Set.new[K](elem_in_union[K](s, t)) = s ∪ t","not x ∈ s or elem_in_union(s, t, x)","x ∈ Set.new[K](elem_in_union[K](s, t)) = elem_in_union(s, t, x)","elem_in_union(s, t, x)","not elem_in_union(s, t, x) or x ∈ Set.new[K](elem_in_union[K](s, t))","not x ∈ Set.new[K](elem_in_union[K](s, t))"]}
{"goal":"u.contains(x)","proof":["not a.contains(x) or not b.contains(x) or elem_in_intersection(a, b, x)","not a.intersection(b).contains(x)","Set.new[K](elem_in_intersection[K](a, b)) = a.intersection(b)","Set.new[K](elem_in_intersection[K](a, b)).contains(x) = elem_in_intersection(a, b, x)","not a.contains(x) or elem_in_intersection(a, b, x)","elem_in_intersection(a, b, x)","not Set.new[K](elem_in_intersection[K](a, b)).contains(x)"]}
{"goal":"v.subset(u)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: Set[K], x2: K) { not x0.subset(x1) or not x0.contains(x2) or x1.contains(x2) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not v.contains(s0(v, u)) or u.contains(s0(v, u))","not u.contains(s0(v, u)) or v.subset(u)","not u.contains(s0(v, u))","v.contains(s0(v, u)) or v.subset(u)","not v.contains(s0(v, u))","v.contains(s0(v, u))"]}
{"goal":"union_with_difference_decomp","proof":["s ∪ t != v","v != u","not u ⊂ v or not v ⊂ u or v = u"]}
{"goal":"elem_in_union(s, t, x)","proof":["Set.new[K](elem_in_union[K](s, t)) = s ∪ t","x ∈ Set.new[K](elem_in_union[K](s, t)) = elem_in_union(s, t, x)","not x ∈ Set.new[K](elem_in_union[K](s, t)) or elem_in_union(s, t, x)","x ∈ s ∪ t","x ∈ Set.new[K](elem_in_union[K](s, t))"]}
{"goal":"v.contains(x)","proof":["s ∪ (t ∖ s) = t ∪ s","Set.new[K](elem_in_union[K](t, s)) = t ∪ s","not x ∈ t or elem_in_union(t, s, x)","x ∈ Set.new[K](elem_in_union[K](t, s)) = elem_in_union(t, s, x)","not x ∈ s ∪ (t ∖ s)","not x ∈ t ∪ s","elem_in_union(t, s, x)","not elem_in_union(t, s, x) or x ∈ Set.new[K](elem_in_union[K](t, s))","not x ∈ Set.new[K](elem_in_union[K](t, s))"]}
{"goal":"s.contains(x)","proof":["not elem_in_union(s, t, x) or x ∈ s or x ∈ t"]}
{"goal":"v.contains(x)","proof":["s ∪ (t ∖ s) = t ∪ s","Set.new[K](elem_in_union[K](t, s)) = t ∪ s","not x ∈ s or elem_in_union(t, s, x)","x ∈ Set.new[K](elem_in_union[K](t, s)) = elem_in_union(t, s, x)","not x ∈ s ∪ (t ∖ s)","not x ∈ t ∪ s","elem_in_union(t, s, x)","not elem_in_union(t, s, x) or x ∈ Set.new[K](elem_in_union[K](t, s))","not x ∈ Set.new[K](elem_in_union[K](t, s))"]}
{"goal":"v.contains(x)","proof":["let s0: (TwoType -> Set[K], K) -> TwoType satisfy { forall(x0: TwoType -> Set[K], x1: K, x2: TwoType) { not and_family[K, TwoType](x0, x1) or x0(x2).contains(x1) } and forall(x3: TwoType -> Set[K], x4: K) { not x3(s0(x3, x4)).contains(x4) or and_family[K, TwoType](x3, x4) } }","f_two(s0(f_two, x)).contains(x)","not f_two(s0(f_two, x)).contains(x) or and_family[K, TwoType](f_two, x)","Set.new[K](and_family[K, TwoType](f_two)).contains(x) = and_family[K, TwoType](f_two, x)","not intersection_family[K, TwoType](fun_of_two[K](a, b)).contains(x)","not intersection_family[K, TwoType](f_two).contains(x)","Set.new[K](and_family[K, TwoType](f_two)) = intersection_family[K, TwoType](f_two)","and_family[K, TwoType](f_two, x)","not Set.new[K](and_family[K, TwoType](f_two)).contains(x)"]}
{"goal":"u.subset(v)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not u.contains(s0(u, v)) or v.contains(s0(u, v))","not v.contains(s0(u, v)) or u.subset(v)","not v.contains(s0(u, v))","u.contains(s0(u, v)) or u.subset(v)","not u.contains(s0(u, v))","u.contains(s0(u, v))"]}
{"goal":"elem_in_union(s, t.difference(s), x)","proof":["not x ∈ t or x ∈ t ∖ s or x ∈ s","not elem_in_union(t, s, x) or x ∈ t or x ∈ s","s ∪ (t ∖ s) = t ∪ s","Set.new[K](elem_in_union[K](t, s)) = t ∪ s","not x ∈ t ∖ s or elem_in_union(s, t ∖ s, x)","not x ∈ t ∖ s","not x ∈ s or elem_in_union(s, t ∖ s, x)","not x ∈ s","x ∈ Set.new[K](elem_in_union[K](t, s)) = elem_in_union(t, s, x)","x ∈ s ∪ (t ∖ s)","x ∈ t ∪ s","not x ∈ t","not elem_in_union(t, s, x) or x ∈ t","x ∈ Set.new[K](elem_in_union[K](t, s))","not elem_in_union(t, s, x)","elem_in_union(t, s, x)"]}
{"goal":"u.contains(x)","proof":["not x ∈ s ∪ t","Set.new[K](elem_in_union[K](s, t)) = s ∪ t","not x ∈ s or elem_in_union(s, t, x)","x ∈ Set.new[K](elem_in_union[K](s, t)) = elem_in_union(s, t, x)","elem_in_union(s, t, x)","not elem_in_union(s, t, x) or x ∈ Set.new[K](elem_in_union[K](s, t))","not x ∈ Set.new[K](elem_in_union[K](s, t))"]}
{"goal":"t.difference(s).contains(x)","proof":["not elem_in_union(s, t ∖ s, x) or x ∈ s or x ∈ t ∖ s"]}
{"goal":"t.contains(x)","proof":[]}
{"goal":"u.contains(x)","proof":["not x ∈ s ∪ t","Set.new[K](elem_in_union[K](s, t)) = s ∪ t","not x ∈ t or elem_in_union(s, t, x)","x ∈ Set.new[K](elem_in_union[K](s, t)) = elem_in_union(s, t, x)","elem_in_union(s, t, x)","not elem_in_union(s, t, x) or x ∈ Set.new[K](elem_in_union[K](s, t))","not x ∈ Set.new[K](elem_in_union[K](s, t))"]}
{"goal":"u.contains(x)","proof":["not a.subset(u) or not a.contains(x) or u.contains(x)","not a.contains(x) or not a.subset(u)","not a.subset(u)","a.subset(a.union(b.intersection(c)))"]}
{"goal":"v.subset(u)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not v.contains(s0(v, u)) or u.contains(s0(v, u))","not u.contains(s0(v, u)) or v.subset(u)","not u.contains(s0(v, u))","v.contains(s0(v, u)) or v.subset(u)","not v.contains(s0(v, u))","v.contains(s0(v, u))"]}
{"goal":"union_with_difference_decomp_rev","proof":["s ∪ t != v","v != u","not u ⊂ v or not v ⊂ u or v = u"]}
{"goal":"elem_in_union(s, t, x)","proof":["Set.new[K](elem_in_union[K](s, t)) = s ∪ t","x ∈ Set.new[K](elem_in_union[K](s, t)) = elem_in_union(s, t, x)","not x ∈ Set.new[K](elem_in_union[K](s, t)) or elem_in_union(s, t, x)","x ∈ s ∪ t","x ∈ Set.new[K](elem_in_union[K](s, t))"]}
{"goal":"v.contains(x)","proof":["Set.new[K](elem_in_union[K](s, t ∖ s ∩ t)) = s ∪ (t ∖ s ∩ t)","not x ∈ s or elem_in_union(s, t ∖ s ∩ t, x)","x ∈ Set.new[K](elem_in_union[K](s, t ∖ s ∩ t)) = elem_in_union(s, t ∖ s ∩ t, x)","elem_in_union(s, t ∖ s ∩ t, x)","not x ∈ s ∪ (t ∖ s ∩ t)","not elem_in_union(s, t ∖ s ∩ t, x) or x ∈ Set.new[K](elem_in_union[K](s, t ∖ s ∩ t))","not x ∈ Set.new[K](elem_in_union[K](s, t ∖ s ∩ t))"]}
{"goal":"t.contains(x)","proof":["not elem_in_union(s, t, x) or x ∈ s or x ∈ t"]}
{"goal":"not s.contains(x)","proof":[]}
{"goal":"s.contains(x)","proof":["Set.new[K](elem_in_intersection[K](s, t)) = s ∩ t","not elem_in_intersection(s, t, x) or x ∈ s","not elem_in_intersection(s, t, x)","x ∈ Set.new[K](elem_in_intersection[K](s, t)) = elem_in_intersection(s, t, x)","not x ∈ Set.new[K](elem_in_intersection[K](s, t)) or elem_in_intersection(s, t, x)","x ∈ Set.new[K](elem_in_intersection[K](s, t))"]}
{"goal":"false","proof":[]}
{"goal":"not s.intersection(t).contains(x)","proof":[]}
{"goal":"t.difference(s.intersection(t)).contains(x)","proof":["x ∈ s ∩ t"]}
{"goal":"v.contains(x)","proof":["Set.new[K](elem_in_union[K](s, t ∖ s ∩ t)) = s ∪ (t ∖ s ∩ t)","not x ∈ t ∖ s ∩ t or elem_in_union(s, t ∖ s ∩ t, x)","x ∈ Set.new[K](elem_in_union[K](s, t ∖ s ∩ t)) = elem_in_union(s, t ∖ s ∩ t, x)","not x ∈ s ∪ (t ∖ s ∩ t)","not elem_in_union(s, t ∖ s ∩ t, x) or x ∈ Set.new[K](elem_in_union[K](s, t ∖ s ∩ t))","elem_in_union(s, t ∖ s ∩ t, x)","not x ∈ Set.new[K](elem_in_union[K](s, t ∖ s ∩ t))"]}
{"goal":"v.contains(x)","proof":[]}
{"goal":"u.subset(v)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not u.contains(s0(u, v)) or v.contains(s0(u, v))","not v.contains(s0(u, v)) or u.subset(v)","not v.contains(s0(u, v))","u.contains(s0(u, v)) or u.subset(v)","not u.contains(s0(u, v))","u.contains(s0(u, v))"]}
{"goal":"elem_in_union(s, t.difference(s.intersection(t)), x)","proof":["Set.new[K](elem_in_union[K](s, t ∖ s ∩ t)) = s ∪ (t ∖ s ∩ t)","x ∈ Set.new[K](elem_in_union[K](s, t ∖ s ∩ t)) = elem_in_union(s, t ∖ s ∩ t, x)","not x ∈ Set.new[K](elem_in_union[K](s, t ∖ s ∩ t)) or elem_in_union(s, t ∖ s ∩ t, x)","x ∈ s ∪ (t ∖ s ∩ t)","x ∈ Set.new[K](elem_in_union[K](s, t ∖ s ∩ t))"]}
{"goal":"u.contains(x)","proof":["not x ∈ s ∪ t","Set.new[K](elem_in_union[K](s, t)) = s ∪ t","not x ∈ s or elem_in_union(s, t, x)","x ∈ Set.new[K](elem_in_union[K](s, t)) = elem_in_union(s, t, x)","elem_in_union(s, t, x)","not elem_in_union(s, t, x) or x ∈ Set.new[K](elem_in_union[K](s, t))","not x ∈ Set.new[K](elem_in_union[K](s, t))"]}
{"goal":"t.difference(s.intersection(t)).contains(x)","proof":["not elem_in_union(s, t ∖ s ∩ t, x) or x ∈ s or x ∈ t ∖ s ∩ t"]}
{"goal":"t.contains(x)","proof":[]}
{"goal":"u.contains(x)","proof":["not x ∈ s ∪ t","Set.new[K](elem_in_union[K](s, t)) = s ∪ t","not x ∈ t or elem_in_union(s, t, x)","x ∈ Set.new[K](elem_in_union[K](s, t)) = elem_in_union(s, t, x)","elem_in_union(s, t, x)","not elem_in_union(s, t, x) or x ∈ Set.new[K](elem_in_union[K](s, t))","not x ∈ Set.new[K](elem_in_union[K](s, t))"]}
{"goal":"u.contains(x)","proof":["not b.intersection(c).subset(u) or not b.intersection(c).contains(x) or u.contains(x)","not b.intersection(c).contains(x) or not b.intersection(c).subset(u)","b.intersection(c).subset(a.union(b.intersection(c)))","not b.intersection(c).subset(u)"]}
{"goal":"v.subset(u)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not v.contains(s0(v, u)) or u.contains(s0(v, u))","not u.contains(s0(v, u)) or v.subset(u)","not u.contains(s0(v, u))","v.contains(s0(v, u)) or v.subset(u)","not v.contains(s0(v, u))","v.contains(s0(v, u))"]}
{"goal":"union_with_difference_decomp_inter","proof":["s ∪ t != v","v != u","not u ⊂ v or not v ⊂ u or v = u"]}
{"goal":"a.subset(a.union(b))","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not a.union(b).contains(s0(a, a.union(b))) or a.subset(a.union(b))","a.contains(s0(a, a.union(b))) or a.subset(a.union(b))","Set.new[K](elem_in_union[K](a, b)) = a.union(b)","not a.contains(s0(a, a.union(b))) or elem_in_union(a, b, s0(a, a.union(b)))","Set.new[K](elem_in_union[K](a, b)).contains(s0(a, a.union(b))) = elem_in_union(a, b, s0(a, a.union(b)))","a.contains(s0(a, a.union(b)))","not a.union(b).contains(s0(a, a.union(b)))","elem_in_union(a, b, s0(a, a.union(b)))","not Set.new[K](elem_in_union[K](a, b)).contains(s0(a, a.union(b)))"]}
{"goal":"b.subset(a.union(b))","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not a.union(b).contains(s0(b, a.union(b))) or b.subset(a.union(b))","b.contains(s0(b, a.union(b))) or b.subset(a.union(b))","Set.new[K](elem_in_union[K](a, b)) = a.union(b)","not b.contains(s0(b, a.union(b))) or elem_in_union(a, b, s0(b, a.union(b)))","Set.new[K](elem_in_union[K](a, b)).contains(s0(b, a.union(b))) = elem_in_union(a, b, s0(b, a.union(b)))","b.contains(s0(b, a.union(b)))","not a.union(b).contains(s0(b, a.union(b)))","elem_in_union(a, b, s0(b, a.union(b)))","not Set.new[K](elem_in_union[K](a, b)).contains(s0(b, a.union(b)))"]}
{"goal":"sets_subset_union","proof":["not a.subset(a.union(b))"]}
{"goal":"sets_subset_contain_union","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not elem_in_union(a, b, s0(a.union(b), c)) or a.contains(s0(a.union(b), c)) or b.contains(s0(a.union(b), c))","not a.contains(s0(a.union(b), c)) or not a.subset(c) or c.contains(s0(a.union(b), c))","not b.contains(s0(a.union(b), c)) or not b.subset(c) or c.contains(s0(a.union(b), c))","not c.contains(s0(a.union(b), c)) or a.union(b).subset(c)","a.union(b).contains(s0(a.union(b), c)) or a.union(b).subset(c)","Set.new[K](elem_in_union[K](a, b)) = a.union(b)","Set.new[K](elem_in_union[K](a, b)).contains(s0(a.union(b), c)) = elem_in_union(a, b, s0(a.union(b), c))","not c.contains(s0(a.union(b), c))","a.union(b).contains(s0(a.union(b), c))","not b.contains(s0(a.union(b), c)) or c.contains(s0(a.union(b), c))","not a.contains(s0(a.union(b), c)) or c.contains(s0(a.union(b), c))","not a.contains(s0(a.union(b), c))","not b.contains(s0(a.union(b), c))","Set.new[K](elem_in_union[K](a, b)).contains(s0(a.union(b), c))","elem_in_union(a, b, s0(a.union(b), c))"]}
{"goal":"v.subset(u)","proof":["not b.subset(a.union(b)) or not a.subset(a.union(b)) or b.union(a).subset(a.union(b))","not b.union(a).subset(u)","b.subset(a.union(b))","a.subset(a.union(b))","not b.union(a).subset(a.union(b))"]}
{"goal":"u.subset(v)","proof":["not a.subset(b.union(a)) or not b.subset(b.union(a)) or a.union(b).subset(b.union(a))","not u.subset(b.union(a))","a.subset(b.union(a))","b.subset(b.union(a))","not a.union(b).subset(b.union(a))"]}
{"goal":"union_comm","proof":["a.union(b) != v","v != u","not u.subset(v) or not v.subset(u) or v = u"]}
{"goal":"a.subset(u)","proof":["a.subset(a.union(b.union(c)))"]}
{"goal":"b.subset(u)","proof":["not b.subset(b.union(c)) or not b.union(c).subset(a.union(b.union(c))) or b.subset(a.union(b.union(c)))","b.union(c).subset(a.union(b.union(c)))","b.subset(b.union(c))","not b.subset(a.union(b.union(c)))","not b.union(c).subset(a.union(b.union(c))) or not b.subset(b.union(c))"]}
{"goal":"c.subset(u)","proof":["not c.subset(b.union(c)) or not b.union(c).subset(a.union(b.union(c))) or c.subset(a.union(b.union(c)))","b.union(c).subset(a.union(b.union(c)))","c.subset(b.union(c))","not c.subset(a.union(b.union(c)))","not b.union(c).subset(a.union(b.union(c))) or not c.subset(b.union(c))"]}
{"goal":"v.subset(u)","proof":["not a.subset(u) or not b.subset(u) or a.union(b).subset(u)","not a.union(b).subset(u) or not c.subset(u) or a.union(b).union(c).subset(u)","not a.union(b).union(c).subset(u)","not a.subset(u) or a.union(b).subset(u)","not a.union(b).subset(u)","a.union(b).subset(u)"]}
{"goal":"a.subset(v)","proof":["not a.subset(a.union(b)) or not a.union(b).subset(a.union(b).union(c)) or a.subset(a.union(b).union(c))","a.subset(a.union(b))","a.union(b).subset(a.union(b).union(c))","not a.subset(a.union(b).union(c))","not a.union(b).subset(a.union(b).union(c)) or not a.subset(a.union(b))"]}
{"goal":"b.subset(v)","proof":["not b.subset(a.union(b)) or not a.union(b).subset(a.union(b).union(c)) or b.subset(a.union(b).union(c))","b.subset(a.union(b))","a.union(b).subset(a.union(b).union(c))","not b.subset(a.union(b).union(c))","not a.union(b).subset(a.union(b).union(c)) or not b.subset(a.union(b))"]}
{"goal":"c.subset(v)","proof":["c.subset(a.union(b).union(c))"]}
{"goal":"u.subset(v)","proof":["not a.subset(v) or not b.union(c).subset(v) or a.union(b.union(c)).subset(v)","not b.subset(v) or not c.subset(v) or b.union(c).subset(v)","not a.union(b.union(c)).subset(v)","not b.subset(v) or b.union(c).subset(v)","not b.union(c).subset(v)","b.union(c).subset(v)"]}
{"goal":"union_assoc","proof":["a.union(b).union(c) != u","v != u","not u.subset(v) or not v.subset(u) or v = u"]}
{"goal":"union_idemp","proof":["not s.subset(s) or not s.subset(s) or s.union(s).subset(s)","not s.union(s).subset(s) or not s.subset(s.union(s)) or s.union(s) = s","s.subset(s.union(s))","not s.union(s).subset(s)","s.subset(s)"]}
{"goal":"union_subset_is_set","proof":["not a.subset(b) or not b.subset(b) or a.union(b).subset(b)","not a.union(b).subset(b) or not b.subset(a.union(b)) or a.union(b) = b","b.subset(a.union(b))","not a.union(b).subset(b)","b.subset(b)"]}
{"goal":"union_with_empty_is_self","proof":["not s.subset(s) or not Set.empty_set[K].subset(s) or s.union(Set.empty_set[K]).subset(s)","not s.union(Set.empty_set[K]).subset(s) or not s.subset(s.union(Set.empty_set[K])) or s.union(Set.empty_set[K]) = s","s.subset(s.union(Set.empty_set[K]))","not s.union(Set.empty_set[K]).subset(s)","s.subset(s)","Set.empty_set[K].subset(s)"]}
{"goal":"union_with_universal_is_universal","proof":["not s.subset(Set.universal_set[K]) or s.union(Set.universal_set[K]) = Set.universal_set[K]","not s.subset(Set.universal_set[K])","s.subset(Set.universal_set[K])"]}
{"goal":"a.intersection(b).subset(a)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not a.contains(s0(a.intersection(b), a)) or a.intersection(b).subset(a)","a.intersection(b).contains(s0(a.intersection(b), a)) or a.intersection(b).subset(a)","Set.new[K](elem_in_intersection[K](a, b)) = a.intersection(b)","not elem_in_intersection(a, b, s0(a.intersection(b), a)) or a.contains(s0(a.intersection(b), a))","Set.new[K](elem_in_intersection[K](a, b)).contains(s0(a.intersection(b), a)) = elem_in_intersection(a, b, s0(a.intersection(b), a))","not a.contains(s0(a.intersection(b), a))","a.intersection(b).contains(s0(a.intersection(b), a))","not elem_in_intersection(a, b, s0(a.intersection(b), a))","Set.new[K](elem_in_intersection[K](a, b)).contains(s0(a.intersection(b), a))"]}
{"goal":"a.intersection(b).subset(b)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not b.contains(s0(a.intersection(b), b)) or a.intersection(b).subset(b)","a.intersection(b).contains(s0(a.intersection(b), b)) or a.intersection(b).subset(b)","Set.new[K](elem_in_intersection[K](a, b)) = a.intersection(b)","not elem_in_intersection(a, b, s0(a.intersection(b), b)) or b.contains(s0(a.intersection(b), b))","Set.new[K](elem_in_intersection[K](a, b)).contains(s0(a.intersection(b), b)) = elem_in_intersection(a, b, s0(a.intersection(b), b))","not b.contains(s0(a.intersection(b), b))","a.intersection(b).contains(s0(a.intersection(b), b))","not elem_in_intersection(a, b, s0(a.intersection(b), b))","Set.new[K](elem_in_intersection[K](a, b)).contains(s0(a.intersection(b), b))"]}
{"goal":"sets_subset_intersection","proof":["not a.intersection(b).subset(a)"]}
{"goal":"set_supset_contains_intersection","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: Set[K], x2: K) { not x0.subset(x1) or not x0.contains(x2) or x1.contains(x2) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not a.contains(s0(c, a.intersection(b))) or not b.contains(s0(c, a.intersection(b))) or elem_in_intersection(a, b, s0(c, a.intersection(b)))","not c.subset(a) or not c.contains(s0(c, a.intersection(b))) or a.contains(s0(c, a.intersection(b)))","not c.subset(b) or not c.contains(s0(c, a.intersection(b))) or b.contains(s0(c, a.intersection(b)))","not a.intersection(b).contains(s0(c, a.intersection(b))) or c.subset(a.intersection(b))","c.contains(s0(c, a.intersection(b))) or c.subset(a.intersection(b))","Set.new[K](elem_in_intersection[K](a, b)) = a.intersection(b)","c.subset(a) = a.superset(c)","c.subset(a.intersection(b)) = a.intersection(b).superset(c)","c.subset(b) = b.superset(c)","not c.subset(a.intersection(b))","Set.new[K](elem_in_intersection[K](a, b)).contains(s0(c, a.intersection(b))) = elem_in_intersection(a, b, s0(c, a.intersection(b)))","c.subset(b)","c.subset(a)","c.contains(s0(c, a.intersection(b)))","not a.intersection(b).contains(s0(c, a.intersection(b)))","not c.contains(s0(c, a.intersection(b))) or a.contains(s0(c, a.intersection(b)))","not c.contains(s0(c, a.intersection(b))) or b.contains(s0(c, a.intersection(b)))","b.contains(s0(c, a.intersection(b)))","a.contains(s0(c, a.intersection(b)))","not Set.new[K](elem_in_intersection[K](a, b)).contains(s0(c, a.intersection(b)))","not elem_in_intersection(a, b, s0(c, a.intersection(b)))"]}
{"goal":"a.contains(x)","proof":["not u.contains(x) or not u.subset(a) or a.contains(x)","not u.contains(x) or not u.subset(a)","not u.subset(a)","a.intersection(b).subset(a)"]}
{"goal":"b.contains(x)","proof":["not u.contains(x) or not u.subset(b) or b.contains(x)","not u.contains(x) or not u.subset(b)","not u.subset(b)","a.intersection(b).subset(b)"]}
{"goal":"v.contains(x)","proof":["not x ∈ b or not x ∈ a or elem_in_intersection(b, a, x)","not x ∈ b ∩ a","Set.new[K](elem_in_intersection[K](b, a)) = b ∩ a","x ∈ Set.new[K](elem_in_intersection[K](b, a)) = elem_in_intersection(b, a, x)","not elem_in_intersection(b, a, x) or x ∈ Set.new[K](elem_in_intersection[K](b, a))","not x ∈ b or elem_in_intersection(b, a, x)","elem_in_intersection(b, a, x)","not x ∈ Set.new[K](elem_in_intersection[K](b, a))"]}
{"goal":"u.subset(v)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: Set[K], x2: K) { not x0 ⊂ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: Set[K], x4: Set[K]) { s0(x3, x4) ∈ x3 or x3 ⊂ x4 } and forall(x5: Set[K], x6: Set[K]) { not s0(x6, x5) ∈ x5 or x6 ⊂ x5 } }","not s0(u, v) ∈ u or s0(u, v) ∈ v","not s0(u, v) ∈ v or u ⊂ v","not s0(u, v) ∈ v","s0(u, v) ∈ u or u ⊂ v","not s0(u, v) ∈ u","s0(u, v) ∈ u"]}
{"goal":"a.contains(x)","proof":["not v.contains(x) or not v.subset(a) or a.contains(x)","not v.contains(x) or not v.subset(a)","not v.subset(a)","b.intersection(a).subset(a)"]}
{"goal":"b.contains(x)","proof":["not v.contains(x) or not v.subset(b) or b.contains(x)","not v.contains(x) or not v.subset(b)","not v.subset(b)","b.intersection(a).subset(b)"]}
{"goal":"u.contains(x)","proof":["not x ∈ a or not x ∈ b or elem_in_intersection(a, b, x)","not x ∈ a ∩ b","Set.new[K](elem_in_intersection[K](a, b)) = a ∩ b","x ∈ Set.new[K](elem_in_intersection[K](a, b)) = elem_in_intersection(a, b, x)","not elem_in_intersection(a, b, x) or x ∈ Set.new[K](elem_in_intersection[K](a, b))","not x ∈ a or elem_in_intersection(a, b, x)","elem_in_intersection(a, b, x)","not x ∈ Set.new[K](elem_in_intersection[K](a, b))"]}
{"goal":"u.superset(v)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: K, x2: Set[K]) { not x0.contains(x1) or not x0.subset(x2) or x2.contains(x1) } and forall(x3: Set[K], x4: Set[K]) { x3.contains(s0(x3, x4)) or x3.subset(x4) } and forall(x5: Set[K], x6: Set[K]) { not x5.contains(s0(x6, x5)) or x6.subset(x5) } }","not v.contains(s0(v, u)) or u.contains(s0(v, u))","not u.contains(s0(v, u)) or v.subset(u)","v.contains(s0(v, u)) or v.subset(u)","v.subset(u) = u.superset(v)","not v.subset(u)","v.contains(s0(v, u))","not u.contains(s0(v, u))","u.contains(s0(v, u))"]}
{"goal":"intersection_comm","proof":["a.intersection(b) != v","v != u","not v.subset(u) or not u.subset(v) or v = u","not v.subset(u)","v.subset(u) = u.superset(v)"]}
{"goal":"a.superset(u)","proof":["u.subset(a) = a.superset(u)","not u.subset(a)","a.intersection(b.intersection(c)).subset(a)"]}
{"goal":"b.superset(b.intersection(c))","proof":["c.intersection(b) = b.intersection(c)","b.intersection(c).subset(b) = b.superset(b.intersection(c))","not b.intersection(c).subset(b)","c.intersection(b).subset(b)"]}
{"goal":"b.superset(u)","proof":["not a.intersection(b.intersection(c)).subset(b.intersection(c)) or not b.intersection(c).subset(b) or a.intersection(b.intersection(c)).subset(b)","a.intersection(b.intersection(c)).subset(b) = b.superset(a.intersection(b.intersection(c)))","a.intersection(b.intersection(c)).subset(b.intersection(c))","b.intersection(c).subset(b)","not b.superset(a.intersection(b.intersection(c)))","not a.intersection(b.intersection(c)).subset(b)","not a.intersection(b.intersection(c)).subset(b.intersection(c)) or not b.intersection(c).subset(b)"]}
{"goal":"c.superset(b.intersection(c))","proof":["b.intersection(c).subset(c) = c.superset(b.intersection(c))","not b.intersection(c).subset(c)","b.intersection(c).subset(c)"]}
{"goal":"c.superset(u)","proof":["not a.intersection(b.intersection(c)).subset(b.intersection(c)) or not b.intersection(c).subset(c) or a.intersection(b.intersection(c)).subset(c)","a.intersection(b.intersection(c)).subset(c) = c.superset(a.intersection(b.intersection(c)))","a.intersection(b.intersection(c)).subset(b.intersection(c))","b.intersection(c).subset(c)","not c.superset(a.intersection(b.intersection(c)))","not a.intersection(b.intersection(c)).subset(c)","not a.intersection(b.intersection(c)).subset(b.intersection(c)) or not b.intersection(c).subset(c)"]}
{"goal":"v.superset(u)","proof":["not a.intersection(b).superset(u) or not c.superset(u) or a.intersection(b).intersection(c).superset(u)","not a.superset(u) or not b.superset(u) or a.intersection(b).superset(u)","not a.intersection(b).intersection(c).superset(u)","not a.superset(u) or a.intersection(b).superset(u)","not a.intersection(b).superset(u)","a.intersection(b).superset(u)"]}
{"goal":"a.superset(a.intersection(b))","proof":["b.intersection(a) = a.intersection(b)","a.intersection(b).subset(a) = a.superset(a.intersection(b))","not a.intersection(b).subset(a)","b.intersection(a).subset(a)"]}
{"goal":"a.superset(v)","proof":["not a.intersection(b).intersection(c).subset(a.intersection(b)) or not a.intersection(b).subset(a) or a.intersection(b).intersection(c).subset(a)","a.intersection(b).intersection(c).subset(a) = a.superset(a.intersection(b).intersection(c))","a.intersection(b).intersection(c).subset(a.intersection(b))","a.intersection(b).subset(a)","not a.superset(a.intersection(b).intersection(c))","not a.intersection(b).intersection(c).subset(a)","not a.intersection(b).intersection(c).subset(a.intersection(b)) or not a.intersection(b).subset(a)"]}
{"goal":"b.superset(a.intersection(b))","proof":["a.intersection(b).subset(b) = b.superset(a.intersection(b))","not a.intersection(b).subset(b)","a.intersection(b).subset(b)"]}
{"goal":"b.superset(v)","proof":["not a.intersection(b).intersection(c).subset(a.intersection(b)) or not a.intersection(b).subset(b) or a.intersection(b).intersection(c).subset(b)","a.intersection(b).intersection(c).subset(b) = b.superset(a.intersection(b).intersection(c))","a.intersection(b).subset(b)","a.intersection(b).intersection(c).subset(a.intersection(b))","not b.superset(a.intersection(b).intersection(c))","not a.intersection(b).intersection(c).subset(b)","not a.intersection(b).intersection(c).subset(a.intersection(b)) or not a.intersection(b).subset(b)"]}
{"goal":"c.superset(v)","proof":["v.subset(c) = c.superset(v)","not v.subset(c)","a.intersection(b).intersection(c).subset(c)"]}
{"goal":"u.superset(v)","proof":["not a.superset(v) or not b.intersection(c).superset(v) or a.intersection(b.intersection(c)).superset(v)","not b.superset(v) or not c.superset(v) or b.intersection(c).superset(v)","not a.intersection(b.intersection(c)).superset(v)","not b.superset(v) or b.intersection(c).superset(v)","not b.intersection(c).superset(v)","b.intersection(c).superset(v)"]}
{"goal":"intersection_assoc","proof":["a.intersection(b).intersection(c) != u","v != u","not v.subset(u) or not u.subset(v) or v = u","u.subset(v) = v.superset(u)","v.subset(u) = u.superset(v)","u.subset(v)","v.subset(u)","not v.subset(u)"]}
{"goal":"intersection_idemp","proof":["not s.superset(s) or not s.superset(s) or s.intersection(s).superset(s)","not s.intersection(s).subset(s) or not s.subset(s.intersection(s)) or s.intersection(s) = s","s.subset(s) = s.superset(s)","s.subset(s.intersection(s)) = s.intersection(s).superset(s)","s.intersection(s).subset(s)","not s.subset(s.intersection(s))","not s.intersection(s).superset(s)","s.subset(s)","not s.superset(s)"]}
{"goal":"s.subset(s.intersection(t))","proof":["not s.superset(s) or not t.superset(s) or s.intersection(t).superset(s)","s.intersection(t).superset(s) = s.subset(s.intersection(t))","s.superset(s) = s.subset(s)","t.superset(s) = s.subset(t)","not s.intersection(t).superset(s)","s.subset(s)","t.superset(s)","not s.superset(s)"]}
{"goal":"s.intersection(t).subset(s)","proof":["t.intersection(s) = s.intersection(t)","not t.intersection(s).subset(s)","t.intersection(s).subset(s)"]}
{"goal":"intersection_with_superset_is_self","proof":["not s.subset(s.intersection(t)) or not s.intersection(t).subset(s) or s.intersection(t) = s"]}
{"goal":"intersection_with_universal_is_self","proof":["not s.subset(s.union(Set.universal_set[K])) or s.intersection(s.union(Set.universal_set[K])) = s","s.subset(s.union(Set.universal_set[K]))","s.union(Set.universal_set[K]) = Set.universal_set[K]","s.intersection(s.union(Set.universal_set[K])) != s","not s.subset(s.union(Set.universal_set[K]))"]}
{"goal":"intersection_with_empty_is_empty","proof":["not Set.empty_set[K].subset(s.intersection(Set.empty_set[K])) or not s.intersection(Set.empty_set[K]).subset(Set.empty_set[K]) or s.intersection(Set.empty_set[K]) = Set.empty_set[K]","s.intersection(Set.empty_set[K]).subset(Set.empty_set[K])","not Set.empty_set[K].subset(s.intersection(Set.empty_set[K]))","Set.empty_set[K].subset(s.intersection(Set.empty_set[K]).union(Set.empty_set[K]))","s.intersection(Set.empty_set[K]).union(Set.empty_set[K]) = s.intersection(Set.empty_set[K])"]}
{"goal":"a.subset(a.union(b))","proof":["b.union(a) = a.union(b)","not a.subset(b.union(a))","a.subset(b.union(a))"]}
{"goal":"a.subset(a.union(c))","proof":["c.union(a) = a.union(c)","not a.subset(c.union(a))","a.subset(c.union(a))"]}
{"goal":"a.subset(v)","proof":["not a.union(b).superset(a) or not a.union(c).superset(a) or a.union(b).intersection(a.union(c)).superset(a)","a.union(b).intersection(a.union(c)).superset(a) = a.subset(a.union(b).intersection(a.union(c)))","a.union(b).superset(a) = a.subset(a.union(b))","a.union(c).superset(a) = a.subset(a.union(c))","not a.subset(a.union(b).intersection(a.union(c)))","a.union(c).superset(a)","a.union(b).superset(a)","not a.union(b).intersection(a.union(c)).superset(a)"]}
{"goal":"bc.subset(a.union(b))","proof":["not bc.subset(b) or not b.subset(a.union(b)) or bc.subset(a.union(b))","b.subset(a.union(b))","b.intersection(c).subset(b)","not b.subset(a.union(b)) or not bc.subset(b)","not bc.subset(b)"]}
{"goal":"bc.subset(a.union(c))","proof":["not bc.subset(c) or not c.subset(a.union(c)) or bc.subset(a.union(c))","c.subset(a.union(c))","b.intersection(c).subset(c)","not c.subset(a.union(c)) or not bc.subset(c)","not bc.subset(c)"]}
{"goal":"v.superset(bc)","proof":["not a.union(b).superset(bc) or not a.union(c).superset(bc) or a.union(b).intersection(a.union(c)).superset(bc)","a.union(b).superset(bc) = bc.subset(a.union(b))","a.union(c).superset(bc) = bc.subset(a.union(c))","not a.union(b).intersection(a.union(c)).superset(bc)","a.union(c).superset(bc)","a.union(b).superset(bc)","not a.union(b).superset(bc)"]}
{"goal":"bc.subset(v)","proof":["v.superset(bc) = bc.subset(v)"]}
{"goal":"u.subset(v)","proof":["not a.subset(v) or not b.intersection(c).subset(v) or a.union(b.intersection(c)).subset(v)","not a.union(b.intersection(c)).subset(v)","b.intersection(c).subset(v)","not b.intersection(c).subset(v)"]}
{"goal":"a.union(b).contains(x)","proof":["not v.subset(a.union(b)) or not v.contains(x) or a.union(b).contains(x)","a.union(b).intersection(a.union(c)).subset(a.union(b))","not v.subset(a.union(b)) or not v.contains(x)","not v.subset(a.union(b))"]}
{"goal":"a.union(c).contains(x)","proof":["not v.subset(a.union(c)) or not v.contains(x) or a.union(c).contains(x)","a.union(b).intersection(a.union(c)).subset(a.union(c))","not v.subset(a.union(c)) or not v.contains(x)","not v.subset(a.union(c))"]}
{"goal":"u.contains(x)","proof":["not a ⊂ u or not x ∈ a or x ∈ u","not a ⊂ u or not x ∈ a","not a ⊂ u","a ⊂ a ∪ b ∩ c"]}
{"goal":"b.contains(x)","proof":["not elem_in_union(a, b, x) or a.contains(x) or b.contains(x)","Set.new[K](elem_in_union[K](a, b)) = a.union(b)","Set.new[K](elem_in_union[K](a, b)).contains(x) = elem_in_union(a, b, x)","not elem_in_union(a, b, x) or a.contains(x)","not elem_in_union(a, b, x)","Set.new[K](elem_in_union[K](a, b)).contains(x)"]}
{"goal":"c.contains(x)","proof":["not elem_in_union(a, c, x) or a.contains(x) or c.contains(x)","Set.new[K](elem_in_union[K](a, c)) = a.union(c)","Set.new[K](elem_in_union[K](a, c)).contains(x) = elem_in_union(a, c, x)","not elem_in_union(a, c, x) or a.contains(x)","not elem_in_union(a, c, x)","Set.new[K](elem_in_union[K](a, c)).contains(x)"]}
{"goal":"b.intersection(c).contains(x)","proof":["not b.contains(x) or not c.contains(x) or elem_in_intersection(b, c, x)","Set.new[K](elem_in_intersection[K](b, c)) = b.intersection(c)","Set.new[K](elem_in_intersection[K](b, c)).contains(x) = elem_in_intersection(b, c, x)","not Set.new[K](elem_in_intersection[K](b, c)).contains(x)","not elem_in_intersection(b, c, x)"]}
{"goal":"u.contains(x)","proof":["not b ∩ c ⊂ u or not x ∈ b ∩ c or x ∈ u","not b ∩ c ⊂ u or not x ∈ b ∩ c","b ∩ c ⊂ a ∪ b ∩ c","not b ∩ c ⊂ u"]}
{"goal":"v.subset(u)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: Set[K], x2: K) { not x0 ⊂ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: Set[K], x4: Set[K]) { s0(x3, x4) ∈ x3 or x3 ⊂ x4 } and forall(x5: Set[K], x6: Set[K]) { not s0(x6, x5) ∈ x5 or x6 ⊂ x5 } }","not s0(v, u) ∈ v or s0(v, u) ∈ u","not s0(v, u) ∈ u or v ⊂ u","not s0(v, u) ∈ u","s0(v, u) ∈ v or v ⊂ u","not s0(v, u) ∈ v","s0(v, u) ∈ v"]}
{"goal":"union_intersection_distrib","proof":["a.union(b.intersection(c)) != v","v != u","not u.subset(v) or not v.subset(u) or v = u"]}
{"goal":"v = v_simp","proof":["union_family[K, TwoType](fun_of_two[K](a, b)) = family_union_of_two[K](a, b)"]}
{"goal":"f_two(TwoType.first) = a","proof":["fun_of_two[K](a, b, TwoType.first) = f_two(TwoType.first)","fun_of_two[K](a, b, TwoType.first) != a","TwoType.first != TwoType.first or fun_of_two[K](a, b, TwoType.first) = a"]}
{"goal":"f_two(TwoType.second) = b","proof":["fun_of_two[K](a, b, TwoType.second) = f_two(TwoType.second)","fun_of_two[K](a, b, TwoType.second) != b","TwoType.second != TwoType.second or fun_of_two[K](a, b, TwoType.second) = b"]}
{"goal":"u.contains(x) implies a.union(b).contains(x)","proof":[]}
{"goal":"u.contains(x) implies a.contains(x) or b.contains(x)","proof":["not elem_in_union(a, b, x) or a.contains(x) or b.contains(x)","Set.new[K](elem_in_union[K](a, b)) = a.union(b)","Set.new[K](elem_in_union[K](a, b)).contains(x) = elem_in_union(a, b, x)","not elem_in_union(a, b, x) or a.contains(x)","not elem_in_union(a, b, x)","Set.new[K](elem_in_union[K](a, b)).contains(x)"]}
{"goal":"a.contains(x) implies v_simp.contains(x)","proof":["not union_family[K, TwoType](f_two).contains(x)","not f_two(TwoType.first).contains(x) or or_family[K, TwoType](f_two, x)","Set.new[K](or_family[K, TwoType](f_two)).contains(x) = or_family[K, TwoType](f_two, x)","Set.new[K](or_family[K, TwoType](f_two)) = union_family[K, TwoType](f_two)","f_two(TwoType.first).contains(x)","not Set.new[K](or_family[K, TwoType](f_two)).contains(x)","or_family[K, TwoType](f_two, x)","not or_family[K, TwoType](f_two, x)"]}
{"goal":"b.contains(x) implies v_simp.contains(x)","proof":["not union_family[K, TwoType](f_two).contains(x)","not f_two(TwoType.second).contains(x) or or_family[K, TwoType](f_two, x)","Set.new[K](or_family[K, TwoType](f_two)).contains(x) = or_family[K, TwoType](f_two, x)","Set.new[K](or_family[K, TwoType](f_two)) = union_family[K, TwoType](f_two)","f_two(TwoType.second).contains(x)","not Set.new[K](or_family[K, TwoType](f_two)).contains(x)","or_family[K, TwoType](f_two, x)","not or_family[K, TwoType](f_two, x)"]}
{"goal":"u.contains(x) implies v.contains(x)","proof":["not v_simp.contains(x)","not a.contains(x)","not b.contains(x)","b.contains(x)"]}
{"goal":"u.subset(v)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: Set[K], x2: K) { not x0 ⊂ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: Set[K], x4: Set[K]) { s0(x3, x4) ∈ x3 or x3 ⊂ x4 } and forall(x5: Set[K], x6: Set[K]) { not s0(x6, x5) ∈ x5 or x6 ⊂ x5 } }","not s0(u, v) ∈ u or s0(u, v) ∈ v","not s0(u, v) ∈ v or u ⊂ v","not s0(u, v) ∈ v","s0(u, v) ∈ u or u ⊂ v","not s0(u, v) ∈ u","s0(u, v) ∈ u"]}
{"goal":"v_simp.contains(x)","proof":[]}
{"goal":"exists(k0: TwoType) { f_two(k0).contains(x) }","proof":["let s0: (TwoType -> Set[K], K) -> TwoType satisfy { forall(x0: TwoType -> Set[K], x1: K) { not or_family[K, TwoType](x0, x1) or x0(s0(x0, x1)).contains(x1) } and forall(x2: TwoType -> Set[K], x3: TwoType, x4: K) { not x2(x3).contains(x4) or or_family[K, TwoType](x2, x4) } }","not f_two(s0(f_two, x)).contains(x)","not or_family[K, TwoType](f_two, x) or f_two(s0(f_two, x)).contains(x)","not or_family[K, TwoType](f_two, x)","Set.new[K](or_family[K, TwoType](f_two)).contains(x) = or_family[K, TwoType](f_two, x)","Set.new[K](or_family[K, TwoType](f_two)) = union_family[K, TwoType](f_two)","union_family[K, TwoType](f_two).contains(x)","Set.new[K](or_family[K, TwoType](f_two)).contains(x)"]}
{"goal":"a.contains(x)","proof":[]}
{"goal":"b.contains(x)","proof":[]}
{"goal":"u.contains(x)","proof":["not a.union(b).contains(x)","not a.contains(x) or not a.subset(a.union(b)) or a.union(b).contains(x)","Set.new[K](elem_in_union[K](a, b)) = a.union(b)","not b.contains(x) or elem_in_union(a, b, x)","Set.new[K](elem_in_union[K](a, b)).contains(x) = elem_in_union(a, b, x)","a.subset(a.union(b))","not Set.new[K](elem_in_union[K](a, b)).contains(x)","not elem_in_union(a, b, x)","not a.subset(a.union(b)) or not a.contains(x)","not a.contains(x)","not b.contains(x)","b.contains(x)"]}
{"goal":"v.subset(u)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: Set[K], x2: K) { not x0 ⊂ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: Set[K], x4: Set[K]) { s0(x3, x4) ∈ x3 or x3 ⊂ x4 } and forall(x5: Set[K], x6: Set[K]) { not s0(x6, x5) ∈ x5 or x6 ⊂ x5 } }","not s0(v, u) ∈ v or s0(v, u) ∈ u","not s0(v, u) ∈ u or v ⊂ u","not s0(v, u) ∈ u","s0(v, u) ∈ v or v ⊂ u","not s0(v, u) ∈ v","s0(v, u) ∈ v"]}
{"goal":"union_is_family_union_of_two","proof":["a.union(b) != v","v != u","not u.subset(v) or not v.subset(u) or v = u"]}
{"goal":"a.contains(x)","proof":["not u.contains(x) or not u.subset(a) or a.contains(x)","not u.contains(x) or not u.subset(a)","not u.subset(a)","a.intersection(b).subset(a)"]}
{"goal":"b.contains(x)","proof":["not u.contains(x) or not u.subset(b) or b.contains(x)","not u.contains(x) or not u.subset(b)","not u.subset(b)","a.intersection(b).subset(b)"]}
{"goal":"f_two(t).contains(x)","proof":["fun_of_two[K](a, b, t) = f_two(t)","TwoType.first != TwoType.first or fun_of_two[K](a, b, TwoType.first) = a","not fun_of_two[K](a, b, t).contains(x)","not fun_of_two[K](a, b, TwoType.first).contains(x)","fun_of_two[K](a, b, TwoType.first) = a"]}
{"goal":"f_two(t).contains(x)","proof":["fun_of_two[K](a, b, t) = f_two(t)","TwoType.second != TwoType.second or fun_of_two[K](a, b, TwoType.second) = b","not fun_of_two[K](a, b, t).contains(x)","not fun_of_two[K](a, b, TwoType.second).contains(x)","fun_of_two[K](a, b, TwoType.second) = b"]}
{"goal":"v.contains(x)","proof":["let s0: (TwoType -> Set[K], K) -> TwoType satisfy { forall(x0: TwoType -> Set[K], x1: K, x2: TwoType) { not and_family[K, TwoType](x0, x1) or x1 ∈ x0(x2) } and forall(x3: TwoType -> Set[K], x4: K) { not x4 ∈ x3(s0(x3, x4)) or and_family[K, TwoType](x3, x4) } }","x ∈ f_two(s0(f_two, x))","not x ∈ f_two(s0(f_two, x)) or and_family[K, TwoType](f_two, x)","x ∈ Set.new[K](and_family[K, TwoType](f_two)) = and_family[K, TwoType](f_two, x)","not x ∈ intersection_family[K, TwoType](fun_of_two[K](a, b))","not x ∈ intersection_family[K, TwoType](f_two)","Set.new[K](and_family[K, TwoType](f_two)) = intersection_family[K, TwoType](f_two)","and_family[K, TwoType](f_two, x)","not and_family[K, TwoType](f_two, x) or x ∈ Set.new[K](and_family[K, TwoType](f_two))","not x ∈ Set.new[K](and_family[K, TwoType](f_two))"]}
{"goal":"u.contains(x) implies v.contains(x)","proof":[]}
{"goal":"u.subset(v)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: Set[K], x2: K) { not x0 ⊂ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: Set[K], x4: Set[K]) { s0(x3, x4) ∈ x3 or x3 ⊂ x4 } and forall(x5: Set[K], x6: Set[K]) { not s0(x6, x5) ∈ x5 or x6 ⊂ x5 } }","not s0(u, v) ∈ u or s0(u, v) ∈ v","not s0(u, v) ∈ v or u ⊂ v","not s0(u, v) ∈ v","s0(u, v) ∈ u or u ⊂ v","not s0(u, v) ∈ u","s0(u, v) ∈ u"]}
{"goal":"f_two(TwoType.first) = a","proof":["fun_of_two[K](a, b, TwoType.first) = f_two(TwoType.first)","fun_of_two[K](a, b, TwoType.first) != a","TwoType.first != TwoType.first or fun_of_two[K](a, b, TwoType.first) = a"]}
{"goal":"f_two(TwoType.second) = b","proof":["fun_of_two[K](a, b, TwoType.second) = f_two(TwoType.second)","fun_of_two[K](a, b, TwoType.second) != b","TwoType.second != TwoType.second or fun_of_two[K](a, b, TwoType.second) = b"]}
{"goal":"intersection_family[K, TwoType](f_two).contains(x)","proof":[]}
{"goal":"f_two(TwoType.first).contains(x)","proof":["not and_family[K, TwoType](f_two, x) or f_two(TwoType.first).contains(x)","not and_family[K, TwoType](f_two, x)","Set.new[K](and_family[K, TwoType](f_two)).contains(x) = and_family[K, TwoType](f_two, x)","Set.new[K](and_family[K, TwoType](f_two)) = intersection_family[K, TwoType](f_two)","Set.new[K](and_family[K, TwoType](f_two)).contains(x)"]}
{"goal":"f_two(TwoType.second).contains(x)","proof":["not and_family[K, TwoType](f_two, x) or f_two(TwoType.second).contains(x)","not and_family[K, TwoType](f_two, x)","Set.new[K](and_family[K, TwoType](f_two)).contains(x) = and_family[K, TwoType](f_two, x)","Set.new[K](and_family[K, TwoType](f_two)) = intersection_family[K, TwoType](f_two)","Set.new[K](and_family[K, TwoType](f_two)).contains(x)"]}
{"goal":"u.contains(x)","proof":["not f_two(TwoType.first).contains(x) or not f_two(TwoType.second).contains(x) or elem_in_intersection(f_two(TwoType.first), f_two(TwoType.second), x)","not a.intersection(b).contains(x)","Set.new[K](elem_in_intersection[K](a, b)) = a.intersection(b)","Set.new[K](elem_in_intersection[K](a, b)).contains(x) = elem_in_intersection(a, b, x)","not f_two(TwoType.first).contains(x) or elem_in_intersection(f_two(TwoType.first), f_two(TwoType.second), x)","elem_in_intersection(f_two(TwoType.first), f_two(TwoType.second), x)","elem_in_intersection(a, f_two(TwoType.second), x)","elem_in_intersection(a, b, x)","not Set.new[K](elem_in_intersection[K](a, b)).contains(x)"]}
{"goal":"v.subset(u)","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: Set[K], x2: K) { not x0 ⊂ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: Set[K], x4: Set[K]) { s0(x3, x4) ∈ x3 or x3 ⊂ x4 } and forall(x5: Set[K], x6: Set[K]) { not s0(x6, x5) ∈ x5 or x6 ⊂ x5 } }","not s0(v, u) ∈ v or s0(v, u) ∈ u","not s0(v, u) ∈ u or v ⊂ u","not s0(v, u) ∈ u","s0(v, u) ∈ v or v ⊂ u","not s0(v, u) ∈ v","s0(v, u) ∈ v"]}
{"goal":"intersection_is_family_intersection_of_two","proof":["a.intersection(b) != v","v != u","not u.subset(v) or not v.subset(u) or v = u"]}
{"goal":"a.is_finite","proof":[]}
{"goal":"b.is_finite","proof":[]}
{"goal":"exists(k0: List[K]) { forall(x0: K) { a.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: K -> Bool -> List[K], s1: (K -> Bool, List[K]) -> K) satisfy { forall(x0: K -> Bool, x1: K) { not finite_constraint[K](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: K -> Bool, x3: List[K]) { x2(s1(x2, x3)) or finite_constraint[K](x2) } and forall(x4: List[K], x5: K -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[K](x5) } }","let s2: List[K] -> K satisfy { forall(x6: List[K]) { s2(x6) ∈ a } and forall(x7: List[K]) { not s2(x7) ∈ x7 } }","not s2(s0(a.contains)) ∈ s0(a.contains)","s2(s0(a.contains)) ∈ a","not finite_constraint[K](a.contains) or not s2(s0(a.contains)) ∈ a or s2(s0(a.contains)) ∈ s0(a.contains)","not s2(s0(a.contains)) ∈ a or not finite_constraint[K](a.contains)","finite_constraint[K](a.contains) = a.is_finite","finite_constraint[K](a.contains)"]}
{"goal":"exists(k0: List[K]) { forall(x0: K) { b.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: K -> Bool -> List[K], s1: (K -> Bool, List[K]) -> K) satisfy { forall(x0: K -> Bool, x1: K) { not finite_constraint[K](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: K -> Bool, x3: List[K]) { x2(s1(x2, x3)) or finite_constraint[K](x2) } and forall(x4: List[K], x5: K -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[K](x5) } }","let s2: List[K] -> K satisfy { forall(x6: List[K]) { s2(x6) ∈ b } and forall(x7: List[K]) { not s2(x7) ∈ x7 } }","not s2(s0(b.contains)) ∈ s0(b.contains)","s2(s0(b.contains)) ∈ b","not finite_constraint[K](b.contains) or not s2(s0(b.contains)) ∈ b or s2(s0(b.contains)) ∈ s0(b.contains)","not s2(s0(b.contains)) ∈ b or not finite_constraint[K](b.contains)","finite_constraint[K](b.contains) = b.is_finite","finite_constraint[K](b.contains)"]}
{"goal":"superset_a.contains(x)","proof":["not x ∈ a or x ∈ superset_a"]}
{"goal":"superset_union.contains(x)","proof":["not x ∈ superset_a + superset_b","not x ∈ superset_a or x ∈ superset_a + superset_b"]}
{"goal":"superset_b.contains(x)","proof":["not x ∈ b or x ∈ superset_b"]}
{"goal":"superset_union.contains(x)","proof":["not x ∈ superset_a + superset_b","not x ∈ superset_b or x ∈ superset_a + superset_b"]}
{"goal":"superset_union.contains(x)","proof":["not x ∈ a or x ∈ superset_union"]}
{"goal":"b.contains(x)","proof":["not elem_in_union(a, b, x) or x ∈ a or x ∈ b"]}
{"goal":"superset_union.contains(x)","proof":["not x ∈ b or x ∈ superset_union"]}
{"goal":"elem_in_union(a, b, x)","proof":["Set.new[K](elem_in_union[K](a, b)) = a ∪ b","x ∈ Set.new[K](elem_in_union[K](a, b)) = elem_in_union(a, b, x)","not x ∈ Set.new[K](elem_in_union[K](a, b)) or elem_in_union(a, b, x)","x ∈ Set.new[K](elem_in_union[K](a, b))"]}
{"goal":"superset_union.contains(x)","proof":["not elem_in_union(a, b, x) or x ∈ superset_union","not x ∈ a ∪ b or elem_in_union(a, b, x)","not elem_in_union(a, b, x)","elem_in_union(a, b, x)"]}
{"goal":"exists(k0: List[K]) { k0 = superset_union and forall(x0: K) { a.union(b).contains(x0) implies k0.contains(x0) } }","proof":["let s0: List[K] -> K satisfy { forall(x0: List[K]) { superset_union != x0 or s0(x0) ∈ a ∪ b } and forall(x1: List[K]) { not s0(x1) ∈ x1 or superset_union != x1 } }","superset_union != superset_union or s0(superset_union) ∈ a ∪ b","not s0(superset_union) ∈ superset_union or superset_union != superset_union","not s0(superset_union) ∈ superset_union","not s0(superset_union) ∈ a ∪ b or s0(superset_union) ∈ superset_union","s0(superset_union) ∈ a ∪ b","not s0(superset_union) ∈ a ∪ b"]}
{"goal":"union_is_finite_of_finite","proof":["let (s0: K -> Bool -> List[K], s1: (K -> Bool, List[K]) -> K) satisfy { forall(x0: K -> Bool, x1: K) { not finite_constraint[K](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: K -> Bool, x3: List[K]) { x2(s1(x2, x3)) or finite_constraint[K](x2) } and forall(x4: List[K], x5: K -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[K](x5) } }","let s2: List[K] satisfy { s2 = superset_union and forall(x6: K) { not x6 ∈ a ∪ b or x6 ∈ s2 } }","not s1((a ∪ b).contains, s2) ∈ a ∪ b or s1((a ∪ b).contains, s2) ∈ s2","not s1((a ∪ b).contains, s2) ∈ s2 or finite_constraint[K]((a ∪ b).contains)","s1((a ∪ b).contains, s2) ∈ a ∪ b or finite_constraint[K]((a ∪ b).contains)","finite_constraint[K]((a ∪ b).contains) = (a ∪ b).is_finite","not finite_constraint[K]((a ∪ b).contains)","not s1((a ∪ b).contains, s2) ∈ s2","s1((a ∪ b).contains, s2) ∈ a ∪ b"]}
{"goal":"a.is_finite","proof":[]}
{"goal":"exists(k0: List[K]) { forall(x0: K) { a.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: K -> Bool -> List[K], s1: (K -> Bool, List[K]) -> K) satisfy { forall(x0: K -> Bool, x1: K) { not finite_constraint[K](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: K -> Bool, x3: List[K]) { x2(s1(x2, x3)) or finite_constraint[K](x2) } and forall(x4: List[K], x5: K -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[K](x5) } }","let s2: List[K] -> K satisfy { forall(x6: List[K]) { s2(x6) ∈ a } and forall(x7: List[K]) { not s2(x7) ∈ x7 } }","not s2(s0(a.contains)) ∈ s0(a.contains)","s2(s0(a.contains)) ∈ a","not finite_constraint[K](a.contains) or not s2(s0(a.contains)) ∈ a or s2(s0(a.contains)) ∈ s0(a.contains)","not s2(s0(a.contains)) ∈ a or not finite_constraint[K](a.contains)","finite_constraint[K](a.contains) = a.is_finite","finite_constraint[K](a.contains)"]}
{"goal":"a.contains(x)","proof":["not a ∩ b ⊂ a or not x ∈ a ∩ b or x ∈ a","not a ∩ b ⊂ a or not x ∈ a ∩ b","a ∩ b ⊂ a"]}
{"goal":"superset_a.contains(x)","proof":["not x ∈ a or x ∈ superset_a"]}
{"goal":"exists(k0: List[K]) { k0 = superset_a and forall(x0: K) { a.intersection(b).contains(x0) implies k0.contains(x0) } }","proof":["let s0: List[K] -> K satisfy { forall(x0: List[K]) { superset_a != x0 or s0(x0) ∈ a ∩ b } and forall(x1: List[K]) { not s0(x1) ∈ x1 or superset_a != x1 } }","superset_a != superset_a or s0(superset_a) ∈ a ∩ b","not s0(superset_a) ∈ superset_a or superset_a != superset_a","not s0(superset_a) ∈ superset_a","not s0(superset_a) ∈ a ∩ b or s0(superset_a) ∈ superset_a","s0(superset_a) ∈ a ∩ b","not s0(superset_a) ∈ a ∩ b"]}
{"goal":"intersection_is_finite_of_finite","proof":["let (s0: K -> Bool -> List[K], s1: (K -> Bool, List[K]) -> K) satisfy { forall(x0: K -> Bool, x1: K) { not finite_constraint[K](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: K -> Bool, x3: List[K]) { x2(s1(x2, x3)) or finite_constraint[K](x2) } and forall(x4: List[K], x5: K -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[K](x5) } }","let s2: List[K] satisfy { s2 = superset_a and forall(x6: K) { not x6 ∈ a ∩ b or x6 ∈ s2 } }","not s1((a ∩ b).contains, s2) ∈ a ∩ b or s1((a ∩ b).contains, s2) ∈ s2","not s1((a ∩ b).contains, s2) ∈ s2 or finite_constraint[K]((a ∩ b).contains)","s1((a ∩ b).contains, s2) ∈ a ∩ b or finite_constraint[K]((a ∩ b).contains)","finite_constraint[K]((a ∩ b).contains) = (a ∩ b).is_finite","not finite_constraint[K]((a ∩ b).contains)","not s1((a ∩ b).contains, s2) ∈ s2","s1((a ∩ b).contains, s2) ∈ a ∩ b"]}
{"goal":"a.is_finite","proof":[]}
{"goal":"exists(k0: List[K]) { forall(x0: K) { a.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: K -> Bool -> List[K], s1: (K -> Bool, List[K]) -> K) satisfy { forall(x0: K -> Bool, x1: K) { not finite_constraint[K](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: K -> Bool, x3: List[K]) { x2(s1(x2, x3)) or finite_constraint[K](x2) } and forall(x4: List[K], x5: K -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[K](x5) } }","let s2: List[K] -> K satisfy { forall(x6: List[K]) { s2(x6) ∈ a } and forall(x7: List[K]) { not s2(x7) ∈ x7 } }","not s2(s0(a.contains)) ∈ s0(a.contains)","s2(s0(a.contains)) ∈ a","not finite_constraint[K](a.contains) or not s2(s0(a.contains)) ∈ a or s2(s0(a.contains)) ∈ s0(a.contains)","not s2(s0(a.contains)) ∈ a or not finite_constraint[K](a.contains)","finite_constraint[K](a.contains) = a.is_finite","finite_constraint[K](a.contains)"]}
{"goal":"a.contains(x)","proof":["Set.new[K](elem_in_difference[K](a, b)) = a ∖ b","not elem_in_difference(a, b, x) or x ∈ a","not elem_in_difference(a, b, x)","x ∈ Set.new[K](elem_in_difference[K](a, b)) = elem_in_difference(a, b, x)","not x ∈ Set.new[K](elem_in_difference[K](a, b)) or elem_in_difference(a, b, x)","x ∈ Set.new[K](elem_in_difference[K](a, b))"]}
{"goal":"superset_a.contains(x)","proof":["not x ∈ a or x ∈ superset_a"]}
{"goal":"exists(k0: List[K]) { k0 = superset_a and forall(x0: K) { a.difference(b).contains(x0) implies k0.contains(x0) } }","proof":["let s0: List[K] -> K satisfy { forall(x0: List[K]) { superset_a != x0 or s0(x0) ∈ a ∖ b } and forall(x1: List[K]) { not s0(x1) ∈ x1 or superset_a != x1 } }","superset_a != superset_a or s0(superset_a) ∈ a ∖ b","not s0(superset_a) ∈ superset_a or superset_a != superset_a","not s0(superset_a) ∈ superset_a","not s0(superset_a) ∈ a ∖ b or s0(superset_a) ∈ superset_a","s0(superset_a) ∈ a ∖ b","not s0(superset_a) ∈ a ∖ b"]}
{"goal":"difference_is_finite_of_finite","proof":["let (s0: K -> Bool -> List[K], s1: (K -> Bool, List[K]) -> K) satisfy { forall(x0: K -> Bool, x1: K) { not finite_constraint[K](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: K -> Bool, x3: List[K]) { x2(s1(x2, x3)) or finite_constraint[K](x2) } and forall(x4: List[K], x5: K -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[K](x5) } }","let s2: List[K] satisfy { s2 = superset_a and forall(x6: K) { not x6 ∈ a ∖ b or x6 ∈ s2 } }","not s1((a ∖ b).contains, s2) ∈ a ∖ b or s1((a ∖ b).contains, s2) ∈ s2","not s1((a ∖ b).contains, s2) ∈ s2 or finite_constraint[K]((a ∖ b).contains)","s1((a ∖ b).contains, s2) ∈ a ∖ b or finite_constraint[K]((a ∖ b).contains)","finite_constraint[K]((a ∖ b).contains) = (a ∖ b).is_finite","not finite_constraint[K]((a ∖ b).contains)","not s1((a ∖ b).contains, s2) ∈ s2","s1((a ∖ b).contains, s2) ∈ a ∖ b"]}
