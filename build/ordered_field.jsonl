{"goal":"F.0 <= b - a","proof":["not lib(util).is_transitive[F](F.lte) or not F.0 <= a + -a or not a + -a <= b + -a or F.0 <= b + -a","not a <= b or a + -a <= b + -a","b + -a = b - a","F.0 <= F.0 or F.0 <= F.0","not F.0 <= b + -a","a + -a = F.0","F.0 <= F.0","a + -a <= b + -a","not a + -a <= b + -a or not F.0 <= a + -a","not F.0 <= a + -a"]}
{"goal":"F.0 <= (b - a) * c","proof":["not F.0 <= b - a or not F.0 <= c or F.0 <= (b - a) * c"]}
{"goal":"F.0 <= b * c - a * c","proof":["b * c + -a * c = (b + -a) * c","-a * c = -(a * c)","b * c + -(a * c) = b * c - a * c","b + -a = b - a","F.0.min(b * c - a * c) = b * c - a * c or F.0 <= b * c - a * c","not F.0 <= (b - a) * c or F.0.min((b - a) * c) = F.0","b * c - a * c <= F.0 or F.0 <= b * c - a * c","((b - a) * c).min(F.0) = F.0.min((b - a) * c)","(b * c - a * c).min(F.0) = F.0.min(b * c - a * c)","F.0 >= b * c - a * c = b * c - a * c <= F.0","b * c - a * c >= F.0 = F.0 <= b * c - a * c","b * c - a * c <= F.0","F.0.min(b * c - a * c) = b * c - a * c","F.0.min((b - a) * c) = F.0"]}
{"goal":"F.0 + a * c <= b * c - a * c + a * c","proof":["not F.0 <= b * c - a * c or F.0 + a * c <= b * c - a * c + a * c"]}
{"goal":"a * c <= b * c + -a * c + a * c","proof":["-a * c = -(a * c)","b * c + -(a * c) = b * c - a * c","a * c + F.0 = F.0 + a * c","b * c + -a * c + a * c >= a * c = a * c <= b * c + -a * c + a * c","b * c - a * c + a * c >= F.0 + a * c = F.0 + a * c <= b * c - a * c + a * c","a * c + F.0 = a * c"]}
{"goal":"multiply_inequality_with_nonnegative_element","proof":["(b + -a) * c + a * c = (b + -a + a) * c","b * c + -a * c = (b + -a) * c","b + -a + a = b + (-a + a)","-a + a = F.0","b + F.0 = b","a * c <= (b + -a) * c + a * c","not a * c <= (b + F.0) * c","a * c <= (b + -a + a) * c","a * c <= (b + (-a + a)) * c"]}
{"goal":"multiply_with_nonpositive_flips_inequality","proof":["not F.0 <= -c or not -b <= -a or -b * -c <= -a * -c","not a <= b or -b <= -a","-a * -c = a * c","-b * -c = b * c","not c <= F.0 or F.0 <= -c","F.0 <= -c","not b * c <= -a * -c","-b <= -a","not -b * -c <= -a * -c"]}
{"goal":"b.inverse != a.inverse","proof":["not a < b or b != a","b != a","a.inverse.inverse = a","b.inverse.inverse = b"]}
{"goal":"F.0 <= a.inverse","proof":["not F.1 <= F.0 or not a.inverse <= F.0 or F.0 * F.1 <= a.inverse * F.1","not F.0 <= a or not a.inverse <= F.0 or a.inverse * a <= F.0 * a","a * a.inverse = F.1 or F.0 = a","not F.0 < a or F.0 <= a","a.inverse * a = a * a.inverse","a.inverse <= F.0 or F.0 <= a.inverse","a.inverse <= F.0","not F.0 < a or F.0 != a","F.0 != a","F.0 * a = F.0","F.0 * F.1 = F.0","a.inverse * F.1 = a.inverse","not F.0 <= a.inverse * F.1","F.0 <= a","not F.0 * F.1 <= a.inverse * F.1","a * a.inverse = F.1","not F.1 <= F.0","not F.0 <= a or a.inverse * a <= F.0 * a","a.inverse * a <= F.0 * a"]}
{"goal":"F.0 <= b.inverse","proof":["not F.1 <= F.0 or not b.inverse <= F.0 or F.0 * F.1 <= b.inverse * F.1","not F.0 <= b or not b.inverse <= F.0 or b.inverse * b <= F.0 * b","b * b.inverse = F.1 or F.0 = b","not F.0 < b or F.0 <= b","b.inverse * b = b * b.inverse","b.inverse <= F.0 or F.0 <= b.inverse","b.inverse <= F.0","not F.0 < b or F.0 != b","F.0 != b","F.0 * b = F.0","F.0 * F.1 = F.0","b.inverse * F.1 = b.inverse","not F.0 <= b.inverse * F.1","F.0 <= b","not F.0 * F.1 <= b.inverse * F.1","b * b.inverse = F.1","not F.1 <= F.0","not F.0 <= b or b.inverse * b <= F.0 * b","b.inverse * b <= F.0 * b"]}
{"goal":"a * a.inverse <= b * a.inverse","proof":["not F.0 <= a.inverse or not a <= b or a * a.inverse <= b * a.inverse","not a <= b","not a < b or a <= b"]}
{"goal":"F.1 <= b * a.inverse","proof":["a * a.inverse = F.1 or F.0 = a","not F.0 < a or F.0 != a","F.0 != a","a * a.inverse = F.1"]}
{"goal":"b.inverse * F.1 <= b.inverse * b * a.inverse","proof":["not F.0 <= b.inverse or not F.1 <= b * a.inverse or F.1 * b.inverse <= b * a.inverse * b.inverse","b.inverse * (b * a.inverse) = b.inverse * b * a.inverse","b.inverse * (b * a.inverse) = b * a.inverse * b.inverse","b.inverse * F.1 = F.1 * b.inverse","not b.inverse * F.1 <= b.inverse * (b * a.inverse)","not F.1 * b.inverse <= b.inverse * (b * a.inverse)","not F.1 * b.inverse <= b * a.inverse * b.inverse"]}
{"goal":"b.inverse * b = F.1","proof":["b * b.inverse = F.1 or F.0 = b","b.inverse * b = b * b.inverse","b * b.inverse != F.1","F.0 = b","b < b","not b < b or b != b"]}
{"goal":"b.inverse <= F.1 * a.inverse","proof":["F.1 * a.inverse >= b.inverse = b.inverse <= F.1 * a.inverse","b.inverse * b * a.inverse >= b.inverse * F.1 = b.inverse * F.1 <= b.inverse * b * a.inverse","b.inverse * F.1 = b.inverse"]}
{"goal":"b.inverse <= a.inverse","proof":["a.inverse * (b.inverse * b) = b.inverse * b * a.inverse","F.1 * a.inverse >= b.inverse = b.inverse <= F.1 * a.inverse","a.inverse >= b.inverse = b.inverse <= a.inverse","a.inverse * F.1 = a.inverse"]}
{"goal":"inverse_on_positive_flips_inequality","proof":["not b.inverse <= a.inverse or b.inverse < a.inverse or b.inverse = a.inverse"]}
{"goal":"-a >= F.0","proof":["not a <= F.0 or F.0 <= -a","-a >= F.0 = F.0 <= -a","a >= F.0 = F.0 <= a","not F.0 <= -a","not F.0 <= a","not a <= F.0","a <= F.0 or F.0 <= a"]}
{"goal":"a * a = -a * -a","proof":["-a * -a = a * a"]}
{"goal":"squares_are_nonnegative","proof":["not a <= F.0 or not a <= F.0 or F.0 * a <= a * a","not F.0 <= a or not F.0 <= a or F.0 <= a * a","a * a >= F.0 = F.0 <= a * a","not F.0 <= a * a","not F.0 <= a","F.0 <= a or a <= F.0","F.0 * a = F.0","not F.0 * a <= a * a","a <= F.0","not a <= F.0"]}
{"goal":"even_pows_are_nonnegative","proof":["a.pow(n) * a.pow(n) = a.pow(n + n)","n + Nat.1 * n = Nat.1.suc * n","a.pow(n) * a.pow(n) >= F.0","Nat.1 * n = n","not a.pow(Nat.1.suc * n) >= F.0","not a.pow(n + Nat.1 * n) >= F.0","not a.pow(n + n) >= F.0"]}
{"goal":"exists(k0: Nat) { n = Int.from_nat(k0) }","proof":["Int.from_nat(lib(int.int_base).abs(n)) != n","not n >= Int.0 or n.max(Int.0) = n","not n < Int.0 or n.max(Int.0) = Int.0","Int.from_nat(lib(int.int_base).abs(n)) = n or n.is_negative","n.is_negative","not n < Int.0 or Int.0 != n","not n.is_negative or n < Int.0","n.max(Int.0) = n","n < Int.0","Int.0 != n","n.max(Int.0) = Int.0","n.max(Int.0) != Int.0"]}
{"goal":"Int.2 * n = Int.from_nat(Nat.2 * k)","proof":["Int.from_nat(Nat.2) * Int.from_nat(k) = Int.from_nat(Nat.2 * k)"]}
{"goal":"a.zpow(Int.2 * n) = a.pow(Nat.2 * k)","proof":["Int.from_nat(Nat.2 * k) != Int.2 * n or a.zpow(Int.2 * n) = a.pow(Nat.2 * k)"]}
{"goal":"nonnegative_even_zpows_are_nonnegative","proof":["not a.pow(Nat.2 * k) >= F.0","a.pow(Nat.2 * k) >= F.0"]}
{"goal":"a.zpow(Int.2 * n) = a.zpow(Int.2 * -n).inverse","proof":["a.zpow(Int.2 * -n).inverse = a.zpow(-(Int.2 * -n))","a.zpow(-(Int.2 * -n)) != a.zpow(Int.2 * n)","-(Int.2 * -n) != Int.2 * n","-Int.2 * -n = -(Int.2 * -n)","-Int.2 * -n = Int.2 * n"]}
{"goal":"n <= Int.0","proof":["Int.0 <= n = n >= Int.0","Int.0 <= n or n <= Int.0","not Int.0 <= n","Int.0 <= n"]}
{"goal":"-n >= Int.0","proof":["not n <= Int.0 or Int.0 <= -n","Int.0 <= -n = -n >= Int.0","Int.0 <= -n","not Int.0 <= -n"]}
{"goal":"Int.2 * -n >= Int.0","proof":["not n <= Int.0 or not n <= Int.0 or n + n <= Int.0 + Int.0","Int.2 * -n = -(Int.2 * n)","not n + n <= Int.0 or Int.0 <= -(n + n)","Int.0 <= Int.2 * -n = Int.2 * -n >= Int.0","Int.2 * n = n + n","not Int.0 <= Int.2 * -n","Int.0 + Int.0 = Int.0","not Int.0 <= -(Int.2 * n)","not Int.0 <= -(n + n)","not n <= Int.0 or n + n <= Int.0 + Int.0","n + n <= Int.0 + Int.0","not n + n <= Int.0","n + n <= Int.0"]}
{"goal":"a.zpow(Int.2 * -n) >= F.0","proof":["not -n >= Int.0 or a.zpow(Int.2 * -n) >= F.0"]}
{"goal":"a.zpow(Int.2 * -n).inverse >= F.0","proof":["not -n >= Int.0 or a.inverse.zpow(Int.2 * -n) >= F.0","a.zpow(Int.2 * -n).inverse = a.zpow(-(Int.2 * -n))","not a.zpow(-(Int.2 * -n)) >= F.0","a.inverse.zpow(Int.2 * -n) = a.zpow(-(Int.2 * -n))","not a.inverse.zpow(Int.2 * -n) >= F.0"]}
{"goal":"even_zpows_are_nonnegative","proof":["not n >= Int.0 or a.zpow(Int.2 * n) >= F.0","not n >= Int.0","a.zpow(Int.2 * -n).inverse = a.zpow(-(Int.2 * -n))","-Int.2 * -n = Int.2 * n","-Int.2 * -n = -(Int.2 * -n)","not a.zpow(-Int.2 * -n) >= F.0","not a.zpow(-(Int.2 * -n)) >= F.0","a.zpow(Int.2 * -n).inverse >= F.0","not a.zpow(Int.2 * -n).inverse >= F.0"]}
{"goal":"zero_is_smaller_than_one","proof":["not F.0 <= F.1 or F.0 < F.1 or F.0 = F.1","not F.0 <= F.1 or F.0 = F.1","F.1 >= F.0 = F.0 <= F.1","F.1 * F.1 >= F.0","F.1 * F.1 = F.1","not F.0 <= F.1","not F.1 >= F.0"]}
{"goal":"f(Nat.0)","proof":["F.0 <= a.pow(Nat.0) = f(Nat.0)","not F.0 <= a.pow(Nat.0)","not F.0 < F.1 or F.0 <= F.1","Nat.0 != Nat.0 or a.pow(Nat.0) = F.1","a.pow(Nat.0) = F.1","not F.0 <= F.1"]}
{"goal":"pows_of_nonnegative_are_nonnegative","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","F.0 <= a.pow(n) = f(n)","F.0 <= a.pow(s0(f)) = f(s0(f))","F.0 <= a.pow(s0(f).suc) = f(s0(f).suc)","not f(n)","s0(f).suc != s0(f).suc or a * a.pow(s0(f)) = a.pow(s0(f).suc)","not F.0 <= a or not F.0 <= a.pow(s0(f)) or F.0 <= a * a.pow(s0(f))","not f(s0(f).suc) or not f(Nat.0) or f(n)","not f(s0(f).suc)","not f(Nat.0) or f(s0(f)) or f(n)","f(s0(f))","a * a.pow(s0(f)) = a.pow(s0(f).suc)","not F.0 <= a.pow(s0(f)) or F.0 <= a * a.pow(s0(f))","F.0 <= a.pow(s0(f))","not F.0 <= a.pow(s0(f).suc)","F.0 <= a * a.pow(s0(f))","not F.0 <= a * a.pow(s0(f))"]}
{"goal":"exists(k0: Nat) { n = Int.from_nat(k0) }","proof":["Int.from_nat(lib(int.int_base).abs(n)) != n","not n >= Int.0 or n.max(Int.0) = n","not n < Int.0 or n.max(Int.0) = Int.0","Int.from_nat(lib(int.int_base).abs(n)) = n or n.is_negative","n.is_negative","not n < Int.0 or Int.0 != n","not n.is_negative or n < Int.0","n.max(Int.0) = n","n < Int.0","Int.0 != n","n.max(Int.0) = Int.0","n.max(Int.0) != Int.0"]}
{"goal":"a.zpow(n) = a.pow(k)","proof":["Int.from_nat(k) != n or a.zpow(n) = a.pow(k)"]}
{"goal":"nonnegative_zpows_of_nonnegative_are_nonnegative","proof":["not F.0 <= a.pow(k)","not F.0 <= a or F.0 <= a.pow(k)"]}
{"goal":"a != F.0","proof":["F.0 > a.inverse = a.inverse < F.0","a.inverse < F.0","F.0.inverse < F.0","not F.0.inverse < F.0 or F.0.inverse != F.0","F.0.inverse != F.0"]}
{"goal":"F.0 * a.inverse >= a * a.inverse","proof":["not a.inverse <= F.0 or not F.0 <= a or a * a.inverse <= F.0 * a.inverse","not a.inverse < F.0 or a.inverse <= F.0","F.0 > a.inverse = a.inverse < F.0","a.inverse < F.0","F.0 * a.inverse >= a * a.inverse = a * a.inverse <= F.0 * a.inverse","not a * a.inverse <= F.0 * a.inverse","a.inverse <= F.0","not a.inverse <= F.0"]}
{"goal":"F.0 >= a * a.inverse","proof":["F.0 * a.inverse = F.0"]}
{"goal":"F.0 >= F.1","proof":["a * a.inverse = F.1 or F.0 = a","a * a.inverse = F.1"]}
{"goal":"false","proof":["not lib(util).is_antisymmetric[F](F.lte) or not F.0 <= F.1 or not F.1 <= F.0 or F.0 = F.1","not F.0 < F.1 or F.0 <= F.1","F.0 >= F.1 = F.1 <= F.0","F.1 <= F.0","F.0 != F.1 or F.0 = a","F.0 != F.1","not F.0 <= F.1"]}
{"goal":"inverse_of_nonnegative_is_nonnegative","proof":["not a.inverse <= F.0 or a.inverse < F.0 or a.inverse = F.0","a.inverse <= F.0 or F.0 <= a.inverse","a.inverse <= F.0","F.0 > a.inverse = a.inverse < F.0","not a.inverse < F.0","a.inverse = F.0"]}
{"goal":"-n >= Int.0","proof":["not n <= Int.0 or Int.0 <= -n","Int.0 <= -n = -n >= Int.0","Int.0 <= n = n >= Int.0","not Int.0 <= -n","n <= Int.0 or Int.0 <= n","not Int.0 <= n","not n <= Int.0","n <= Int.0"]}
{"goal":"a.zpow(n) = a.zpow(-n).inverse","proof":["a.zpow(--n) = a.zpow(-n).inverse","--n = n"]}
{"goal":"F.0 <= a.zpow(-n)","proof":["not -n >= Int.0 or not F.0 <= a or F.0 <= a.zpow(-n)"]}
{"goal":"F.0 <= a.zpow(-n).inverse","proof":["not F.0 <= a.zpow(-n) or F.0 <= a.zpow(-n).inverse"]}
{"goal":"zpows_of_nonnegative_are_nonnegative","proof":["not n >= Int.0 or not F.0 <= a or F.0 <= a.zpow(n)","not n >= Int.0","a.zpow(--n) = a.zpow(-n).inverse","--n = n","not F.0 <= a.zpow(--n)","F.0 <= a.zpow(-n).inverse","not F.0 <= a.zpow(-n).inverse"]}
{"goal":"F.0 <= a.pow(Nat.2)","proof":["a.pow(Nat.2 * Nat.1) >= F.0","a.pow(Nat.2) >= F.0 = F.0 <= a.pow(Nat.2)","not a.pow(Nat.2) >= F.0","Nat.2 * Nat.1 = Nat.2"]}
{"goal":"a.pow(Nat.2 * n) * a <= F.0 * a","proof":["not a <= F.0 or not F.0 <= a.pow(Nat.2 * n) or a.pow(Nat.2 * n) * a <= F.0 * a","a.pow(Nat.2 * n) >= F.0","not a < F.0 or a <= F.0","a.pow(Nat.2 * n) >= F.0 = F.0 <= a.pow(Nat.2 * n)","a <= F.0","not F.0 <= a.pow(Nat.2 * n)"]}
{"goal":"a.pow(Nat.2 * n + Nat.1) <= F.0","proof":["a.pow(Nat.1) * a.pow(Nat.2 * n) = a.pow(Nat.1 + Nat.2 * n)","F.0 * a >= a.pow(Nat.2 * n) * a = a.pow(Nat.2 * n) * a <= F.0 * a","F.0 >= a.pow(Nat.2 * n + Nat.1) = a.pow(Nat.2 * n + Nat.1) <= F.0","a.pow(Nat.2 * n) * a = a * a.pow(Nat.2 * n)","Nat.2 * n + Nat.1 = Nat.1 + Nat.2 * n","F.0 * a = F.0","a.pow(Nat.1) = a"]}
{"goal":"a.pow(Nat.2 * n + Nat.1) != F.0","proof":["a.pow(Nat.2 * n + Nat.1) != F.0 or F.0 = a","F.0 = a","a < a","not a < a or a != a"]}
{"goal":"odd_pows_of_negative_are_negative","proof":["not a.pow(Nat.2 * n + Nat.1) <= F.0 or a.pow(Nat.2 * n + Nat.1) < F.0 or a.pow(Nat.2 * n + Nat.1) = F.0"]}
{"goal":"exists(k0: Nat) { n = Int.from_nat(k0) }","proof":["Int.from_nat(lib(int.int_base).abs(n)) != n","not Int.0 <= n or not n < Int.0 or n < n","Int.from_nat(lib(int.int_base).abs(n)) = n or n.is_negative","n.is_negative","not n.is_negative or n < Int.0","not n < n","not n < Int.0 or n < n","n < Int.0","not n < Int.0"]}
{"goal":"Int.2 * n + Int.1 = Int.from_nat(Nat.2 * k + Nat.1)","proof":["Int.from_nat(Nat.2) * Int.from_nat(k) = Int.from_nat(Nat.2 * k)","Int.from_nat(Nat.1) + Int.from_nat(Nat.2 * k) = Int.from_nat(Nat.1 + Nat.2 * k)","Int.2 * n + Int.1 = Int.1 + Int.2 * n","Nat.2 * k + Nat.1 = Nat.1 + Nat.2 * k"]}
{"goal":"nonnegative_odd_zpows_of_negative_are_negative","proof":["not a < F.0 or a.pow(Nat.2 * k + Nat.1) < F.0","Int.from_nat(Nat.2 * k + Nat.1) != Int.from_nat(Nat.2 * k + Nat.1) or a.zpow(Int.from_nat(Nat.2 * k + Nat.1)) = a.pow(Nat.2 * k + Nat.1)","a.zpow(Int.from_nat(Nat.2 * k + Nat.1)) = a.pow(Nat.2 * k + Nat.1)","not a.zpow(Int.from_nat(Nat.2 * k + Nat.1)) < F.0","not a.pow(Nat.2 * k + Nat.1) < F.0"]}
