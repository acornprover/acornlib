{"goal":"Nat.0.suc = Nat.1","proof":[]}
{"goal":"Nat.1.range = List.singleton(Nat.0)","proof":["Nat.0.until(Nat.0.suc) = Nat.0.upto(Nat.0)","Nat.0.upto(Nat.0) = Nat.0.suc.range","Nat.0.until(Nat.0.suc) = List.singleton(Nat.0)"]}
{"goal":"Nat.0 - Nat.0 = Nat.0","proof":["-lib(int.int_base).Int.from_nat(Nat.0) != lib(int.int_base).sub_nat(Nat.0, Nat.0) or Nat.0 + Nat.0 = Nat.0","Nat.0 + Nat.0 != Nat.0 or Nat.0 - Nat.0 = Nat.0","Nat.0 + Nat.0 != Nat.0","-lib(int.int_base).Int.from_nat(Nat.0) = lib(int.int_base).sub_nat(Nat.0, Nat.0)"]}
{"goal":"mapped = List.singleton(a(Nat.0) * b(Nat.0))","proof":["let s0: Nat -> Real satisfy { forall(x0: Nat) { a(x0) * b(Nat.0 - x0) = s0(x0) } }","a(Nat.0) * b(Nat.0 - Nat.0) = s0(Nat.0)","map[Nat, Real](List.singleton(Nat.0), s0) = List.singleton(s0(Nat.0))"]}
{"goal":"sum[Real](mapped) = a(Nat.0) * b(Nat.0)","proof":["let s0: Nat -> Real satisfy { forall(x0: Nat) { a(x0) * b(Nat.0 - x0) = s0(x0) } }","a(Nat.0) * b(Nat.0 - Nat.0) = s0(Nat.0)","sum[Real](map[Nat, Real](Nat.1.range, s0)) = partial[Real](s0, Nat.1)","partial[Real](s0, Nat.1) = s0(Nat.0)"]}
{"goal":"cauchy_product_zero","proof":["sum[Real](map[Nat, Real](Nat.0.suc.range, cauchy_coefficient(a, b, Nat.0))) = cauchy_product(a, b, Nat.0)","a(Nat.0) * b(Nat.0 - Nat.0) = cauchy_coefficient(a, b, Nat.0, Nat.0)","sum[Real](map[Nat, Real](Nat.0.suc.range, cauchy_coefficient(a, b, Nat.0))) = partial[Real](cauchy_coefficient(a, b, Nat.0), Nat.0.suc)","partial[Real](cauchy_coefficient(a, b, Nat.0), Nat.1) = cauchy_coefficient(a, b, Nat.0, Nat.0)"]}
{"goal":"map[T, Real](List.nil[T], f) = List.nil[Real]","proof":["List.nil[T].map(f) = map[T, Real](List.nil[T], f)","List.nil[T].map(f) != List.nil[Real]","List.nil[T] != List.nil[T] or List.nil[T].map(f) = List.nil[Real]"]}
{"goal":"sum[Real](List.nil[Real]) = 0","proof":["List.nil[Real] != List.nil[Real] or sum[Real](List.nil[Real]) = 0"]}
{"goal":"p(List.nil[T])","proof":["sum[Real](map[T, Real](List.nil[T], f)) != 0 or p(List.nil[T])","sum[Real](map[T, Real](List.nil[T], f)) = 0","sum[Real](map[T, Real](List.nil[T], f)) != 0"]}
{"goal":"sum[Real](map[T, Real](tail, f)) = 0","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { f(s0(x0)) != 0 or not p(x0) or sum[Real](map[T, Real](x0, f)) = 0 } and forall(x1: T, x2: List[T]) { 0 = f(x1) or p(x2) } and forall(x3: List[T]) { sum[Real](map[T, Real](x3, f)) != 0 or p(x3) } }","f(s0(tail)) = 0","f(s0(tail)) != 0 or not p(tail) or sum[Real](map[T, Real](tail, f)) = 0","not p(tail) or sum[Real](map[T, Real](tail, f)) = 0"]}
{"goal":"map[T, Real](List.cons(head, tail), f) = List.cons(f(head), map[T, Real](tail, f))","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(f(head), map[T, Real](tail, f)) = map[T, Real](List.cons(head, tail), f)"]}
{"goal":"sum[Real](List.cons(f(head), map[T, Real](tail, f))) = f(head) + sum[Real](map[T, Real](tail, f))","proof":["f(head) + sum[Real](map[T, Real](tail, f)) != sum[Real](map[T, Real](List.cons(head, tail), f))","List.cons(f(head), map[T, Real](tail, f)) != map[T, Real](List.cons(head, tail), f) or f(head) + sum[Real](map[T, Real](tail, f)) = sum[Real](map[T, Real](List.cons(head, tail), f))"]}
{"goal":"f(head) = 0","proof":["f(head) = 0"]}
{"goal":"sum[Real](List.cons(f(head), map[T, Real](tail, f))) = 0 + 0","proof":[]}
{"goal":"sum[Real](List.cons(f(head), map[T, Real](tail, f))) = 0","proof":["sum[Real](List.cons(f(head), map[T, Real](tail, f))) != 0 + 0 or sum[Real](List.cons(f(head), map[T, Real](tail, f))) - 0 = 0","sum[Real](List.cons(f(head), map[T, Real](tail, f))) - 0 != 0 or sum[Real](List.cons(f(head), map[T, Real](tail, f))) = 0","sum[Real](List.cons(f(head), map[T, Real](tail, f))) - 0 = 0","sum[Real](List.cons(f(head), map[T, Real](tail, f))) - 0 != 0"]}
{"goal":"sum[Real](map[T, Real](List.cons(head, tail), f)) = 0","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["let s0: T satisfy { f(s0) != 0 or sum[Real](map[T, Real](List.cons(head, tail), f)) = 0 }","f(s0) = 0","sum[Real](map[T, Real](List.cons(head, tail), f)) != 0 or p(List.cons(head, tail))"]}
{"goal":"sum_map_zero","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { f(s0(x0)) != 0 or not p(x0) or sum[Real](map[T, Real](x0, f)) = 0 } and forall(x1: T, x2: List[T]) { 0 = f(x1) or p(x2) } and forall(x3: List[T]) { sum[Real](map[T, Real](x3, f)) != 0 or p(x3) } }","f(s0(items)) = 0","let (s1: (List[T] -> Bool) -> T, s2: (List[T] -> Bool) -> List[T]) satisfy { forall(x4: List[T] -> Bool, x5: List[T]) { not x4(List.nil[T]) or x4(s2(x4)) or x4(x5) } and forall(x6: List[T] -> Bool, x7: List[T]) { not x6(List.cons(s1(x6), s2(x6))) or not x6(List.nil[T]) or x6(x7) } }","not p(s2(p)) or p(List.cons(s1(p), s2(p)))","f(s0(items)) != 0 or not p(items) or sum[Real](map[T, Real](items, f)) = 0","not p(items) or sum[Real](map[T, Real](items, f)) = 0","not p(items)","not p(List.cons(s1(p), s2(p))) or not p(List.nil[T]) or p(items)","not p(List.nil[T]) or p(s2(p)) or p(items)","p(s2(p)) or p(items)","p(s2(p))","not p(List.cons(s1(p), s2(p))) or p(items)","not p(List.cons(s1(p), s2(p)))"]}
{"goal":"cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)","proof":["a(k) * b(n - k) = cauchy_coefficient(a, b, n, k)"]}
{"goal":"a(k) = 0","proof":["constant(0, k) = a(k)","constant(0, k) != 0","constant(0, k) = 0"]}
{"goal":"0 * b(n - k) = 0","proof":["n - k = lib(nat.nat_base).bounded_sub(n, k)","0 * b(lib(nat.nat_base).bounded_sub(n, k)) != 0","0 * b(lib(nat.nat_base).bounded_sub(n, k)) = 0"]}
{"goal":"cauchy_coefficient_zero_left","proof":[]}
{"goal":"cauchy_coefficient(a, b, n)(k) = 0","proof":["cauchy_coefficient(constant[Nat, Real](0), b, n, k) = 0"]}
{"goal":"constant[Nat, Real](0)(k) = 0","proof":["constant(0, k) = 0"]}
{"goal":"cauchy_coefficient_zero_left_fn","proof":["let s0: Nat satisfy { cauchy_coefficient(constant[Nat, Real](0), b, n, s0) != constant(0, s0) }","constant(0, s0) = 0","cauchy_coefficient(constant[Nat, Real](0), b, n, s0) != 0","cauchy_coefficient(constant[Nat, Real](0), b, n, s0) = 0"]}
{"goal":"cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)","proof":["a(k) * b(n - k) = cauchy_coefficient(a, b, n, k)"]}
{"goal":"b(n - k) = 0","proof":["constant(0, n - k) = b(n - k)","let s0: Nat -> Real satisfy { true }","let s1: Nat satisfy { true }","cauchy_coefficient(constant[Nat, Real](0), s0, s1, n - k) = constant(0, n - k)","cauchy_coefficient(constant[Nat, Real](0), s0, s1, n - k) = 0","constant(0, n - k) != 0"]}
{"goal":"a(k) * 0 = 0","proof":["a(k) * 0 = 0 * a(k)","0 * a(k) != 0","0 * a(k) = 0"]}
{"goal":"cauchy_coefficient_zero_right","proof":[]}
{"goal":"cauchy_coefficient(a, b, n)(k) = 0","proof":["cauchy_coefficient(a, constant[Nat, Real](0), n, k) = 0"]}
{"goal":"constant[Nat, Real](0)(k) = 0","proof":["let s0: Nat -> Real satisfy { true }","let s1: Nat satisfy { true }","cauchy_coefficient(constant[Nat, Real](0), s0, s1, k) = constant(0, k)","cauchy_coefficient(constant[Nat, Real](0), s0, s1, k) = 0"]}
{"goal":"cauchy_coefficient_zero_right_fn","proof":["let s0: Nat satisfy { cauchy_coefficient(a, constant[Nat, Real](0), n, s0) != constant(0, s0) }","constant(0, s0) = 0","cauchy_coefficient(a, constant[Nat, Real](0), n, s0) != 0","cauchy_coefficient(a, constant[Nat, Real](0), n, s0) = 0"]}
{"goal":"left_list.length = map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)).length","proof":["reverse[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))).length = map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)).length"]}
{"goal":"map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)).length = n.suc.range.length","proof":["map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)).length = n.suc.range.length"]}
{"goal":"n.suc.range.length = n.suc","proof":["n.suc.range.length = n.suc"]}
{"goal":"right_list.length = map[Nat, Real](n.suc.range, cauchy_coefficient(b, a, n)).length","proof":["map[Nat, Real](n.suc.range, cauchy_coefficient(b, a, n)) != right_list"]}
{"goal":"map[Nat, Real](n.suc.range, cauchy_coefficient(b, a, n)).length = n.suc.range.length","proof":["map[Nat, Real](n.suc.range, cauchy_coefficient(b, a, n)).length = n.suc.range.length"]}
{"goal":"left_list.length = right_list.length","proof":[]}
{"goal":"idx < n.suc","proof":[]}
{"goal":"mapped.length = n.suc","proof":[]}
{"goal":"left_list.get_idx(idx) = mapped.get_idx(mapped.length - Nat.1 - idx)","proof":["idx < mapped.length","reverse[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))).get_idx(idx) != mapped.get_idx(mapped.length - Nat.1 - idx)","mapped.get_idx(mapped.length - Nat.1 - idx) = reverse[Real](mapped).get_idx(idx)","mapped.get_idx(mapped.length - Nat.1 - idx) != reverse[Real](mapped).get_idx(idx)"]}
{"goal":"mapped.length - Nat.1 - idx = n - idx","proof":["n.suc - Nat.1 - idx != n - idx","n.suc - Nat.1 != n","n.suc - Nat.1 = n"]}
{"goal":"n - idx <= n","proof":["not n < idx or n.suc < idx or n.suc = idx","lib(nat.nat_base).bounded_sub(n, idx) + idx = n or n < idx","lib(nat.nat_base).bounded_sub(n, idx) + idx != n or lib(nat.nat_base).bounded_sub(n, idx) <= n","n - idx = lib(nat.nat_base).bounded_sub(n, idx)","not lib(nat.nat_base).bounded_sub(n, idx) <= n","not n.suc < idx or not idx < n.suc","not idx < n.suc or n.suc != idx","n.suc != idx","lib(nat.nat_base).bounded_sub(n, idx) + idx != n","not n.suc < idx","n < idx","not n < idx"]}
{"goal":"n < n.suc","proof":["not n ∈ n.suc.range or not n >= n.suc","n.suc <= n = n >= n.suc","n.suc <= n or n < n.suc","n.suc <= n","n >= n.suc","n ∈ n.suc.range"]}
{"goal":"n - idx < n.suc","proof":["not n - idx <= n or n - idx < n or n - idx = n","not n - idx < n or n - idx < n.suc","not n - idx < n","n - idx = n"]}
{"goal":"mapped.get_idx(n - idx) = Option.some(cauchy_coefficient(a, b, n)(n - idx))","proof":["map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)).get_idx(n - idx) != Option.some(cauchy_coefficient(a, b, n, n - idx))"]}
{"goal":"cauchy_coefficient(a, b, n)(n - idx) = a(n - idx) * b(n - (n - idx))","proof":["a(n - idx) * b(n - (n - idx)) = cauchy_coefficient(a, b, n, n - idx)"]}
{"goal":"n - (n - idx) = idx","proof":["not n < idx or n.suc < idx or n.suc = idx","lib(nat.nat_base).bounded_sub(n, idx) + idx = n or n < idx","idx + (n - idx) != n or n - (n - idx) = idx","n - idx = lib(nat.nat_base).bounded_sub(n, idx)","not n.suc < idx or not idx < n.suc","idx + lib(nat.nat_base).bounded_sub(n, idx) = lib(nat.nat_base).bounded_sub(n, idx) + idx","idx + (n - idx) != n","not idx < n.suc or n.suc != idx","n.suc != idx","idx + lib(nat.nat_base).bounded_sub(n, idx) != n","not n.suc < idx","lib(nat.nat_base).bounded_sub(n, idx) + idx != n","not n < idx","n < idx"]}
{"goal":"cauchy_coefficient(a, b, n)(n - idx) = a(n - idx) * b(idx)","proof":["a(n - idx) * b(n - (n - idx)) != cauchy_coefficient(a, b, n, n - idx)"]}
{"goal":"left_list.get_idx(idx) = Option.some(a(n - idx) * b(idx))","proof":[]}
{"goal":"a(n - idx) * b(idx) = b(idx) * a(n - idx)","proof":["b(idx) * a(n - idx) = a(n - idx) * b(idx)"]}
{"goal":"right_list.get_idx(idx) = Option.some(cauchy_coefficient(b, a, n)(idx))","proof":["map[Nat, Real](n.suc.range, cauchy_coefficient(b, a, n)).get_idx(idx) != Option.some(cauchy_coefficient(b, a, n, idx))"]}
{"goal":"cauchy_coefficient(b, a, n)(idx) = b(idx) * a(n - idx)","proof":["b(idx) * a(n - idx) = cauchy_coefficient(b, a, n, idx)"]}
{"goal":"left_list.get_idx(idx) = Option.some(b(idx) * a(n - idx))","proof":[]}
{"goal":"left_list.get_idx(idx) = right_list.get_idx(idx)","proof":[]}
{"goal":"left_list = right_list","proof":["let s0: Nat satisfy { right_list.length != left_list.length or s0 < left_list.length or right_list = left_list and (right_list.get_idx(s0) != left_list.get_idx(s0) or right_list.length != left_list.length or right_list = left_list) }","s0 < left_list.length","not s0 < left_list.length or right_list.get_idx(s0) = left_list.get_idx(s0)","right_list.get_idx(s0) != left_list.get_idx(s0)","right_list.get_idx(s0) = left_list.get_idx(s0)"]}
{"goal":"cauchy_reverse_map_eq","proof":[]}
{"goal":"cauchy_product(a, b, n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = cauchy_product(a, b, n)"]}
{"goal":"cauchy_product(b, a, n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(b, a, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(b, a, n))) = cauchy_product(b, a, n)"]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = sum[Real](reverse[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))))","proof":["sum[Real](reverse[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))"]}
{"goal":"reverse[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = map[Nat, Real](n.suc.range, cauchy_coefficient(b, a, n))","proof":[]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(b, a, n)))","proof":["sum[Real](reverse[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))) != sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))"]}
{"goal":"cauchy_product_comm","proof":[]}
{"goal":"cauchy_coefficient(a, b, n) = constant[Nat, Real](0)","proof":["let s0: Nat satisfy { cauchy_coefficient(a, b, n, s0) != constant(0, s0) }","cauchy_coefficient(constant[Nat, Real](0), b, n, s0) = constant(0, s0)"]}
{"goal":"cauchy_coefficient(a, b, n)(k) = 0","proof":["cauchy_coefficient(a, b, n, k) = constant(0, k)","constant(0, k) != 0","let s0: Nat -> Real satisfy { true }","let s1: Nat satisfy { true }","cauchy_coefficient(s0, constant[Nat, Real](0), s1, k) = constant(0, k)","cauchy_coefficient(s0, constant[Nat, Real](0), s1, k) = 0"]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = 0","proof":["let s0: (List[Nat], Nat -> Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: List[Nat]) { x0(s0(x1, x0)) != 0 or sum[Real](map[Nat, Real](x1, x0)) = 0 } }","cauchy_coefficient(a, b, n, s0(n.suc.range, cauchy_coefficient(a, b, n))) = 0","cauchy_coefficient(a, b, n, s0(n.suc.range, cauchy_coefficient(a, b, n))) != 0 or sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = 0"]}
{"goal":"cauchy_product(a, b, n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = cauchy_product(a, b, n)"]}
{"goal":"cauchy_product(a, b, n) = 0","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) != cauchy_product(a, b, n)"]}
{"goal":"cauchy_product_zero_left","proof":["cauchy_product(a, b, n) != 0"]}
{"goal":"cauchy_coefficient(a, b, n) = constant[Nat, Real](0)","proof":["let s0: Nat satisfy { cauchy_coefficient(a, b, n, s0) != constant(0, s0) }","cauchy_coefficient(a, constant[Nat, Real](0), n, s0) = constant(0, s0)"]}
{"goal":"cauchy_coefficient(a, b, n)(k) = 0","proof":["cauchy_coefficient(a, constant[Nat, Real](0), n, k) = 0"]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = 0","proof":["let s0: (List[Nat], Nat -> Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: List[Nat]) { x0(s0(x1, x0)) != 0 or sum[Real](map[Nat, Real](x1, x0)) = 0 } }","cauchy_coefficient(a, b, n, s0(n.suc.range, cauchy_coefficient(a, b, n))) = 0","cauchy_coefficient(a, b, n, s0(n.suc.range, cauchy_coefficient(a, b, n))) != 0 or sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = 0"]}
{"goal":"cauchy_product(a, b, n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = cauchy_product(a, b, n)"]}
{"goal":"cauchy_product(a, b, n) = 0","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) != cauchy_product(a, b, n)"]}
{"goal":"cauchy_product_zero_right","proof":["cauchy_product(a, b, n) != 0"]}
{"goal":"cauchy_coefficient(mul_fn[Nat, Real](c, a), b, n)(k) = mul_fn[Nat, Real](c, a)(k) * b(n - k)","proof":["mul_fn(c, a, k) * b(n - k) = cauchy_coefficient(mul_fn[Nat, Real](c, a), b, n, k)"]}
{"goal":"mul_fn[Nat, Real](c, a)(k) = c * a(k)","proof":["c * a(k) = mul_fn(c, a, k)"]}
{"goal":"cauchy_coefficient(mul_fn[Nat, Real](c, a), b, n)(k) = c * a(k) * b(n - k)","proof":["mul_fn(c, a, k) * b(n - k) != cauchy_coefficient(mul_fn[Nat, Real](c, a), b, n, k)"]}
{"goal":"c * a(k) * b(n - k) = c * (a(k) * b(n - k))","proof":["c * (a(k) * b(n - k)) = c * a(k) * b(n - k)"]}
{"goal":"cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)","proof":["a(k) * b(n - k) = cauchy_coefficient(a, b, n, k)"]}
{"goal":"c * (a(k) * b(n - k)) = c * cauchy_coefficient(a, b, n)(k)","proof":["a(k) * b(n - k) != cauchy_coefficient(a, b, n, k)"]}
{"goal":"cauchy_coefficient_scalar_left","proof":[]}
{"goal":"cauchy_product(mul_fn[Nat, Real](c, a), b, n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(mul_fn[Nat, Real](c, a), b, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(mul_fn[Nat, Real](c, a), b, n))) = cauchy_product(mul_fn[Nat, Real](c, a), b, n)"]}
{"goal":"cauchy_product(a, b, n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = cauchy_product(a, b, n)"]}
{"goal":"cauchy_coefficient(mul_fn[Nat, Real](c, a), b, n)(k) = c * cauchy_coefficient(a, b, n)(k)","proof":["c * cauchy_coefficient(a, b, n, k) = cauchy_coefficient(mul_fn[Nat, Real](c, a), b, n, k)"]}
{"goal":"scalar_mul(c)(cauchy_coefficient(a, b, n)(k)) = c * cauchy_coefficient(a, b, n)(k)","proof":["c * cauchy_coefficient(a, b, n, k) = scalar_mul(c, cauchy_coefficient(a, b, n, k))"]}
{"goal":"cauchy_coefficient(mul_fn[Nat, Real](c, a), b, n) = compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n))","proof":["let s0: Nat satisfy { compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n), s0) != cauchy_coefficient(mul_fn[Nat, Real](c, a), b, n, s0) }","c * cauchy_coefficient(a, b, n, s0) = scalar_mul(c, cauchy_coefficient(a, b, n, s0))","c * cauchy_coefficient(a, b, n, s0) = cauchy_coefficient(mul_fn[Nat, Real](c, a), b, n, s0)","compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n), s0) = scalar_mul(c, cauchy_coefficient(a, b, n, s0))","scalar_mul(c, cauchy_coefficient(a, b, n, s0)) != cauchy_coefficient(mul_fn[Nat, Real](c, a), b, n, s0)"]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(mul_fn[Nat, Real](c, a), b, n))) = sum[Real](map[Nat, Real](n.suc.range, compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n))))","proof":[]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n)))) = sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c)))","proof":["map[Nat, Real](n.suc.range, compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n))) != map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c))","map[Nat, Real](n.suc.range, compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n))) = map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c))"]}
{"goal":"sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c))) = c * sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))","proof":["sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c))) = c * sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))"]}
{"goal":"cauchy_product_scalar_left","proof":[]}
{"goal":"cauchy_coefficient(a, mul_fn[Nat, Real](c, b), n)(k) = a(k) * mul_fn[Nat, Real](c, b)(n - k)","proof":["a(k) * mul_fn(c, b, n - k) = cauchy_coefficient(a, mul_fn[Nat, Real](c, b), n, k)"]}
{"goal":"mul_fn[Nat, Real](c, b)(n - k) = c * b(n - k)","proof":["c * b(n - k) = mul_fn(c, b, n - k)"]}
{"goal":"cauchy_coefficient(a, mul_fn[Nat, Real](c, b), n)(k) = a(k) * (c * b(n - k))","proof":["a(k) * mul_fn(c, b, n - k) != cauchy_coefficient(a, mul_fn[Nat, Real](c, b), n, k)"]}
{"goal":"a(k) * (c * b(n - k)) = a(k) * (b(n - k) * c)","proof":["b(n - k) * c != c * b(n - k)","b(n - k) * c = c * b(n - k)"]}
{"goal":"a(k) * (b(n - k) * c) = a(k) * b(n - k) * c","proof":["a(k) * (b(n - k) * c) = a(k) * b(n - k) * c"]}
{"goal":"a(k) * b(n - k) * c = c * (a(k) * b(n - k))","proof":["c * (a(k) * b(n - k)) = a(k) * b(n - k) * c"]}
{"goal":"cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)","proof":["a(k) * b(n - k) = cauchy_coefficient(a, b, n, k)"]}
{"goal":"c * (a(k) * b(n - k)) = c * cauchy_coefficient(a, b, n)(k)","proof":["a(k) * b(n - k) != cauchy_coefficient(a, b, n, k)"]}
{"goal":"cauchy_coefficient_scalar_right","proof":[]}
{"goal":"cauchy_product(a, mul_fn[Nat, Real](c, b), n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, mul_fn[Nat, Real](c, b), n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, mul_fn[Nat, Real](c, b), n))) = cauchy_product(a, mul_fn[Nat, Real](c, b), n)"]}
{"goal":"cauchy_product(a, b, n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = cauchy_product(a, b, n)"]}
{"goal":"cauchy_coefficient(a, mul_fn[Nat, Real](c, b), n)(k) = c * cauchy_coefficient(a, b, n)(k)","proof":["c * cauchy_coefficient(a, b, n, k) = cauchy_coefficient(a, mul_fn[Nat, Real](c, b), n, k)"]}
{"goal":"scalar_mul(c)(cauchy_coefficient(a, b, n)(k)) = c * cauchy_coefficient(a, b, n)(k)","proof":["c * cauchy_coefficient(a, b, n, k) = scalar_mul(c, cauchy_coefficient(a, b, n, k))"]}
{"goal":"cauchy_coefficient(a, mul_fn[Nat, Real](c, b), n) = compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n))","proof":["let s0: Nat satisfy { compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n), s0) != cauchy_coefficient(a, mul_fn[Nat, Real](c, b), n, s0) }","c * cauchy_coefficient(a, b, n, s0) = scalar_mul(c, cauchy_coefficient(a, b, n, s0))","c * cauchy_coefficient(a, b, n, s0) = cauchy_coefficient(a, mul_fn[Nat, Real](c, b), n, s0)","compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n), s0) = scalar_mul(c, cauchy_coefficient(a, b, n, s0))","scalar_mul(c, cauchy_coefficient(a, b, n, s0)) != cauchy_coefficient(a, mul_fn[Nat, Real](c, b), n, s0)"]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, mul_fn[Nat, Real](c, b), n))) = sum[Real](map[Nat, Real](n.suc.range, compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n))))","proof":[]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n)))) = sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c)))","proof":["map[Nat, Real](n.suc.range, compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n))) != map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c))","map[Nat, Real](n.suc.range, compose[Nat, Real, Real](scalar_mul(c), cauchy_coefficient(a, b, n))) = map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c))"]}
{"goal":"sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c))) = c * sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))","proof":["sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), scalar_mul(c))) = c * sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))"]}
{"goal":"cauchy_product_scalar_right","proof":[]}
{"goal":"cauchy_coefficient(add_fn[Nat, Real](a, aa), b, n)(k) = add_fn[Nat, Real](a, aa)(k) * b(n - k)","proof":["add_fn[Nat, Real](a, aa, k) * b(n - k) = cauchy_coefficient(add_fn[Nat, Real](a, aa), b, n, k)"]}
{"goal":"add_fn[Nat, Real](a, aa)(k) = a(k) + aa(k)","proof":["a(k) + aa(k) = add_fn[Nat, Real](a, aa, k)"]}
{"goal":"cauchy_coefficient(add_fn[Nat, Real](a, aa), b, n)(k) = (a(k) + aa(k)) * b(n - k)","proof":["add_fn[Nat, Real](a, aa, k) * b(n - k) != cauchy_coefficient(add_fn[Nat, Real](a, aa), b, n, k)"]}
{"goal":"(a(k) + aa(k)) * b(n - k) = a(k) * b(n - k) + aa(k) * b(n - k)","proof":["a(k) * b(n - k) + aa(k) * b(n - k) = (a(k) + aa(k)) * b(n - k)"]}
{"goal":"cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)","proof":["a(k) * b(n - k) = cauchy_coefficient(a, b, n, k)"]}
{"goal":"cauchy_coefficient(aa, b, n)(k) = aa(k) * b(n - k)","proof":["aa(k) * b(n - k) = cauchy_coefficient(aa, b, n, k)"]}
{"goal":"a(k) * b(n - k) + aa(k) * b(n - k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(aa, b, n)(k)","proof":[]}
{"goal":"cauchy_coefficient_add_left","proof":[]}
{"goal":"cauchy_product(add_fn[Nat, Real](a, aa), b, n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(add_fn[Nat, Real](a, aa), b, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(add_fn[Nat, Real](a, aa), b, n))) = cauchy_product(add_fn[Nat, Real](a, aa), b, n)"]}
{"goal":"cauchy_product(a, b, n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = cauchy_product(a, b, n)"]}
{"goal":"cauchy_product(aa, b, n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(aa, b, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(aa, b, n))) = cauchy_product(aa, b, n)"]}
{"goal":"cauchy_coefficient(add_fn[Nat, Real](a, aa), b, n)(k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(aa, b, n)(k)","proof":["cauchy_coefficient(a, b, n, k) + cauchy_coefficient(aa, b, n, k) = cauchy_coefficient(add_fn[Nat, Real](a, aa), b, n, k)"]}
{"goal":"add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(aa, b, n))(k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(aa, b, n)(k)","proof":["cauchy_coefficient(a, b, n, k) + cauchy_coefficient(aa, b, n, k) = add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(aa, b, n), k)"]}
{"goal":"cauchy_coefficient(add_fn[Nat, Real](a, aa), b, n) = add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(aa, b, n))","proof":["let s0: Nat satisfy { add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(aa, b, n), s0) != cauchy_coefficient(add_fn[Nat, Real](a, aa), b, n, s0) }","cauchy_coefficient(a, b, n, s0) + cauchy_coefficient(aa, b, n, s0) = add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(aa, b, n), s0)","cauchy_coefficient(a, b, n, s0) + cauchy_coefficient(aa, b, n, s0) = cauchy_coefficient(add_fn[Nat, Real](a, aa), b, n, s0)"]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(add_fn[Nat, Real](a, aa), b, n))) = sum[Real](map[Nat, Real](n.suc.range, add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(aa, b, n))))","proof":[]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(aa, b, n)))) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) + sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(aa, b, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) + sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(aa, b, n))) = sum[Real](map[Nat, Real](n.suc.range, add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(aa, b, n))))"]}
{"goal":"cauchy_product_add_left","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) + sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(aa, b, n))) = sum[Real](map[Nat, Real](n.suc.range, add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(aa, b, n))))"]}
{"goal":"cauchy_coefficient(a, add_fn[Nat, Real](b, bb), n)(k) = a(k) * add_fn[Nat, Real](b, bb)(n - k)","proof":["a(k) * add_fn[Nat, Real](b, bb, n - k) = cauchy_coefficient(a, add_fn[Nat, Real](b, bb), n, k)"]}
{"goal":"add_fn[Nat, Real](b, bb)(n - k) = b(n - k) + bb(n - k)","proof":["b(n - k) + bb(n - k) = add_fn[Nat, Real](b, bb, n - k)"]}
{"goal":"cauchy_coefficient(a, add_fn[Nat, Real](b, bb), n)(k) = a(k) * (b(n - k) + bb(n - k))","proof":["a(k) * add_fn[Nat, Real](b, bb, n - k) != cauchy_coefficient(a, add_fn[Nat, Real](b, bb), n, k)"]}
{"goal":"a(k) * (b(n - k) + bb(n - k)) = a(k) * b(n - k) + a(k) * bb(n - k)","proof":["a(k) * b(n - k) + a(k) * bb(n - k) = a(k) * (b(n - k) + bb(n - k))"]}
{"goal":"cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)","proof":["a(k) * b(n - k) = cauchy_coefficient(a, b, n, k)"]}
{"goal":"cauchy_coefficient(a, bb, n)(k) = a(k) * bb(n - k)","proof":["a(k) * bb(n - k) = cauchy_coefficient(a, bb, n, k)"]}
{"goal":"a(k) * b(n - k) + a(k) * bb(n - k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(a, bb, n)(k)","proof":[]}
{"goal":"cauchy_coefficient_add_right","proof":[]}
{"goal":"cauchy_product(a, add_fn[Nat, Real](b, bb), n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, add_fn[Nat, Real](b, bb), n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, add_fn[Nat, Real](b, bb), n))) = cauchy_product(a, add_fn[Nat, Real](b, bb), n)"]}
{"goal":"cauchy_product(a, b, n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = cauchy_product(a, b, n)"]}
{"goal":"cauchy_product(a, bb, n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, bb, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, bb, n))) = cauchy_product(a, bb, n)"]}
{"goal":"cauchy_coefficient(a, add_fn[Nat, Real](b, bb), n)(k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(a, bb, n)(k)","proof":["cauchy_coefficient(a, b, n, k) + cauchy_coefficient(a, bb, n, k) = cauchy_coefficient(a, add_fn[Nat, Real](b, bb), n, k)"]}
{"goal":"add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(a, bb, n))(k) = cauchy_coefficient(a, b, n)(k) + cauchy_coefficient(a, bb, n)(k)","proof":["cauchy_coefficient(a, b, n, k) + cauchy_coefficient(a, bb, n, k) = add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(a, bb, n), k)"]}
{"goal":"cauchy_coefficient(a, add_fn[Nat, Real](b, bb), n) = add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(a, bb, n))","proof":["let s0: Nat satisfy { add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(a, bb, n), s0) != cauchy_coefficient(a, add_fn[Nat, Real](b, bb), n, s0) }","cauchy_coefficient(a, b, n, s0) + cauchy_coefficient(a, bb, n, s0) = add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(a, bb, n), s0)","cauchy_coefficient(a, b, n, s0) + cauchy_coefficient(a, bb, n, s0) = cauchy_coefficient(a, add_fn[Nat, Real](b, bb), n, s0)"]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, add_fn[Nat, Real](b, bb), n))) = sum[Real](map[Nat, Real](n.suc.range, add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(a, bb, n))))","proof":[]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(a, bb, n)))) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) + sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, bb, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) + sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, bb, n))) = sum[Real](map[Nat, Real](n.suc.range, add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(a, bb, n))))"]}
{"goal":"cauchy_product_add_right","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) + sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, bb, n))) = sum[Real](map[Nat, Real](n.suc.range, add_fn[Nat, Real](cauchy_coefficient(a, b, n), cauchy_coefficient(a, bb, n))))"]}
{"goal":"c(k) = cauchy_product(a, b, k)","proof":["cauchy_seq(a, b, k) = c(k)","cauchy_seq(a, b, k) = cauchy_product(a, b, k)"]}
{"goal":"cauchy_product(a, b, k) = 0","proof":["cauchy_product(b, a, k) = cauchy_product(a, b, k)","cauchy_product(b, a, k) != 0","cauchy_product(b, constant[Nat, Real](0), k) = 0"]}
{"goal":"c(k) = 0","proof":["cauchy_product(a, b, k) != c(k)"]}
{"goal":"constant[Nat, Real](0)(k) = 0","proof":["let s0: Nat -> Real satisfy { true }","let s1: Nat satisfy { true }","cauchy_coefficient(s0, constant[Nat, Real](0), s1, k) = constant(0, k)","cauchy_coefficient(s0, constant[Nat, Real](0), s1, k) = 0"]}
{"goal":"c = constant[Nat, Real](0)","proof":["let s0: Nat satisfy { constant(0, s0) != c(s0) }","constant(0, s0) = 0","c(s0) != 0","cauchy_seq(a, b, s0) = c(s0)","cauchy_seq(a, b, s0) = cauchy_product(a, b, s0)","cauchy_product(constant[Nat, Real](0), b, s0) = 0","cauchy_seq(a, b, s0) != 0","cauchy_product(a, b, s0) != 0"]}
{"goal":"partial[Real](c, n) = sum[Real](map[Nat, Real](n.range, c))","proof":["sum[Real](map[Nat, Real](n.range, c)) = partial[Real](c, n)"]}
{"goal":"partial[Real](c, n) = sum[Real](map[Nat, Real](n.range, constant[Nat, Real](0)))","proof":["sum[Real](map[Nat, Real](n.range, c)) != partial[Real](c, n)"]}
{"goal":"constant[Nat, Real](0)(k) = 0","proof":["constant(0, k) = 0"]}
{"goal":"sum[Real](map[Nat, Real](n.range, constant[Nat, Real](0))) = 0","proof":["let s0: (List[Nat], Nat -> Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: List[Nat]) { x0(s0(x1, x0)) != 0 or sum[Real](map[Nat, Real](x1, x0)) = 0 } }","constant(0, s0(n.range, constant[Nat, Real](0))) = 0","constant(0, s0(n.range, constant[Nat, Real](0))) != 0 or sum[Real](map[Nat, Real](n.range, constant[Nat, Real](0))) = 0"]}
{"goal":"partial[Real](c, n) = 0","proof":["sum[Real](map[Nat, Real](n.range, constant[Nat, Real](0))) != partial[Real](c, n)"]}
{"goal":"partial_cauchy_zero_left","proof":[]}
{"goal":"c(k) = cauchy_product(a, b, k)","proof":["cauchy_seq(a, b, k) = c(k)","cauchy_seq(a, b, k) = cauchy_product(a, b, k)"]}
{"goal":"cauchy_product(a, b, k) = 0","proof":["cauchy_product(a, constant[Nat, Real](0), k) = 0"]}
{"goal":"c(k) = 0","proof":["cauchy_product(a, b, k) != c(k)"]}
{"goal":"constant[Nat, Real](0)(k) = 0","proof":["let s0: Nat -> Real satisfy { true }","let s1: Nat satisfy { true }","cauchy_coefficient(s0, constant[Nat, Real](0), s1, k) = constant(0, k)","cauchy_coefficient(s0, constant[Nat, Real](0), s1, k) = 0"]}
{"goal":"c = constant[Nat, Real](0)","proof":["let s0: Nat satisfy { constant(0, s0) != c(s0) }","constant(0, s0) = 0","c(s0) != 0","cauchy_seq(a, b, s0) = c(s0)","cauchy_seq(a, b, s0) = cauchy_product(a, b, s0)","cauchy_product(a, constant[Nat, Real](0), s0) = 0","cauchy_seq(a, b, s0) != 0","cauchy_product(a, b, s0) != 0"]}
{"goal":"partial[Real](c, n) = sum[Real](map[Nat, Real](n.range, c))","proof":["sum[Real](map[Nat, Real](n.range, c)) = partial[Real](c, n)"]}
{"goal":"partial[Real](c, n) = sum[Real](map[Nat, Real](n.range, constant[Nat, Real](0)))","proof":["sum[Real](map[Nat, Real](n.range, c)) != partial[Real](c, n)"]}
{"goal":"constant[Nat, Real](0)(k) = 0","proof":["constant(0, k) = 0"]}
{"goal":"sum[Real](map[Nat, Real](n.range, constant[Nat, Real](0))) = 0","proof":["let s0: (List[Nat], Nat -> Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: List[Nat]) { x0(s0(x1, x0)) != 0 or sum[Real](map[Nat, Real](x1, x0)) = 0 } }","constant(0, s0(n.range, constant[Nat, Real](0))) = 0","constant(0, s0(n.range, constant[Nat, Real](0))) != 0 or sum[Real](map[Nat, Real](n.range, constant[Nat, Real](0))) = 0"]}
{"goal":"partial[Real](c, n) = 0","proof":["sum[Real](map[Nat, Real](n.range, constant[Nat, Real](0))) != partial[Real](c, n)"]}
{"goal":"partial_cauchy_zero_right","proof":[]}
{"goal":"cauchy_seq(add_fn[Nat, Real](a, aa), b)(k) = cauchy_product(add_fn[Nat, Real](a, aa), b, k)","proof":["cauchy_seq(add_fn[Nat, Real](a, aa), b, k) = cauchy_product(add_fn[Nat, Real](a, aa), b, k)"]}
{"goal":"cauchy_product(add_fn[Nat, Real](a, aa), b, k) = cauchy_product(a, b, k) + cauchy_product(aa, b, k)","proof":["cauchy_product(a, b, k) + cauchy_product(aa, b, k) = cauchy_product(add_fn[Nat, Real](a, aa), b, k)"]}
{"goal":"cauchy_seq(a, b)(k) = cauchy_product(a, b, k)","proof":["cauchy_seq(a, b, k) = cauchy_product(a, b, k)"]}
{"goal":"cauchy_seq(aa, b)(k) = cauchy_product(aa, b, k)","proof":["cauchy_seq(aa, b, k) = cauchy_product(aa, b, k)"]}
{"goal":"cauchy_seq(add_fn[Nat, Real](a, aa), b)(k) = cauchy_seq(a, b)(k) + cauchy_seq(aa, b)(k)","proof":[]}
{"goal":"add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(aa, b))(k) = cauchy_seq(a, b)(k) + cauchy_seq(aa, b)(k)","proof":["cauchy_seq(a, b, k) + cauchy_seq(aa, b, k) = add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(aa, b), k)"]}
{"goal":"cauchy_seq(add_fn[Nat, Real](a, aa), b) = add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(aa, b))","proof":["let s0: Nat satisfy { add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(aa, b), s0) != cauchy_seq(add_fn[Nat, Real](a, aa), b, s0) }","cauchy_seq(a, b, s0) + cauchy_seq(aa, b, s0) = add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(aa, b), s0)","cauchy_product(a, b, s0) + cauchy_product(aa, b, s0) = cauchy_product(add_fn[Nat, Real](a, aa), b, s0)","let s1: Nat -> Real satisfy { true }","let s2: Nat satisfy { true }","cauchy_seq(add_fn[Nat, Real](a, aa), b, s0) = cauchy_product(add_fn[Nat, Real](a, aa), b, s0)","cauchy_seq(s1, s1, s2) = cauchy_product(s1, s1, s2)","cauchy_seq = cauchy_product"]}
{"goal":"partial[Real](cauchy_seq(add_fn[Nat, Real](a, aa), b), n) = partial[Real](add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(aa, b)), n)","proof":["add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(aa, b)) != cauchy_seq(add_fn[Nat, Real](a, aa), b)"]}
{"goal":"partial[Real](add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(aa, b)), n) = partial[Real](cauchy_seq(a, b), n) + partial[Real](cauchy_seq(aa, b), n)","proof":["partial[Real](cauchy_seq(a, b), n) + partial[Real](cauchy_seq(aa, b), n) = partial[Real](add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(aa, b)), n)"]}
{"goal":"partial_cauchy_add_left","proof":["partial[Real](cauchy_seq(a, b), n) + partial[Real](cauchy_seq(aa, b), n) != partial[Real](add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(aa, b)), n)"]}
{"goal":"cauchy_seq(a, add_fn[Nat, Real](b, bb))(k) = cauchy_product(a, add_fn[Nat, Real](b, bb), k)","proof":["cauchy_seq(a, add_fn[Nat, Real](b, bb), k) = cauchy_product(a, add_fn[Nat, Real](b, bb), k)"]}
{"goal":"cauchy_product(a, add_fn[Nat, Real](b, bb), k) = cauchy_product(a, b, k) + cauchy_product(a, bb, k)","proof":["cauchy_product(a, b, k) + cauchy_product(a, bb, k) = cauchy_product(a, add_fn[Nat, Real](b, bb), k)"]}
{"goal":"cauchy_seq(a, b)(k) = cauchy_product(a, b, k)","proof":["cauchy_seq(a, b, k) = cauchy_product(a, b, k)"]}
{"goal":"cauchy_seq(a, bb)(k) = cauchy_product(a, bb, k)","proof":["cauchy_seq(a, bb, k) = cauchy_product(a, bb, k)"]}
{"goal":"cauchy_seq(a, add_fn[Nat, Real](b, bb))(k) = cauchy_seq(a, b)(k) + cauchy_seq(a, bb)(k)","proof":[]}
{"goal":"add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(a, bb))(k) = cauchy_seq(a, b)(k) + cauchy_seq(a, bb)(k)","proof":["cauchy_seq(a, b, k) + cauchy_seq(a, bb, k) = add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(a, bb), k)"]}
{"goal":"cauchy_seq(a, add_fn[Nat, Real](b, bb)) = add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(a, bb))","proof":["let s0: Nat satisfy { add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(a, bb), s0) != cauchy_seq(a, add_fn[Nat, Real](b, bb), s0) }","cauchy_seq(a, b, s0) + cauchy_seq(a, bb, s0) = add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(a, bb), s0)","cauchy_product(a, b, s0) + cauchy_product(a, bb, s0) = cauchy_product(a, add_fn[Nat, Real](b, bb), s0)","let s1: Nat -> Real satisfy { true }","let s2: Nat satisfy { true }","cauchy_seq(a, add_fn[Nat, Real](b, bb), s0) = cauchy_product(a, add_fn[Nat, Real](b, bb), s0)","cauchy_seq(s1, s1, s2) = cauchy_product(s1, s1, s2)","cauchy_seq = cauchy_product"]}
{"goal":"partial[Real](cauchy_seq(a, add_fn[Nat, Real](b, bb)), n) = partial[Real](add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(a, bb)), n)","proof":["add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(a, bb)) != cauchy_seq(a, add_fn[Nat, Real](b, bb))"]}
{"goal":"partial[Real](add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(a, bb)), n) = partial[Real](cauchy_seq(a, b), n) + partial[Real](cauchy_seq(a, bb), n)","proof":["partial[Real](cauchy_seq(a, b), n) + partial[Real](cauchy_seq(a, bb), n) = partial[Real](add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(a, bb)), n)"]}
{"goal":"partial_cauchy_add_right","proof":["partial[Real](cauchy_seq(a, b), n) + partial[Real](cauchy_seq(a, bb), n) != partial[Real](add_fn[Nat, Real](cauchy_seq(a, b), cauchy_seq(a, bb)), n)"]}
{"goal":"cauchy_seq(mul_fn[Nat, Real](c, a), b)(k) = cauchy_product(mul_fn[Nat, Real](c, a), b, k)","proof":["cauchy_seq(mul_fn[Nat, Real](c, a), b, k) = cauchy_product(mul_fn[Nat, Real](c, a), b, k)"]}
{"goal":"cauchy_product(mul_fn[Nat, Real](c, a), b, k) = c * cauchy_product(a, b, k)","proof":["c * cauchy_product(a, b, k) = cauchy_product(mul_fn[Nat, Real](c, a), b, k)"]}
{"goal":"cauchy_seq(a, b)(k) = cauchy_product(a, b, k)","proof":["cauchy_seq(a, b, k) = cauchy_product(a, b, k)"]}
{"goal":"cauchy_seq(mul_fn[Nat, Real](c, a), b)(k) = c * cauchy_seq(a, b)(k)","proof":[]}
{"goal":"mul_fn[Nat, Real](c, cauchy_seq(a, b))(k) = c * cauchy_seq(a, b)(k)","proof":["c * cauchy_seq(a, b, k) = mul_fn(c, cauchy_seq(a, b), k)"]}
{"goal":"cauchy_seq(mul_fn[Nat, Real](c, a), b) = mul_fn[Nat, Real](c, cauchy_seq(a, b))","proof":["let s0: Nat satisfy { mul_fn(c, cauchy_seq(a, b), s0) != cauchy_seq(mul_fn[Nat, Real](c, a), b, s0) }","c * cauchy_seq(a, b, s0) = mul_fn(c, cauchy_seq(a, b), s0)","c * cauchy_product(a, b, s0) = cauchy_product(mul_fn[Nat, Real](c, a), b, s0)","let s1: Nat -> Real satisfy { true }","let s2: Nat satisfy { true }","cauchy_seq(mul_fn[Nat, Real](c, a), b, s0) = cauchy_product(mul_fn[Nat, Real](c, a), b, s0)","cauchy_seq(s1, s1, s2) = cauchy_product(s1, s1, s2)","cauchy_seq = cauchy_product"]}
{"goal":"partial[Real](cauchy_seq(mul_fn[Nat, Real](c, a), b), n) = partial[Real](mul_fn[Nat, Real](c, cauchy_seq(a, b)), n)","proof":["mul_fn[Nat, Real](c, cauchy_seq(a, b)) != cauchy_seq(mul_fn[Nat, Real](c, a), b)"]}
{"goal":"partial[Real](mul_fn[Nat, Real](c, cauchy_seq(a, b)), n) = c * partial[Real](cauchy_seq(a, b), n)","proof":["c * partial[Real](cauchy_seq(a, b), n) = partial[Real](mul_fn[Nat, Real](c, cauchy_seq(a, b)), n)"]}
{"goal":"partial_cauchy_scalar_left","proof":["c * partial[Real](cauchy_seq(a, b), n) != partial[Real](mul_fn[Nat, Real](c, cauchy_seq(a, b)), n)"]}
{"goal":"cauchy_seq(a, mul_fn[Nat, Real](c, b))(k) = cauchy_product(a, mul_fn[Nat, Real](c, b), k)","proof":["cauchy_seq(a, mul_fn[Nat, Real](c, b), k) = cauchy_product(a, mul_fn[Nat, Real](c, b), k)"]}
{"goal":"cauchy_product(a, mul_fn[Nat, Real](c, b), k) = c * cauchy_product(a, b, k)","proof":["c * cauchy_product(a, b, k) = cauchy_product(a, mul_fn[Nat, Real](c, b), k)"]}
{"goal":"cauchy_seq(a, b)(k) = cauchy_product(a, b, k)","proof":["cauchy_seq(a, b, k) = cauchy_product(a, b, k)"]}
{"goal":"cauchy_seq(a, mul_fn[Nat, Real](c, b))(k) = c * cauchy_seq(a, b)(k)","proof":[]}
{"goal":"mul_fn[Nat, Real](c, cauchy_seq(a, b))(k) = c * cauchy_seq(a, b)(k)","proof":["c * cauchy_seq(a, b, k) = mul_fn(c, cauchy_seq(a, b), k)"]}
{"goal":"cauchy_seq(a, mul_fn[Nat, Real](c, b)) = mul_fn[Nat, Real](c, cauchy_seq(a, b))","proof":["let s0: Nat satisfy { mul_fn(c, cauchy_seq(a, b), s0) != cauchy_seq(a, mul_fn[Nat, Real](c, b), s0) }","c * cauchy_seq(a, b, s0) = mul_fn(c, cauchy_seq(a, b), s0)","c * cauchy_product(a, b, s0) = cauchy_product(a, mul_fn[Nat, Real](c, b), s0)","let s1: Nat -> Real satisfy { true }","let s2: Nat satisfy { true }","cauchy_seq(a, mul_fn[Nat, Real](c, b), s0) = cauchy_product(a, mul_fn[Nat, Real](c, b), s0)","cauchy_seq(s1, s1, s2) = cauchy_product(s1, s1, s2)","cauchy_seq = cauchy_product"]}
{"goal":"partial[Real](cauchy_seq(a, mul_fn[Nat, Real](c, b)), n) = partial[Real](mul_fn[Nat, Real](c, cauchy_seq(a, b)), n)","proof":["mul_fn[Nat, Real](c, cauchy_seq(a, b)) != cauchy_seq(a, mul_fn[Nat, Real](c, b))"]}
{"goal":"partial[Real](mul_fn[Nat, Real](c, cauchy_seq(a, b)), n) = c * partial[Real](cauchy_seq(a, b), n)","proof":["c * partial[Real](cauchy_seq(a, b), n) = partial[Real](mul_fn[Nat, Real](c, cauchy_seq(a, b)), n)"]}
{"goal":"partial_cauchy_scalar_right","proof":["c * partial[Real](cauchy_seq(a, b), n) != partial[Real](mul_fn[Nat, Real](c, cauchy_seq(a, b)), n)"]}
{"goal":"abs_fn(constant[Nat, Real](0))(n) = constant[Nat, Real](0)(n).abs","proof":["abs_fn(constant[Nat, Real](0), n) = constant(0, n).abs"]}
{"goal":"constant[Nat, Real](0)(n) = 0","proof":["let s0: Nat -> Real satisfy { true }","let s1: Nat satisfy { true }","cauchy_coefficient(s0, constant[Nat, Real](0), s1, n) = constant(0, n)","cauchy_coefficient(s0, constant[Nat, Real](0), s1, n) = 0"]}
{"goal":"0.abs = 0","proof":["0.abs = 0 or 0.is_negative","0.is_negative","not 0.is_negative or 0 != 0"]}
{"goal":"abs_fn_zero","proof":[]}
{"goal":"abs_fn(a)(n) = a(n).abs","proof":["abs_fn(a, n) = a(n).abs"]}
{"goal":"a(n).abs >= 0","proof":["(-a(n)).abs = a(n).abs","not (-a(n)).abs >= 0","(-a(n)).abs >= 0"]}
{"goal":"abs_fn_nonneg","proof":[]}
{"goal":"abs_fn(mul_fn[Nat, Real](c, a))(n) = mul_fn[Nat, Real](c, a)(n).abs","proof":["abs_fn(mul_fn[Nat, Real](c, a), n) = mul_fn(c, a, n).abs"]}
{"goal":"mul_fn[Nat, Real](c, a)(n) = c * a(n)","proof":["c * a(n) = mul_fn(c, a, n)"]}
{"goal":"(c * a(n)).abs = c.abs * a(n).abs","proof":["c.abs * a(n).abs = (c * a(n)).abs"]}
{"goal":"abs_fn(a)(n) = a(n).abs","proof":["abs_fn(a, n) = a(n).abs"]}
{"goal":"c.abs * a(n).abs = c.abs * abs_fn(a)(n)","proof":["abs_fn(a, n) != a(n).abs"]}
{"goal":"abs_fn_scalar_mul","proof":[]}
{"goal":"abs_fn(a)(n) = a(n).abs","proof":["abs_fn(a, n) = a(n).abs"]}
{"goal":"compose[Nat, Real, Real](Real.abs, a)(n) = a(n).abs","proof":["compose[Nat, Real, Real](Real.abs, a, n) = a(n).abs"]}
{"goal":"a(n).abs = a(n).abs","proof":[]}
{"goal":"abs_fn_eq_compose","proof":["compose[Nat, Real, Real](Real.abs, a, n) != a(n).abs"]}
{"goal":"converges(partial[Real](abs_fn(a)))","proof":["converges(partial[Real](abs_fn(a))) = absolutely_converges(a)"]}
{"goal":"abs_fn(a)(n) = compose[Nat, Real, Real](Real.abs, a)(n)","proof":["compose[Nat, Real, Real](Real.abs, a, n) = abs_fn(a, n)"]}
{"goal":"abs_fn(a) = compose[Nat, Real, Real](Real.abs, a)","proof":["let s0: Nat satisfy { compose[Nat, Real, Real](Real.abs, a, s0) != abs_fn(a, s0) }","compose[Nat, Real, Real](Real.abs, a, s0) = abs_fn(a, s0)"]}
{"goal":"partial[Real](abs_fn(a)) = partial[Real](compose[Nat, Real, Real](Real.abs, a))","proof":["let s0: Nat satisfy { partial[Real](compose[Nat, Real, Real](Real.abs, a), s0) != partial[Real](abs_fn(a), s0) }","let s1: (Nat -> Real, Nat -> Real, Nat) -> Nat satisfy { forall(x0: Nat -> Real, x1: Nat -> Real, x2: Nat) { s1(x0, x1, x2) < x2 or partial[Real](x0, x2) = partial[Real](x1, x2) } and forall(x3: Nat -> Real, x4: Nat -> Real, x5: Nat) { x3(s1(x3, x4, x5)) != x4(s1(x3, x4, x5)) or partial[Real](x3, x5) = partial[Real](x4, x5) } }","compose[Nat, Real, Real](Real.abs, a, s1(abs_fn(a), compose[Nat, Real, Real](Real.abs, a), s0)) = abs_fn(a, s1(abs_fn(a), compose[Nat, Real, Real](Real.abs, a), s0))","compose[Nat, Real, Real](Real.abs, a, s1(abs_fn(a), compose[Nat, Real, Real](Real.abs, a), s0)) != abs_fn(a, s1(abs_fn(a), compose[Nat, Real, Real](Real.abs, a), s0)) or partial[Real](compose[Nat, Real, Real](Real.abs, a), s0) = partial[Real](abs_fn(a), s0)"]}
{"goal":"converges(partial[Real](compose[Nat, Real, Real](Real.abs, a)))","proof":[]}
{"goal":"converges(partial[Real](a))","proof":[]}
{"goal":"absolutely_converges_imp_converges","proof":["converges(partial[Real](abs_fn(a))) = absolutely_converges(a)"]}
{"goal":"converges(partial[Real](abs_fn(a)))","proof":["converges(partial[Real](abs_fn(a))) = absolutely_converges(a)"]}
{"goal":"abs_fn(mul_fn[Nat, Real](c, a))(n) = c.abs * abs_fn(a)(n)","proof":["c.abs * abs_fn(a, n) = abs_fn(mul_fn[Nat, Real](c, a), n)"]}
{"goal":"mul_fn[Nat, Real](c.abs, abs_fn(a))(n) = c.abs * abs_fn(a)(n)","proof":["c.abs * abs_fn(a, n) = mul_fn(c.abs, abs_fn(a), n)"]}
{"goal":"abs_fn(mul_fn[Nat, Real](c, a)) = mul_fn[Nat, Real](c.abs, abs_fn(a))","proof":["let s0: Nat satisfy { mul_fn(c.abs, abs_fn(a), s0) != abs_fn(mul_fn[Nat, Real](c, a), s0) }","c.abs * abs_fn(a, s0) = mul_fn(c.abs, abs_fn(a), s0)","c.abs * abs_fn(a, s0) = abs_fn(mul_fn[Nat, Real](c, a), s0)"]}
{"goal":"partial[Real](abs_fn(mul_fn[Nat, Real](c, a))) = partial[Real](mul_fn[Nat, Real](c.abs, abs_fn(a)))","proof":["let s0: Nat satisfy { partial[Real](mul_fn[Nat, Real](c.abs, abs_fn(a)), s0) != partial[Real](abs_fn(mul_fn[Nat, Real](c, a)), s0) }","mul_fn[Nat, Real](c.abs, abs_fn(a)) != abs_fn(mul_fn[Nat, Real](c, a))"]}
{"goal":"partial[Real](mul_fn[Nat, Real](c.abs, abs_fn(a))) = mul_fn[Nat, Real](c.abs, partial[Real](abs_fn(a)))","proof":["let s0: Nat satisfy { mul_fn(c.abs, partial[Real](abs_fn(a)), s0) != partial[Real](mul_fn[Nat, Real](c.abs, abs_fn(a)), s0) }","c.abs * partial[Real](abs_fn(a), s0) = partial[Real](mul_fn[Nat, Real](c.abs, abs_fn(a)), s0)","c.abs * partial[Real](abs_fn(a), s0) = mul_fn(c.abs, partial[Real](abs_fn(a)), s0)"]}
{"goal":"mul_fn[Nat, Real](c.abs, partial[Real](abs_fn(a)))(n) = c.abs * partial[Real](abs_fn(a))(n)","proof":["mul_fn(c.abs, partial[Real](abs_fn(a)), n) = partial[Real](mul_fn[Nat, Real](c.abs, abs_fn(a)), n)","c.abs * partial[Real](abs_fn(a), n) != partial[Real](mul_fn[Nat, Real](c.abs, abs_fn(a)), n)","c.abs * partial[Real](abs_fn(a), n) = partial[Real](mul_fn[Nat, Real](c.abs, abs_fn(a)), n)"]}
{"goal":"mul_seq(c.abs, partial[Real](abs_fn(a)))(n) = c.abs * partial[Real](abs_fn(a))(n)","proof":["mul_seq(c.abs, partial[Real](abs_fn(a)), n) = c.abs * partial[Real](abs_fn(a), n)"]}
{"goal":"mul_fn[Nat, Real](c.abs, partial[Real](abs_fn(a))) = mul_seq(c.abs, partial[Real](abs_fn(a)))","proof":["let s0: Nat satisfy { mul_seq(c.abs, partial[Real](abs_fn(a)), s0) != mul_fn(c.abs, partial[Real](abs_fn(a)), s0) }","mul_seq(c.abs, partial[Real](abs_fn(a)), s0) = c.abs * partial[Real](abs_fn(a), s0)","mul_fn(c.abs, partial[Real](abs_fn(a)), s0) = partial[Real](mul_fn[Nat, Real](c.abs, abs_fn(a)), s0)","c.abs * partial[Real](abs_fn(a), s0) != mul_fn(c.abs, partial[Real](abs_fn(a)), s0)","c.abs * partial[Real](abs_fn(a), s0) = partial[Real](mul_fn[Nat, Real](c.abs, abs_fn(a)), s0)"]}
{"goal":"converges(mul_seq(c.abs, partial[Real](abs_fn(a))))","proof":[]}
{"goal":"converges(mul_fn[Nat, Real](c.abs, partial[Real](abs_fn(a))))","proof":[]}
{"goal":"converges(partial[Real](abs_fn(mul_fn[Nat, Real](c, a))))","proof":[]}
{"goal":"absolutely_converges(mul_fn[Nat, Real](c, a))","proof":["converges(partial[Real](abs_fn(mul_fn[Nat, Real](c, a)))) = absolutely_converges(mul_fn[Nat, Real](c, a))"]}
{"goal":"absolutely_converges_scalar_mul","proof":[]}
{"goal":"converges(partial[Real](abs_fn(a)))","proof":["converges(partial[Real](abs_fn(a))) = absolutely_converges(a)"]}
{"goal":"converges(partial[Real](abs_fn(b)))","proof":["converges(partial[Real](abs_fn(b))) = absolutely_converges(b)"]}
{"goal":"(a(n) + b(n)).abs <= a(n).abs + b(n).abs","proof":["(a(n) + b(n)).abs <= a(n).abs + b(n).abs"]}
{"goal":"add_fn[Nat, Real](a, b)(n) = a(n) + b(n)","proof":["a(n) + b(n) = add_fn[Nat, Real](a, b, n)"]}
{"goal":"abs_fn(add_fn[Nat, Real](a, b))(n) = add_fn[Nat, Real](a, b)(n).abs","proof":["abs_fn(add_fn[Nat, Real](a, b), n) = add_fn[Nat, Real](a, b, n).abs"]}
{"goal":"abs_fn(add_fn[Nat, Real](a, b))(n) <= a(n).abs + b(n).abs","proof":[]}
{"goal":"abs_fn(add_fn[Nat, Real](a, b))(n) <= abs_fn(a)(n) + abs_fn(b)(n)","proof":["(a(n) + b(n)).abs <= a(n).abs + b(n).abs = a(n).abs + b(n).abs >= (a(n) + b(n)).abs","add_fn[Nat, Real](a, b, n).abs <= abs_fn(a, n) + abs_fn(b, n) = abs_fn(a, n) + abs_fn(b, n) >= add_fn[Nat, Real](a, b, n).abs","abs_fn(b, n) + abs_fn(a, n) = abs_fn(a, n) + abs_fn(b, n)","b(n).abs + a(n).abs = a(n).abs + b(n).abs","abs_fn(a, n) = a(n).abs","abs_fn(b, n) = b(n).abs"]}
{"goal":"abs_fn(add_fn[Nat, Real](a, b))(n) <= add_fn[Nat, Real](abs_fn(a), abs_fn(b))(n)","proof":["abs_fn(a, n) + abs_fn(b, n) = add_fn[Nat, Real](abs_fn(a), abs_fn(b), n)"]}
{"goal":"seq_lte(abs_fn(add_fn[Nat, Real](a, b)), add_fn[Nat, Real](abs_fn(a), abs_fn(b)))","proof":["let s0: (Nat -> Real, Nat -> Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Nat -> Real, x2: Nat) { not seq_lte(x0, x1) or x0(x2) <= x1(x2) } and forall(x3: Nat -> Real, x4: Nat -> Real) { not x3(s0(x3, x4)) <= x4(s0(x3, x4)) or seq_lte(x3, x4) } }","abs_fn(add_fn[Nat, Real](a, b), s0(abs_fn(add_fn[Nat, Real](a, b)), add_fn[Nat, Real](abs_fn(a), abs_fn(b)))) <= add_fn[Nat, Real](abs_fn(a), abs_fn(b), s0(abs_fn(add_fn[Nat, Real](a, b)), add_fn[Nat, Real](abs_fn(a), abs_fn(b))))","not abs_fn(add_fn[Nat, Real](a, b), s0(abs_fn(add_fn[Nat, Real](a, b)), add_fn[Nat, Real](abs_fn(a), abs_fn(b)))) <= add_fn[Nat, Real](abs_fn(a), abs_fn(b), s0(abs_fn(add_fn[Nat, Real](a, b)), add_fn[Nat, Real](abs_fn(a), abs_fn(b)))) or seq_lte(abs_fn(add_fn[Nat, Real](a, b)), add_fn[Nat, Real](abs_fn(a), abs_fn(b)))"]}
{"goal":"abs_fn(add_fn[Nat, Real](a, b))(n) >= 0","proof":["abs_fn(add_fn[Nat, Real](a, b), n) >= 0"]}
{"goal":"is_lower_bound(abs_fn(add_fn[Nat, Real](a, b)), 0)","proof":["let s0: (Nat -> Real, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not is_lower_bound(x0, x1) or x1 <= x0(x2) } and forall(x3: Real, x4: Nat -> Real) { not x3 <= x4(s0(x4, x3)) or is_lower_bound(x4, x3) } }","not 0 <= abs_fn(add_fn[Nat, Real](a, b), s0(abs_fn(add_fn[Nat, Real](a, b)), 0)) or is_lower_bound(abs_fn(add_fn[Nat, Real](a, b)), 0)","0 <= abs_fn(add_fn[Nat, Real](a, b), s0(abs_fn(add_fn[Nat, Real](a, b)), 0)) = abs_fn(add_fn[Nat, Real](a, b), s0(abs_fn(add_fn[Nat, Real](a, b)), 0)) >= 0","abs_fn(add_fn[Nat, Real](a, b), s0(abs_fn(add_fn[Nat, Real](a, b)), 0)) >= 0","not abs_fn(add_fn[Nat, Real](a, b), s0(abs_fn(add_fn[Nat, Real](a, b)), 0)) >= 0 or 0 <= abs_fn(add_fn[Nat, Real](a, b), s0(abs_fn(add_fn[Nat, Real](a, b)), 0))","not 0 <= abs_fn(add_fn[Nat, Real](a, b), s0(abs_fn(add_fn[Nat, Real](a, b)), 0))"]}
{"goal":"partial[Real](add_fn[Nat, Real](abs_fn(a), abs_fn(b))) = add_fn[Nat, Real](partial[Real](abs_fn(a)), partial[Real](abs_fn(b)))","proof":["let s0: Nat satisfy { add_fn[Nat, Real](partial[Real](abs_fn(a)), partial[Real](abs_fn(b)), s0) != partial[Real](add_fn[Nat, Real](abs_fn(a), abs_fn(b)), s0) }","partial[Real](abs_fn(a), s0) + partial[Real](abs_fn(b), s0) = partial[Real](add_fn[Nat, Real](abs_fn(a), abs_fn(b)), s0)","partial[Real](abs_fn(a), s0) + partial[Real](abs_fn(b), s0) = add_fn[Nat, Real](partial[Real](abs_fn(a)), partial[Real](abs_fn(b)), s0)"]}
{"goal":"add_fn[Nat, Real](partial[Real](abs_fn(a)), partial[Real](abs_fn(b)))(n) = partial[Real](abs_fn(a))(n) + partial[Real](abs_fn(b))(n)","proof":["add_fn[Nat, Real](partial[Real](abs_fn(a)), partial[Real](abs_fn(b)), n) = partial[Real](add_fn[Nat, Real](abs_fn(a), abs_fn(b)), n)","partial[Real](abs_fn(a), n) + partial[Real](abs_fn(b), n) != partial[Real](add_fn[Nat, Real](abs_fn(a), abs_fn(b)), n)","partial[Real](abs_fn(a), n) + partial[Real](abs_fn(b), n) = partial[Real](add_fn[Nat, Real](abs_fn(a), abs_fn(b)), n)"]}
{"goal":"add_seq(partial[Real](abs_fn(a)), partial[Real](abs_fn(b)))(n) = partial[Real](abs_fn(a))(n) + partial[Real](abs_fn(b))(n)","proof":["partial[Real](abs_fn(a), n) + partial[Real](abs_fn(b), n) = add_seq(partial[Real](abs_fn(a)), partial[Real](abs_fn(b)), n)"]}
{"goal":"add_fn[Nat, Real](partial[Real](abs_fn(a)), partial[Real](abs_fn(b))) = add_seq(partial[Real](abs_fn(a)), partial[Real](abs_fn(b)))","proof":["let s0: Nat satisfy { add_seq(partial[Real](abs_fn(a)), partial[Real](abs_fn(b)), s0) != add_fn[Nat, Real](partial[Real](abs_fn(a)), partial[Real](abs_fn(b)), s0) }","add_fn[Nat, Real](partial[Real](abs_fn(a)), partial[Real](abs_fn(b)), s0) = partial[Real](add_fn[Nat, Real](abs_fn(a), abs_fn(b)), s0)","partial[Real](abs_fn(a), s0) + partial[Real](abs_fn(b), s0) = add_seq(partial[Real](abs_fn(a)), partial[Real](abs_fn(b)), s0)","add_seq(partial[Real](abs_fn(a)), partial[Real](abs_fn(b)), s0) != partial[Real](add_fn[Nat, Real](abs_fn(a), abs_fn(b)), s0)","partial[Real](abs_fn(a), s0) + partial[Real](abs_fn(b), s0) = partial[Real](add_fn[Nat, Real](abs_fn(a), abs_fn(b)), s0)"]}
{"goal":"converges(add_seq(partial[Real](abs_fn(a)), partial[Real](abs_fn(b))))","proof":["not converges(partial[Real](abs_fn(a)))"]}
{"goal":"converges(add_fn[Nat, Real](partial[Real](abs_fn(a)), partial[Real](abs_fn(b))))","proof":[]}
{"goal":"converges(partial[Real](add_fn[Nat, Real](abs_fn(a), abs_fn(b))))","proof":[]}
{"goal":"converges(partial[Real](abs_fn(add_fn[Nat, Real](a, b))))","proof":["not seq_lte(abs_fn(add_fn[Nat, Real](a, b)), add_fn[Nat, Real](abs_fn(a), abs_fn(b)))"]}
{"goal":"absolutely_converges(add_fn[Nat, Real](a, b))","proof":["converges(partial[Real](abs_fn(add_fn[Nat, Real](a, b)))) = absolutely_converges(add_fn[Nat, Real](a, b))"]}
{"goal":"absolutely_converges_add","proof":["not absolutely_converges(a)"]}
{"goal":"converges(partial[Real](abs_fn(a)))","proof":["converges(partial[Real](abs_fn(a))) = absolutely_converges(a)"]}
{"goal":"exists(k0: Nat) { cauchy_bound(partial[Real](abs_fn(a)), k0, eps) }","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: (Nat -> Real) -> Real) satisfy { forall(x0: Nat -> Real, x1: Real) { not converges(x0) or not x1.is_positive or cauchy_bound(x0, s0(x0, x1), x1) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","not cauchy_bound(partial[Real](abs_fn(a)), s0(partial[Real](abs_fn(a)), eps), eps)","not converges(partial[Real](abs_fn(a))) or not eps.is_positive or cauchy_bound(partial[Real](abs_fn(a)), s0(partial[Real](abs_fn(a)), eps), eps)"]}
{"goal":"cauchy_bound(partial[Real](abs_fn(a)), big_n, eps)","proof":[]}
{"goal":"partial[Real](abs_fn(a))(n).is_close(partial[Real](abs_fn(a))(m), eps)","proof":["not cauchy_bound(partial[Real](abs_fn(a)), big_n, eps) or not big_n <= n + Nat.0 or not big_n <= m or partial[Real](abs_fn(a), n + Nat.0).is_close(partial[Real](abs_fn(a), m), eps)","not big_n <= n or not n <= m or big_n <= m","not big_n <= n or not n <= n + Nat.0 or big_n <= n + Nat.0","n + Nat.0 != n + Nat.0 or n <= n + Nat.0","n + Nat.0 = n","n <= n + Nat.0","not partial[Real](abs_fn(a), n + Nat.0).is_close(partial[Real](abs_fn(a), m), eps)","not big_n <= n or big_n <= m","big_n <= m","not n <= n + Nat.0 or big_n <= n + Nat.0","big_n <= n + Nat.0","not big_n <= n + Nat.0 or not big_n <= m or partial[Real](abs_fn(a), n + Nat.0).is_close(partial[Real](abs_fn(a), m), eps)"]}
{"goal":"abs_fn(a)(k) >= 0","proof":["abs_fn(a, k) >= 0"]}
{"goal":"is_lower_bound(abs_fn(a), 0)","proof":["let s0: (Nat -> Real, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not is_lower_bound(x0, x1) or x1 <= x0(x2) } and forall(x3: Real, x4: Nat -> Real) { not x3 <= x4(s0(x4, x3)) or is_lower_bound(x4, x3) } }","not 0 <= abs_fn(a, s0(abs_fn(a), 0)) or is_lower_bound(abs_fn(a), 0)","0 <= abs_fn(a, s0(abs_fn(a), 0)) = abs_fn(a, s0(abs_fn(a), 0)) >= 0","abs_fn(a, s0(abs_fn(a), 0)) >= 0","not 0 <= abs_fn(a, s0(abs_fn(a), 0))"]}
{"goal":"is_increasing(partial[Real](abs_fn(a)))","proof":["not is_lower_bound(abs_fn(a), 0) or is_increasing(partial[Real](abs_fn(a)))"]}
{"goal":"partial[Real](abs_fn(a))(n) <= partial[Real](abs_fn(a))(m)","proof":["not is_increasing(partial[Real](abs_fn(a)))"]}
{"goal":"partial[Real](abs_fn(a))(m).is_close(partial[Real](abs_fn(a))(n), eps)","proof":["not partial[Real](abs_fn(a), n).is_close(partial[Real](abs_fn(a), m), eps) or partial[Real](abs_fn(a), m).is_close(partial[Real](abs_fn(a), n), eps)"]}
{"goal":"partial[Real](abs_fn(a), n) = partial[Real](abs_fn(a))(n)","proof":[]}
{"goal":"partial[Real](abs_fn(a), m) = partial[Real](abs_fn(a))(m)","proof":[]}
{"goal":"partial[Real](abs_fn(a), m).is_close(partial[Real](abs_fn(a), n), eps)","proof":[]}
{"goal":"(partial[Real](abs_fn(a), m) - partial[Real](abs_fn(a), n)).abs < eps","proof":["(partial[Real](abs_fn(a), m) - partial[Real](abs_fn(a), n)).abs < eps = partial[Real](abs_fn(a), m).is_close(partial[Real](abs_fn(a), n), eps)"]}
{"goal":"partial[Real](abs_fn(a), n) <= partial[Real](abs_fn(a), m)","proof":[]}
{"goal":"partial[Real](abs_fn(a), m) - partial[Real](abs_fn(a), n) < eps","proof":["not (partial[Real](abs_fn(a), m) - partial[Real](abs_fn(a), n)).is_close(0, eps) or partial[Real](abs_fn(a), m) - partial[Real](abs_fn(a), n) < 0 + eps","not (partial[Real](abs_fn(a), m) - partial[Real](abs_fn(a), n)).abs < eps or (partial[Real](abs_fn(a), m) - partial[Real](abs_fn(a), n)).is_close(0, eps)","0 + eps = eps","not partial[Real](abs_fn(a), m) - partial[Real](abs_fn(a), n) < 0 + eps","(partial[Real](abs_fn(a), m) - partial[Real](abs_fn(a), n)).is_close(0, eps)","not (partial[Real](abs_fn(a), m) - partial[Real](abs_fn(a), n)).is_close(0, eps)"]}
{"goal":"abs_conv_tail_bound","proof":["let (s0: Nat -> Nat, s1: Nat -> Nat) satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { s0(x1) <= s1(x1) } and forall(x2: Nat) { not partial[Real](abs_fn(a), s1(x2)) - partial[Real](abs_fn(a), s0(x2)) < eps } }","let s2: Nat satisfy { forall(x3: Nat, x4: Nat) { not s2 <= x3 or not absolutely_converges(a) or not eps.is_positive or not x3 <= x4 or partial[Real](abs_fn(a), x4) - partial[Real](abs_fn(a), x3) < eps } }","not partial[Real](abs_fn(a), s1(s2)) - partial[Real](abs_fn(a), s0(s2)) < eps","s0(s2) <= s1(s2)","s2 <= s0(s2)","not s2 <= s0(s2) or not absolutely_converges(a) or not eps.is_positive or not s0(s2) <= s1(s2) or partial[Real](abs_fn(a), s1(s2)) - partial[Real](abs_fn(a), s0(s2)) < eps","not s2 <= s0(s2) or not s0(s2) <= s1(s2) or partial[Real](abs_fn(a), s1(s2)) - partial[Real](abs_fn(a), s0(s2)) < eps","not s2 <= s0(s2)"]}
{"goal":"sum[Real](List.nil[Real]) = 0","proof":["List.nil[Real] != List.nil[Real] or sum[Real](List.nil[Real]) = 0"]}
{"goal":"0.abs = 0","proof":["0.abs = 0 or 0.is_negative","0.is_negative","not 0.is_negative or 0 != 0"]}
{"goal":"map[Real, Real](List.nil[Real], Real.abs) = List.nil[Real]","proof":["List.nil[Real].map(Real.abs) = map[Real, Real](List.nil[Real], Real.abs)","List.nil[Real].map(Real.abs) != List.nil[Real]","List.nil[Real] != List.nil[Real] or List.nil[Real].map(Real.abs) = List.nil[Real]"]}
{"goal":"sum[Real](List.nil[Real]) = 0","proof":[]}
{"goal":"p(List.nil[Real])","proof":["sum[Real](List.nil[Real]).abs <= sum[Real](map[Real, Real](List.nil[Real], Real.abs)) = p(List.nil[Real])","sum[Real](List.nil[Real]).abs <= sum[Real](map[Real, Real](List.nil[Real], Real.abs))"]}
{"goal":"sum[Real](tail).abs <= sum[Real](map[Real, Real](tail, Real.abs))","proof":["sum[Real](tail).abs <= sum[Real](map[Real, Real](tail, Real.abs)) = p(tail)"]}
{"goal":"sum[Real](List.cons(head, tail)) = head + sum[Real](tail)","proof":["List.cons(head, tail) != List.cons(head, tail) or head + sum[Real](tail) = sum[Real](List.cons(head, tail))"]}
{"goal":"(head + sum[Real](tail)).abs <= head.abs + sum[Real](tail).abs","proof":["(head + sum[Real](tail)).abs <= head.abs + sum[Real](tail).abs"]}
{"goal":"head.abs + sum[Real](tail).abs <= head.abs + sum[Real](map[Real, Real](tail, Real.abs))","proof":["not sum[Real](tail).abs <= sum[Real](map[Real, Real](tail, Real.abs)) or head.abs + sum[Real](tail).abs <= head.abs + sum[Real](map[Real, Real](tail, Real.abs))"]}
{"goal":"map[Real, Real](List.cons(head, tail), Real.abs) = List.cons(head.abs, map[Real, Real](tail, Real.abs))","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head.abs, map[Real, Real](tail, Real.abs)) = map[Real, Real](List.cons(head, tail), Real.abs)"]}
{"goal":"sum[Real](List.cons(head.abs, map[Real, Real](tail, Real.abs))) = head.abs + sum[Real](map[Real, Real](tail, Real.abs))","proof":["head.abs + sum[Real](map[Real, Real](tail, Real.abs)) != sum[Real](map[Real, Real](List.cons(head, tail), Real.abs))","List.cons(head.abs, map[Real, Real](tail, Real.abs)) != map[Real, Real](List.cons(head, tail), Real.abs) or head.abs + sum[Real](map[Real, Real](tail, Real.abs)) = sum[Real](map[Real, Real](List.cons(head, tail), Real.abs))"]}
{"goal":"sum[Real](List.cons(head, tail)).abs <= sum[Real](map[Real, Real](List.cons(head, tail), Real.abs))","proof":["sum[Real](List.cons(head, tail)).abs <= sum[Real](map[Real, Real](List.cons(head, tail), Real.abs))"]}
{"goal":"p(List.cons(head, tail))","proof":["sum[Real](List.cons(head, tail)).abs <= sum[Real](map[Real, Real](List.cons(head, tail), Real.abs)) = p(List.cons(head, tail))","not sum[Real](List.cons(head, tail)).abs <= sum[Real](map[Real, Real](List.cons(head, tail), Real.abs))"]}
{"goal":"p(items)","proof":["sum[Real](items).abs <= sum[Real](map[Real, Real](items, Real.abs)) = p(items)","sum[Real](items).abs <= sum[Real](map[Real, Real](items, Real.abs))"]}
{"goal":"sum_triangle_ineq","proof":["sum[Real](items).abs <= sum[Real](map[Real, Real](items, Real.abs)) = p(items)"]}
{"goal":"lte_fn(f, g)","proof":[]}
{"goal":"f(k) <= g(k)","proof":["not lte_fn(f, g) or f(k) <= g(k)"]}
{"goal":"seq_lte(f, g)","proof":["let s0: (Nat -> Real, Nat -> Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Nat -> Real, x2: Nat) { not seq_lte(x0, x1) or x0(x2) <= x1(x2) } and forall(x3: Nat -> Real, x4: Nat -> Real) { not x3(s0(x3, x4)) <= x4(s0(x3, x4)) or seq_lte(x3, x4) } }","f(s0(f, g)) <= g(s0(f, g))","not f(s0(f, g)) <= g(s0(f, g)) or seq_lte(f, g)"]}
{"goal":"seq_lte(partial[Real](f), partial[Real](g))","proof":[]}
{"goal":"partial[Real](f)(k) <= partial[Real](g)(k)","proof":["not seq_lte(partial[Real](f), partial[Real](g)) or partial[Real](f, k) <= partial[Real](g, k)","partial[Real](f, k) <= partial[Real](g, k)"]}
{"goal":"partial[Real](f, n) = sum[Real](map[Nat, Real](n.range, f))","proof":["sum[Real](map[Nat, Real](n.range, f)) = partial[Real](f, n)"]}
{"goal":"partial[Real](g, n) = sum[Real](map[Nat, Real](n.range, g))","proof":["sum[Real](map[Nat, Real](n.range, g)) = partial[Real](g, n)"]}
{"goal":"partial[Real](f)(n) <= partial[Real](g)(n)","proof":["partial[Real](f, n) <= partial[Real](g, n)"]}
{"goal":"sum[Real](map[Nat, Real](n.range, f)) <= sum[Real](map[Nat, Real](n.range, g))","proof":[]}
{"goal":"sum_map_range_le","proof":[]}
{"goal":"cauchy_coefficient(a, b, n)(k) = a(k) * b(n - k)","proof":["a(k) * b(n - k) = cauchy_coefficient(a, b, n, k)"]}
{"goal":"(a(k) * b(n - k)).abs = a(k).abs * b(n - k).abs","proof":["a(k).abs * b(n - k).abs = (a(k) * b(n - k)).abs"]}
{"goal":"cauchy_coefficient(abs_fn(a), abs_fn(b), n)(k) = abs_fn(a)(k) * abs_fn(b)(n - k)","proof":["abs_fn(a, k) * abs_fn(b, n - k) = cauchy_coefficient(abs_fn(a), abs_fn(b), n, k)"]}
{"goal":"abs_fn(a)(k) = a(k).abs","proof":["abs_fn(a, k) = a(k).abs"]}
{"goal":"abs_fn(b)(n - k) = b(n - k).abs","proof":["abs_fn(b, n - k) = b(n - k).abs"]}
{"goal":"cauchy_coefficient(abs_fn(a), abs_fn(b), n)(k) = a(k).abs * b(n - k).abs","proof":[]}
{"goal":"cauchy_coefficient_abs_bound","proof":["cauchy_coefficient(abs_fn(a), abs_fn(b), n, k) <= cauchy_coefficient(a, b, n, k).abs or cauchy_coefficient(a, b, n, k).abs <= cauchy_coefficient(abs_fn(a), abs_fn(b), n, k)","cauchy_coefficient(abs_fn(a), abs_fn(b), n, k) <= cauchy_coefficient(a, b, n, k).abs"]}
{"goal":"cauchy_product(a, b, n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = cauchy_product(a, b, n)"]}
{"goal":"cauchy_product(abs_fn(a), abs_fn(b), n) = sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(abs_fn(a), abs_fn(b), n)))","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(abs_fn(a), abs_fn(b), n))) = cauchy_product(abs_fn(a), abs_fn(b), n)"]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))).abs <= sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), Real.abs))","proof":[]}
{"goal":"map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), Real.abs) = map[Nat, Real](n.suc.range, compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n)))","proof":[]}
{"goal":"cauchy_coefficient(a, b, n)(k).abs <= cauchy_coefficient(abs_fn(a), abs_fn(b), n)(k)","proof":[]}
{"goal":"compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n))(k) = cauchy_coefficient(a, b, n)(k).abs","proof":["compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n), k) = cauchy_coefficient(a, b, n, k).abs"]}
{"goal":"compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n))(k) = cauchy_coefficient(a, b, n)(k).abs","proof":[]}
{"goal":"compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n))(k) <= cauchy_coefficient(abs_fn(a), abs_fn(b), n)(k)","proof":["not cauchy_coefficient(a, b, n, k).abs <= cauchy_coefficient(abs_fn(a), abs_fn(b), n, k)"]}
{"goal":"lte_fn(compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n)), cauchy_coefficient(abs_fn(a), abs_fn(b), n))","proof":["let s0: (Nat -> Real, Nat -> Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Nat -> Real, x2: Nat) { not lte_fn(x0, x1) or x0(x2) <= x1(x2) } and forall(x3: Nat -> Real, x4: Nat -> Real) { not x3(s0(x3, x4)) <= x4(s0(x3, x4)) or lte_fn(x3, x4) } }","compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n), s0(compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n)), cauchy_coefficient(abs_fn(a), abs_fn(b), n))) <= cauchy_coefficient(abs_fn(a), abs_fn(b), n, s0(compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n)), cauchy_coefficient(abs_fn(a), abs_fn(b), n)))","not compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n), s0(compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n)), cauchy_coefficient(abs_fn(a), abs_fn(b), n))) <= cauchy_coefficient(abs_fn(a), abs_fn(b), n, s0(compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n)), cauchy_coefficient(abs_fn(a), abs_fn(b), n))) or lte_fn(compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n)), cauchy_coefficient(abs_fn(a), abs_fn(b), n))"]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n)))) <= sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(abs_fn(a), abs_fn(b), n)))","proof":[]}
{"goal":"cauchy_product(a, b, n).abs <= cauchy_product(abs_fn(a), abs_fn(b), n)","proof":["sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n))) = cauchy_product(a, b, n)","sum[Real](map[Nat, Real](n.suc.range, cauchy_coefficient(abs_fn(a), abs_fn(b), n))) = cauchy_product(abs_fn(a), abs_fn(b), n)","not cauchy_product(a, b, n).abs <= sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), Real.abs)) or not sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), Real.abs)) <= cauchy_product(abs_fn(a), abs_fn(b), n) or cauchy_product(a, b, n).abs <= cauchy_product(abs_fn(a), abs_fn(b), n)","cauchy_product(a, b, n).abs <= sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), Real.abs))","sum[Real](map[Nat, Real](n.suc.range, compose[Nat, Real, Real](Real.abs, cauchy_coefficient(a, b, n)))) <= cauchy_product(abs_fn(a), abs_fn(b), n)","not sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), Real.abs)) <= cauchy_product(abs_fn(a), abs_fn(b), n) or not cauchy_product(a, b, n).abs <= sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), Real.abs))","sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), Real.abs)) <= cauchy_product(abs_fn(a), abs_fn(b), n)","not sum[Real](map[Real, Real](map[Nat, Real](n.suc.range, cauchy_coefficient(a, b, n)), Real.abs)) <= cauchy_product(abs_fn(a), abs_fn(b), n)"]}
{"goal":"cauchy_product_abs_bound","proof":[]}
{"goal":"partial[A](f, Nat.0) = sum[A](map[Nat, A](Nat.0.range, f))","proof":["sum[A](map[Nat, A](Nat.0.range, f)) = partial[A](f, Nat.0)"]}
{"goal":"Nat.0.range = List.nil[Nat]","proof":["Nat.0 != Nat.0 or Nat.0.range = List.nil[Nat]"]}
{"goal":"map[Nat, A](List.nil[Nat], f) = List.nil[A]","proof":["List.nil[Nat].map(f) = map[Nat, A](List.nil[Nat], f)","List.nil[Nat].map(f) != List.nil[A]","List.nil[Nat] != List.nil[Nat] or List.nil[Nat].map(f) = List.nil[A]"]}
{"goal":"sum[A](List.nil[A]) = A.0","proof":["List.nil[A] != List.nil[A] or sum[A](List.nil[A]) = A.0"]}
{"goal":"partial_zero","proof":[]}
{"goal":"partial[Real](f, Nat.0) = 0","proof":[]}
{"goal":"partial[Real](f, Nat.0) >= 0","proof":["not 0 >= 0","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real, x2: Rat) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not 0.gt_rat(s0(0, 0)) or 0 <= 0","0.gt_rat(s0(0, 0)) or 0 <= 0","0 <= 0 = 0 >= 0","not 0 <= 0","not 0.gt_rat(s0(0, 0))","0.gt_rat(s0(0, 0))"]}
{"goal":"p(Nat.0)","proof":["not partial[Real](f, Nat.0) >= 0 or p(Nat.0)"]}
{"goal":"p(m)","proof":[]}
{"goal":"partial[Real](f, m) >= 0","proof":["not is_lower_bound(f, 0) or not p(m) or partial[Real](f, m) >= 0","not p(m) or partial[Real](f, m) >= 0"]}
{"goal":"is_lower_bound(f, 0)","proof":[]}
{"goal":"f(m) >= 0","proof":["not is_lower_bound(f, 0) or 0 <= f(m)","0 <= f(m) = f(m) >= 0","not 0 <= f(m)"]}
{"goal":"m.suc.range = m.range + List.singleton(m)","proof":["m.suc != m.suc or m.range.append(m) = m.suc.range","m.range + List.singleton(m) = m.range.append(m)","m.range.append(m) != m.suc.range"]}
{"goal":"map[Nat, Real](m.suc.range, f) = map[Nat, Real](m.range, f) + List.singleton(f(m))","proof":["map[Nat, Real](List.singleton(m), f) = List.singleton(f(m))"]}
{"goal":"sum[Real](map[Nat, Real](m.suc.range, f)) = sum[Real](map[Nat, Real](m.range, f)) + f(m)","proof":["partial[Real](f, m) + f(m) = partial[Real](f, m.suc)","sum[Real](map[Nat, Real](m.range, f)) = partial[Real](f, m)","sum[Real](map[Nat, Real](m.suc.range, f)) = partial[Real](f, m.suc)","sum[Real](map[Nat, Real](m.range, f)) + f(m) != partial[Real](f, m.suc)"]}
{"goal":"partial[Real](f, m.suc) = sum[Real](map[Nat, Real](m.suc.range, f))","proof":["sum[Real](map[Nat, Real](m.suc.range, f)) = partial[Real](f, m.suc)"]}
{"goal":"partial[Real](f, m) = sum[Real](map[Nat, Real](m.range, f))","proof":["sum[Real](map[Nat, Real](m.range, f)) = partial[Real](f, m)"]}
{"goal":"partial[Real](f, m.suc) = partial[Real](f, m) + f(m)","proof":[]}
{"goal":"0 + f(m) <= partial[Real](f, m) + f(m)","proof":["0 <= partial[Real](f, m) = partial[Real](f, m) >= 0"]}
{"goal":"0 + f(m) = f(m)","proof":["0 + f(m) - f(m) != 0 or 0 + f(m) = f(m)","0 + f(m) - f(m) = 0"]}
{"goal":"f(m) <= partial[Real](f, m) + f(m)","proof":["not 0 + f(m) <= partial[Real](f, m) + f(m)"]}
{"goal":"0 <= f(m)","proof":["not is_lower_bound(f, 0) or 0 <= f(m)"]}
{"goal":"0 <= partial[Real](f, m) + f(m)","proof":["not 0 <= partial[Real](f, m) or not 0 <= f(m) or 0 + 0 <= partial[Real](f, m) + f(m)","not is_lower_bound(f, 0) or 0 <= f(m)","0 <= partial[Real](f, m) = partial[Real](f, m) >= 0","0 + 0 = 0","0 <= f(m)","0 <= partial[Real](f, m)","not 0 + 0 <= partial[Real](f, m) + f(m)"]}
{"goal":"partial[Real](f, m.suc) >= 0","proof":["partial[Real](f, m) + f(m) = partial[Real](f, m.suc)","0 <= partial[Real](f, m.suc)","0 <= partial[Real](f, m.suc) = partial[Real](f, m.suc) >= 0"]}
{"goal":"p(m.suc)","proof":["not partial[Real](f, m.suc) >= 0 or p(m.suc)"]}
{"goal":"p(n)","proof":["let s0: (Nat -> Bool) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not p(s0(p)) or p(s0(p).suc)","not p(s0(p).suc) or not p(Nat.0) or p(n)","not p(s0(p).suc)","not p(Nat.0) or p(s0(p)) or p(n)","not p(s0(p))","p(s0(p))"]}
{"goal":"partial_nonneg","proof":["not is_lower_bound(f, 0) or not p(n) or partial[Real](f, n) >= 0","not p(n) or partial[Real](f, n) >= 0"]}
{"goal":"a * b = 0 * b","proof":["0 != a"]}
{"goal":"0 * b = 0","proof":["b * 0 = 0 * b","b * 0 != 0","b * 0 = 0"]}
{"goal":"a * b = 0","proof":["0 * b != 0"]}
{"goal":"a * b >= 0","proof":[]}
{"goal":"a * b = a * 0","proof":["0 != b"]}
{"goal":"a * 0 = 0","proof":["a + 0 = a","(a + 0) * 0 != 0","(a + 0) * 0 = 0"]}
{"goal":"a * b = 0","proof":["a * 0 != 0"]}
{"goal":"a * b >= 0","proof":[]}
{"goal":"(a * b).is_positive","proof":["not a > 0 or a.is_positive","not b > 0 or b.is_positive","b.is_positive","a.is_positive","not a.is_positive"]}
{"goal":"a * b > 0","proof":["not a * b <= 0 or not (a * b).is_positive or 0.is_positive","a * b <= 0 or a * b > 0","a * b <= 0","0.is_positive"]}
{"goal":"a * b >= 0","proof":["0 <= a * b = a * b >= 0","not 0 <= a * b","not 0 < a * b or 0 <= a * b","0 < a * b = a * b > 0","not 0 < a * b","0 < a * b"]}
{"goal":"a * b >= 0","proof":["not 0 <= a or 0 < a or 0 = a","not b <= 0 or b < 0 or 0 = b","0 <= a = a >= 0","0 < a = a > 0","not b < 0 or not b >= 0","b <= 0 or b > 0","not b <= 0 or b < 0","not 0 <= a or 0 < a","not b < 0","not b <= 0","0 <= a","0 < a","a > 0","b > 0","not b > 0"]}
{"goal":"mul_nonneg","proof":["not a >= 0"]}
{"goal":"partial[Real](a, n) * b = b * partial[Real](a, n)","proof":["partial[Real](a, n) * b = b * partial[Real](a, n)"]}
{"goal":"b * partial[Real](a, n) = partial[Real](mul_fn[Nat, Real](b, a), n)","proof":[]}
{"goal":"partial[Real](mul_fn[Nat, Real](b, a), n) = sum[Real](map[Nat, Real](n.range, mul_fn[Nat, Real](b, a)))","proof":["sum[Real](map[Nat, Real](n.range, mul_fn[Nat, Real](b, a))) = partial[Real](mul_fn[Nat, Real](b, a), n)"]}
{"goal":"partial[Real](a, n) * b = sum[Real](map[Nat, Real](n.range, mul_fn[Nat, Real](b, a)))","proof":[]}
{"goal":"partial_mul_scalar_right","proof":[]}
{"goal":"double_sum_expands","proof":["sum[Real](map[Nat, Real](n.range, row_sum(m, f))) = double_sum(n, m, f)"]}
{"goal":"m.suc.range = m.range + List.singleton(m)","proof":["m.suc != m.suc or m.range.append(m) = m.suc.range","m.range + List.singleton(m) = m.range.append(m)","m.range.append(m) != m.suc.range"]}
{"goal":"row_sum(m.suc, f, i) = row_sum(m, f, i) + f(i, m)","proof":["sum[Real](map[Nat, Real](m.range, f(i))) = row_sum(m, f, i)","sum[Real](map[Nat, Real](m.suc.range, f(i))) = row_sum(m.suc, f, i)","sum[Real](map[Nat, Real](m.range, f(i))) + f(i, m) = sum[Real](map[Nat, Real](m.range, f(i)).append(f(i, m)))","map[Nat, Real](List.singleton(m), f(i)) = List.singleton(f(i, m))","map[Nat, Real](m.range, f(i)) + List.singleton(f(i, m)) = map[Nat, Real](m.range, f(i)).append(f(i, m))"]}
{"goal":"sum[Real](map[Nat, Real](n.range, row_sum(m, f))) + sum[Real](map[Nat, Real](n.range, col_val(f, m))) = sum[Real](map[Nat, Real](n.range, add_fn[Nat, Real](row_sum(m, f), col_val(f, m))))","proof":[]}
{"goal":"add_fn[Nat, Real](row_sum(m, f), col_val(f, m))(i) = row_sum(m, f, i) + col_val(f, m, i)","proof":["row_sum(m, f, i) + col_val(f, m, i) = add_fn[Nat, Real](row_sum(m, f), col_val(f, m), i)"]}
{"goal":"col_val(f, m, i) = f(i, m)","proof":["col_val(f, m, i) = f(i, m)"]}
{"goal":"add_fn[Nat, Real](row_sum(m, f), col_val(f, m))(i) = row_sum(m, f, i) + f(i, m)","proof":["row_sum(m, f, i) + col_val(f, m, i) != add_fn[Nat, Real](row_sum(m, f), col_val(f, m), i)"]}
{"goal":"add_fn[Nat, Real](row_sum(m, f), col_val(f, m))(i) = row_sum(m.suc, f, i)","proof":["row_sum(m, f, i) + f(i, m) = row_sum(m.suc, f, i)","add_fn[Nat, Real](row_sum(m, f), col_val(f, m), i) != row_sum(m, f, i) + f(i, m)"]}
{"goal":"sum[Real](map[Nat, Real](n.range, add_fn[Nat, Real](row_sum(m, f), col_val(f, m)))) = sum[Real](map[Nat, Real](n.range, row_sum(m.suc, f)))","proof":["let s0: (Nat -> Real, Nat -> Real, Nat) -> Nat satisfy { forall(x0: Nat -> Real, x1: Nat -> Real, x2: Nat) { s0(x0, x1, x2) < x2 or partial[Real](x0, x2) = partial[Real](x1, x2) } and forall(x3: Nat -> Real, x4: Nat -> Real, x5: Nat) { x3(s0(x3, x4, x5)) != x4(s0(x3, x4, x5)) or partial[Real](x3, x5) = partial[Real](x4, x5) } }","add_fn[Nat, Real](row_sum(m, f), col_val(f, m), s0(add_fn[Nat, Real](row_sum(m, f), col_val(f, m)), row_sum(m.suc, f), n)) = row_sum(m.suc, f, s0(add_fn[Nat, Real](row_sum(m, f), col_val(f, m)), row_sum(m.suc, f), n))","add_fn[Nat, Real](row_sum(m, f), col_val(f, m), s0(add_fn[Nat, Real](row_sum(m, f), col_val(f, m)), row_sum(m.suc, f), n)) != row_sum(m.suc, f, s0(add_fn[Nat, Real](row_sum(m, f), col_val(f, m)), row_sum(m.suc, f), n)) or partial[Real](add_fn[Nat, Real](row_sum(m, f), col_val(f, m)), n) = partial[Real](row_sum(m.suc, f), n)","sum[Real](map[Nat, Real](n.range, add_fn[Nat, Real](row_sum(m, f), col_val(f, m)))) = partial[Real](add_fn[Nat, Real](row_sum(m, f), col_val(f, m)), n)","sum[Real](map[Nat, Real](n.range, row_sum(m.suc, f))) = partial[Real](row_sum(m.suc, f), n)","sum[Real](map[Nat, Real](n.range, add_fn[Nat, Real](row_sum(m, f), col_val(f, m)))) != partial[Real](row_sum(m.suc, f), n)","partial[Real](add_fn[Nat, Real](row_sum(m, f), col_val(f, m)), n) != partial[Real](row_sum(m.suc, f), n)"]}
{"goal":"double_sum(n, m.suc, f) = double_sum(n, m, f) + sum[Real](map[Nat, Real](n.range, col_val(f, m)))","proof":["sum[Real](map[Nat, Real](n.range, row_sum(m, f))) = double_sum(n, m, f)","sum[Real](map[Nat, Real](n.range, row_sum(m.suc, f))) = double_sum(n, m.suc, f)"]}
{"goal":"double_sum_col_expand","proof":[]}
{"goal":"double_sum(n.suc, m, f) = sum[Real](map[Nat, Real](n.suc.range, row_sum(m, f)))","proof":["sum[Real](map[Nat, Real](n.suc.range, row_sum(m, f))) = double_sum(n.suc, m, f)"]}
{"goal":"double_sum(n, m, f) = sum[Real](map[Nat, Real](n.range, row_sum(m, f)))","proof":["sum[Real](map[Nat, Real](n.range, row_sum(m, f))) = double_sum(n, m, f)"]}
{"goal":"n.suc.range = n.range + List.singleton(n)","proof":["n.suc != n.suc or n.range.append(n) = n.suc.range","n.range + List.singleton(n) = n.range.append(n)","n.range.append(n) != n.suc.range"]}
{"goal":"map[Nat, Real](n.suc.range, row_sum(m, f)) = map[Nat, Real](n.range, row_sum(m, f)) + map[Nat, Real](List.singleton(n), row_sum(m, f))","proof":["map[Nat, Real](n.range, row_sum(m, f)) + map[Nat, Real](List.singleton(n), row_sum(m, f)) != map[Nat, Real](n.range + List.singleton(n), row_sum(m, f))"]}
{"goal":"map[Nat, Real](List.singleton(n), row_sum(m, f)) = List.singleton(row_sum(m, f, n))","proof":["map[Nat, Real](List.singleton(n), row_sum(m, f)) = List.singleton(row_sum(m, f, n))"]}
{"goal":"row_sum(m, f, n) = sum[Real](map[Nat, Real](m.range, f(n)))","proof":["sum[Real](map[Nat, Real](m.range, f(n))) = row_sum(m, f, n)"]}
{"goal":"f(n)(j) = f(n, j)","proof":[]}
{"goal":"row_val(f, n)(j) = f(n, j)","proof":["row_val(f, n, j) = f(n, j)"]}
{"goal":"f(n) = row_val(f, n)","proof":["let s0: Nat satisfy { row_val(f, n, s0) != f(n, s0) }","row_val(f, n, s0) = f(n, s0)"]}
{"goal":"row_sum(m, f, n) = sum[Real](map[Nat, Real](m.range, row_val(f, n)))","proof":["sum[Real](map[Nat, Real](m.range, f(n))) != row_sum(m, f, n)"]}
{"goal":"map[Nat, Real](n.suc.range, row_sum(m, f)) = map[Nat, Real](n.range, row_sum(m, f)) + List.singleton(sum[Real](map[Nat, Real](m.range, row_val(f, n))))","proof":[]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, row_sum(m, f))) = sum[Real](map[Nat, Real](n.range, row_sum(m, f))) + sum[Real](map[Nat, Real](m.range, row_val(f, n)))","proof":["partial[Real](row_sum(m, f), n) + row_sum(m, f, n) = partial[Real](row_sum(m, f), n.suc)","sum[Real](map[Nat, Real](n.range, row_sum(m, f))) = partial[Real](row_sum(m, f), n)","sum[Real](map[Nat, Real](n.suc.range, row_sum(m, f))) = partial[Real](row_sum(m, f), n.suc)"]}
{"goal":"double_sum(n.suc, m, f) = double_sum(n, m, f) + sum[Real](map[Nat, Real](m.range, row_val(f, n)))","proof":[]}
{"goal":"double_sum_row_expand","proof":[]}
{"goal":"sum[Real](map[Nat, Real](n.range, b)) = partial[Real](b, n)","proof":["sum[Real](map[Nat, Real](n.range, b)) = partial[Real](b, n)"]}
{"goal":"c * sum[Real](map[Nat, Real](n.range, b)) = c * partial[Real](b, n)","proof":["sum[Real](map[Nat, Real](n.range, b)) != partial[Real](b, n)"]}
{"goal":"partial[Real](b, n) * c = sum[Real](map[Nat, Real](n.range, mul_fn[Nat, Real](c, b)))","proof":[]}
{"goal":"c * partial[Real](b, n) = partial[Real](b, n) * c","proof":["c * partial[Real](b, n) = partial[Real](mul_fn[Nat, Real](c, b), n)","partial[Real](b, n) * c != partial[Real](mul_fn[Nat, Real](c, b), n)","sum[Real](map[Nat, Real](n.range, mul_fn[Nat, Real](c, b))) = partial[Real](mul_fn[Nat, Real](c, b), n)"]}
{"goal":"c * partial[Real](b, n) = sum[Real](map[Nat, Real](n.range, mul_fn[Nat, Real](c, b)))","proof":["sum[Real](map[Nat, Real](n.range, mul_fn[Nat, Real](c, b))) != partial[Real](b, n) * c"]}
{"goal":"c * sum[Real](map[Nat, Real](n.range, b)) = sum[Real](map[Nat, Real](n.range, mul_fn[Nat, Real](c, b)))","proof":["sum[Real](map[Nat, Real](n.range, mul_fn[Nat, Real](c, b))) != c * partial[Real](b, n)"]}
{"goal":"scalar_mul_sum","proof":[]}
{"goal":"partial[Real](a, Nat.0) = 0","proof":[]}
{"goal":"partial[Real](b, Nat.0) = 0","proof":[]}
{"goal":"partial[Real](a, Nat.0) * partial[Real](b, Nat.0) = 0 * 0","proof":[]}
{"goal":"0 * 0 = 0","proof":["0 * partial[Real](b, Nat.0) = partial[Real](mul_fn[Nat, Real](0, b), Nat.0)","0 * partial[Real](b, Nat.0) != 0","partial[Real](mul_fn[Nat, Real](0, b), Nat.0) = 0"]}
{"goal":"partial[Real](a, Nat.0) * partial[Real](b, Nat.0) = 0","proof":["partial[Real](a, Nat.0) * partial[Real](b, Nat.0) != 0 * 0"]}
{"goal":"Nat.0.range = List.nil[Nat]","proof":["Nat.0 != Nat.0 or Nat.0.range = List.nil[Nat]"]}
{"goal":"double_sum(Nat.0, Nat.0, prod_fn(a, b)) = sum[Real](map[Nat, Real](Nat.0.range, row_sum(Nat.0, prod_fn(a, b))))","proof":[]}
{"goal":"map[Nat, Real](Nat.0.range, row_sum(Nat.0, prod_fn(a, b))) = List.nil[Real]","proof":["Nat.0.range != List.nil[Nat] or map[Nat, Real](Nat.0.range, row_sum(Nat.0, prod_fn(a, b))) = List.nil[Real]"]}
{"goal":"sum[Real](List.nil[Real]) = 0","proof":["List.nil[Real] != List.nil[Real] or sum[Real](List.nil[Real]) = 0"]}
{"goal":"double_sum(Nat.0, Nat.0, prod_fn(a, b)) = 0","proof":[]}
{"goal":"partial[Real](a, Nat.0) * partial[Real](b, Nat.0) = double_sum(Nat.0, Nat.0, prod_fn(a, b))","proof":[]}
{"goal":"p(Nat.0)","proof":["partial[Real](a, Nat.0) * partial[Real](b, Nat.0) != double_sum(Nat.0, Nat.0, prod_fn(a, b)) or p(Nat.0)"]}
{"goal":"p(m)","proof":[]}
{"goal":"partial[Real](a, m) * partial[Real](b, m) = double_sum(m, m, prod_fn(a, b))","proof":["not p(m) or partial[Real](a, m) * partial[Real](b, m) = double_sum(m, m, prod_fn(a, b))"]}
{"goal":"m.suc.range = m.range + List.singleton(m)","proof":["m.suc != m.suc or m.range.append(m) = m.suc.range","m.range + List.singleton(m) = m.range.append(m)","m.range.append(m) != m.suc.range"]}
{"goal":"map[Nat, Real](m.suc.range, a) = map[Nat, Real](m.range, a) + List.singleton(a(m))","proof":["map[Nat, Real](List.singleton(m), a) = List.singleton(a(m))"]}
{"goal":"sum[Real](map[Nat, Real](m.suc.range, a)) = sum[Real](map[Nat, Real](m.range, a)) + a(m)","proof":["partial[Real](a, m) + a(m) = partial[Real](a, m.suc)","sum[Real](map[Nat, Real](m.range, a)) = partial[Real](a, m)","sum[Real](map[Nat, Real](m.suc.range, a)) = partial[Real](a, m.suc)","sum[Real](map[Nat, Real](m.range, a)) + a(m) != partial[Real](a, m.suc)"]}
{"goal":"partial[Real](a, m.suc) = partial[Real](a, m) + a(m)","proof":["partial[Real](a, m) + a(m) = partial[Real](a, m.suc)"]}
{"goal":"map[Nat, Real](m.suc.range, b) = map[Nat, Real](m.range, b) + List.singleton(b(m))","proof":["map[Nat, Real](List.singleton(m), b) = List.singleton(b(m))"]}
{"goal":"sum[Real](map[Nat, Real](m.suc.range, b)) = sum[Real](map[Nat, Real](m.range, b)) + b(m)","proof":["partial[Real](b, m) + b(m) = partial[Real](b, m.suc)","sum[Real](map[Nat, Real](m.range, b)) = partial[Real](b, m)","sum[Real](map[Nat, Real](m.suc.range, b)) = partial[Real](b, m.suc)","sum[Real](map[Nat, Real](m.range, b)) + b(m) != partial[Real](b, m.suc)"]}
{"goal":"partial[Real](b, m.suc) = partial[Real](b, m) + b(m)","proof":["partial[Real](b, m) + b(m) = partial[Real](b, m.suc)"]}
{"goal":"partial[Real](a, m.suc) * partial[Real](b, m.suc) = (partial[Real](a, m) + a(m)) * (partial[Real](b, m) + b(m))","proof":[]}
{"goal":"(partial[Real](a, m) + a(m)) * (partial[Real](b, m) + b(m)) = partial[Real](a, m) * partial[Real](b, m) + partial[Real](a, m) * b(m) + a(m) * partial[Real](b, m) + a(m) * b(m)","proof":["partial[Real](a, m) * (partial[Real](b, m) + b(m)) + a(m) * (partial[Real](b, m) + b(m)) = (partial[Real](a, m) + a(m)) * (partial[Real](b, m) + b(m))","a(m) * partial[Real](b, m) + a(m) * b(m) = a(m) * (partial[Real](b, m) + b(m))","partial[Real](a, m) * partial[Real](b, m) + partial[Real](a, m) * b(m) = partial[Real](a, m) * (partial[Real](b, m) + b(m))","partial[Real](a, m) * partial[Real](b, m) + partial[Real](a, m) * b(m) + (a(m) * partial[Real](b, m) + a(m) * b(m)) = partial[Real](a, m) * partial[Real](b, m) + partial[Real](a, m) * b(m) + a(m) * partial[Real](b, m) + a(m) * b(m)"]}
{"goal":"partial[Real](a, m.suc) * partial[Real](b, m.suc) = double_sum(m, m, prod_fn(a, b)) + partial[Real](a, m) * b(m) + a(m) * partial[Real](b, m) + a(m) * b(m)","proof":[]}
{"goal":"b(m) * sum[Real](map[Nat, Real](m.range, a)) = sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](b(m), a)))","proof":[]}
{"goal":"mul_fn[Nat, Real](b(m), a)(i) = b(m) * a(i)","proof":["b(m) * a(i) = mul_fn(b(m), a, i)"]}
{"goal":"b(m) * a(i) = a(i) * b(m)","proof":["b(m) * a(i) = a(i) * b(m)"]}
{"goal":"sum[Real](map[Nat, Real](m.range, a)) * b(m) = b(m) * sum[Real](map[Nat, Real](m.range, a))","proof":["sum[Real](map[Nat, Real](m.range, a)) * b(m) != sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](b(m), a)))","sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](b(m), a))) = partial[Real](a, m) * b(m)","sum[Real](map[Nat, Real](m.range, a)) = partial[Real](a, m)"]}
{"goal":"sum[Real](map[Nat, Real](m.range, a)) * b(m) = sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](b(m), a)))","proof":["b(m) * sum[Real](map[Nat, Real](m.range, a)) != sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](b(m), a)))"]}
{"goal":"partial[Real](a, m) * b(m) = sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](b(m), a)))","proof":["sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](b(m), a))) = partial[Real](a, m) * b(m)"]}
{"goal":"a(m) * sum[Real](map[Nat, Real](m.range, b)) = sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](a(m), b)))","proof":[]}
{"goal":"a(m) * partial[Real](b, m) = sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](a(m), b)))","proof":["a(m) * partial[Real](b, m) = partial[Real](mul_fn[Nat, Real](a(m), b), m)","sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](a(m), b))) != partial[Real](mul_fn[Nat, Real](a(m), b), m)","sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](a(m), b))) = partial[Real](mul_fn[Nat, Real](a(m), b), m)"]}
{"goal":"double_sum(m.suc, m.suc, prod_fn(a, b)) = double_sum(m, m.suc, prod_fn(a, b)) + sum[Real](map[Nat, Real](m.suc.range, row_val(prod_fn(a, b), m)))","proof":[]}
{"goal":"double_sum(m, m.suc, prod_fn(a, b)) = double_sum(m, m, prod_fn(a, b)) + sum[Real](map[Nat, Real](m.range, col_val(prod_fn(a, b), m)))","proof":[]}
{"goal":"double_sum(m.suc, m.suc, prod_fn(a, b)) = double_sum(m, m, prod_fn(a, b)) + sum[Real](map[Nat, Real](m.range, col_val(prod_fn(a, b), m))) + sum[Real](map[Nat, Real](m.suc.range, row_val(prod_fn(a, b), m)))","proof":["double_sum(m, m.suc, prod_fn(a, b)) + sum[Real](map[Nat, Real](m.suc.range, row_val(prod_fn(a, b), m))) != double_sum(m.suc, m.suc, prod_fn(a, b))"]}
{"goal":"m.suc.range = m.range + List.singleton(m)","proof":[]}
{"goal":"map[Nat, Real](m.suc.range, row_val(prod_fn(a, b), m)) = map[Nat, Real](m.range, row_val(prod_fn(a, b), m)) + List.singleton(row_val(prod_fn(a, b), m)(m))","proof":["map[Nat, Real](List.singleton(m), row_val(prod_fn(a, b), m)) = List.singleton(row_val(prod_fn(a, b), m, m))"]}
{"goal":"sum[Real](map[Nat, Real](m.suc.range, row_val(prod_fn(a, b), m))) = sum[Real](map[Nat, Real](m.range, row_val(prod_fn(a, b), m))) + row_val(prod_fn(a, b), m)(m)","proof":["partial[Real](row_val(prod_fn(a, b), m), m) + row_val(prod_fn(a, b), m, m) = partial[Real](row_val(prod_fn(a, b), m), m.suc)","sum[Real](map[Nat, Real](m.range, row_val(prod_fn(a, b), m))) = partial[Real](row_val(prod_fn(a, b), m), m)","sum[Real](map[Nat, Real](m.suc.range, row_val(prod_fn(a, b), m))) = partial[Real](row_val(prod_fn(a, b), m), m.suc)"]}
{"goal":"row_val(prod_fn(a, b), m)(m) = prod_fn(a, b)(m, m)","proof":["row_val(prod_fn(a, b), m, m) = prod_fn(a, b, m, m)"]}
{"goal":"prod_fn(a, b)(m, m) = a(m) * b(m)","proof":["prod_fn(a, b, m, m) = a(m) * b(m)"]}
{"goal":"double_sum(m.suc, m.suc, prod_fn(a, b)) = double_sum(m, m, prod_fn(a, b)) + sum[Real](map[Nat, Real](m.range, col_val(prod_fn(a, b), m))) + sum[Real](map[Nat, Real](m.range, row_val(prod_fn(a, b), m))) + a(m) * b(m)","proof":["double_sum(m, m, prod_fn(a, b)) + sum[Real](map[Nat, Real](m.range, col_val(prod_fn(a, b), m))) + (sum[Real](map[Nat, Real](m.range, row_val(prod_fn(a, b), m))) + a(m) * b(m)) = double_sum(m, m, prod_fn(a, b)) + sum[Real](map[Nat, Real](m.range, col_val(prod_fn(a, b), m))) + sum[Real](map[Nat, Real](m.range, row_val(prod_fn(a, b), m))) + a(m) * b(m)"]}
{"goal":"col_val(prod_fn(a, b), m)(idx) = prod_fn(a, b)(idx, m)","proof":["col_val(prod_fn(a, b), m, idx) = prod_fn(a, b, idx, m)"]}
{"goal":"prod_fn(a, b)(idx, m) = a(idx) * b(m)","proof":["prod_fn(a, b, idx, m) = a(idx) * b(m)"]}
{"goal":"mul_fn[Nat, Real](b(m), a)(idx) = b(m) * a(idx)","proof":["b(m) * a(idx) = mul_fn(b(m), a, idx)"]}
{"goal":"b(m) * a(idx) = a(idx) * b(m)","proof":["b(m) * a(idx) = a(idx) * b(m)"]}
{"goal":"col_val(prod_fn(a, b), m)(idx) = mul_fn[Nat, Real](b(m), a)(idx)","proof":[]}
{"goal":"col_val(prod_fn(a, b), m) = mul_fn[Nat, Real](b(m), a)","proof":["let s0: Nat satisfy { col_val(prod_fn(a, b), m, s0) != mul_fn(b(m), a, s0) }","col_val(prod_fn(a, b), m, s0) = mul_fn(b(m), a, s0)"]}
{"goal":"sum[Real](map[Nat, Real](m.range, col_val(prod_fn(a, b), m))) = sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](b(m), a)))","proof":[]}
{"goal":"row_val(prod_fn(a, b), m)(idx) = prod_fn(a, b)(m, idx)","proof":["row_val(prod_fn(a, b), m, idx) = prod_fn(a, b, m, idx)"]}
{"goal":"prod_fn(a, b)(m, idx) = a(m) * b(idx)","proof":["prod_fn(a, b, m, idx) = a(m) * b(idx)"]}
{"goal":"mul_fn[Nat, Real](a(m), b)(idx) = a(m) * b(idx)","proof":["a(m) * b(idx) = mul_fn(a(m), b, idx)"]}
{"goal":"row_val(prod_fn(a, b), m)(idx) = mul_fn[Nat, Real](a(m), b)(idx)","proof":[]}
{"goal":"row_val(prod_fn(a, b), m) = mul_fn[Nat, Real](a(m), b)","proof":["let s0: Nat satisfy { row_val(prod_fn(a, b), m, s0) != mul_fn(a(m), b, s0) }","row_val(prod_fn(a, b), m, s0) = mul_fn(a(m), b, s0)"]}
{"goal":"sum[Real](map[Nat, Real](m.range, row_val(prod_fn(a, b), m))) = sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](a(m), b)))","proof":[]}
{"goal":"double_sum(m.suc, m.suc, prod_fn(a, b)) = double_sum(m, m, prod_fn(a, b)) + sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](b(m), a))) + sum[Real](map[Nat, Real](m.range, mul_fn[Nat, Real](a(m), b))) + a(m) * b(m)","proof":[]}
{"goal":"double_sum(m.suc, m.suc, prod_fn(a, b)) = double_sum(m, m, prod_fn(a, b)) + partial[Real](a, m) * b(m) + a(m) * partial[Real](b, m) + a(m) * b(m)","proof":[]}
{"goal":"partial[Real](a, m.suc) * partial[Real](b, m.suc) = double_sum(m.suc, m.suc, prod_fn(a, b))","proof":["double_sum(m, m, prod_fn(a, b)) + partial[Real](a, m) * b(m) + a(m) * partial[Real](b, m) + a(m) * b(m) != partial[Real](a, m.suc) * partial[Real](b, m.suc)"]}
{"goal":"p(m.suc)","proof":["partial[Real](a, m.suc) * partial[Real](b, m.suc) != double_sum(m.suc, m.suc, prod_fn(a, b)) or p(m.suc)","partial[Real](a, m.suc) * partial[Real](b, m.suc) != double_sum(m.suc, m.suc, prod_fn(a, b))"]}
{"goal":"p(n)","proof":["let s0: (Nat -> Bool) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not p(s0(p)) or p(s0(p).suc)","not p(s0(p).suc) or not p(Nat.0) or p(n)","not p(s0(p).suc)","not p(Nat.0) or p(s0(p)) or p(n)","not p(s0(p))","p(s0(p))"]}
{"goal":"partial_product_as_double_sum","proof":["not p(n) or partial[Real](a, n) * partial[Real](b, n) = double_sum(n, n, prod_fn(a, b))"]}
{"goal":"not b.is_negative","proof":["0 <= b = b >= 0","not 0 <= b or not b.is_negative","0 <= b","not 0 <= b"]}
{"goal":"a * b <= c * b","proof":["b.is_negative"]}
{"goal":"not c.is_negative","proof":["0 <= c = c >= 0","not 0 <= c or not c.is_negative","0 <= c","not 0 <= c"]}
{"goal":"c * b <= c * d","proof":["c.is_negative"]}
{"goal":"a * b <= c * d","proof":["not lib(util).is_transitive[Real](Real.lte) or not a * b <= b * c or not b * c <= c * d or a * b <= c * d","c * b = b * c","a * b <= b * c","b * c <= c * d","not b * c <= c * d or not a * b <= b * c"]}
{"goal":"mul_le_mul_nonneg","proof":["not a >= 0"]}
{"goal":"is_increasing(partial[Real](a))","proof":["not is_lower_bound(a, 0) or is_increasing(partial[Real](a))"]}
{"goal":"partial[Real](a)(n) <= partial[Real](a)(n.suc)","proof":["not is_increasing(partial[Real](a)) or partial[Real](a, n) <= partial[Real](a, n.suc)","partial[Real](a, n) <= partial[Real](a, n.suc)"]}
{"goal":"partial[Real](a, n) = partial[Real](a)(n)","proof":[]}
{"goal":"partial[Real](a, n.suc) = partial[Real](a)(n.suc)","proof":[]}
{"goal":"partial[Real](a, n) <= partial[Real](a, n.suc)","proof":[]}
{"goal":"partial_monotone","proof":[]}
{"goal":"x = x + 0","proof":["x + 0 = 0 + x","0 + x != x","0 + x - x != 0 or 0 + x = x","0 + x - x = 0"]}
{"goal":"x + 0 <= x + y","proof":["not 0 <= y or x + 0 <= x + y","not 0 <= y","0 <= y = y >= 0"]}
{"goal":"x <= x + y","proof":["not x + 0 <= x + y"]}
{"goal":"add_nonneg_preserves_lte","proof":[]}
{"goal":"double_sum(n.suc, m, f) = double_sum(n, m, f) + sum[Real](map[Nat, Real](m.range, row_val(f, n)))","proof":[]}
{"goal":"row_val(f, n)(j) = f(n, j)","proof":["row_val(f, n, j) = f(n, j)"]}
{"goal":"f(n, j) >= 0","proof":["f(n, j) >= 0"]}
{"goal":"row_val(f, n)(j) >= 0","proof":["f(n, j) >= 0"]}
{"goal":"is_lower_bound(row_val(f, n), 0)","proof":["let s0: (Nat -> Real, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not is_lower_bound(x0, x1) or x1 <= x0(x2) } and forall(x3: Real, x4: Nat -> Real) { not x3 <= x4(s0(x4, x3)) or is_lower_bound(x4, x3) } }","row_val(f, n, s0(row_val(f, n), 0)) >= 0","not 0 <= row_val(f, n, s0(row_val(f, n), 0)) or is_lower_bound(row_val(f, n), 0)","0 <= row_val(f, n, s0(row_val(f, n), 0)) = row_val(f, n, s0(row_val(f, n), 0)) >= 0","not row_val(f, n, s0(row_val(f, n), 0)) >= 0 or 0 <= row_val(f, n, s0(row_val(f, n), 0))","not 0 <= row_val(f, n, s0(row_val(f, n), 0))"]}
{"goal":"is_increasing(partial[Real](row_val(f, n)))","proof":["not is_lower_bound(row_val(f, n), 0) or is_increasing(partial[Real](row_val(f, n)))"]}
{"goal":"partial[Real](row_val(f, n), Nat.0) = 0","proof":["partial[Real](row_val(f, n), Nat.0) = 0"]}
{"goal":"Nat.0 <= m","proof":["Nat.0 + m != m or Nat.0 <= m","Nat.0 + m != m","Nat.0 + m = m"]}
{"goal":"partial[Real](row_val(f, n), Nat.0) <= partial[Real](row_val(f, n), m)","proof":["not is_increasing(partial[Real](row_val(f, n)))"]}
{"goal":"0 <= partial[Real](row_val(f, n), m)","proof":["not partial[Real](row_val(f, n), Nat.0) <= partial[Real](row_val(f, n), m)"]}
{"goal":"partial[Real](row_val(f, n), m) = sum[Real](map[Nat, Real](m.range, row_val(f, n)))","proof":["sum[Real](map[Nat, Real](m.range, row_val(f, n))) = partial[Real](row_val(f, n), m)"]}
{"goal":"sum[Real](map[Nat, Real](m.range, row_val(f, n))) >= 0","proof":["not partial[Real](row_val(f, n), m) >= 0","not is_lower_bound(row_val(f, n), 0) or partial[Real](row_val(f, n), m) >= 0"]}
{"goal":"double_sum(n, m, f) <= double_sum(n, m, f) + sum[Real](map[Nat, Real](m.range, row_val(f, n)))","proof":[]}
{"goal":"double_sum(n, m, f) <= double_sum(n.suc, m, f)","proof":[]}
{"goal":"double_sum_row_monotone","proof":["let (s0: Nat, s1: Nat) satisfy { not f(s0, s1) >= 0 or double_sum(n, m, f) <= double_sum(n.suc, m, f) }","f(s0, s1) >= 0"]}
{"goal":"double_sum(n, m.suc, f) = double_sum(n, m, f) + sum[Real](map[Nat, Real](n.range, col_val(f, m)))","proof":[]}
{"goal":"col_val(f, m)(i) = f(i, m)","proof":["col_val(f, m, i) = f(i, m)"]}
{"goal":"f(i, m) >= 0","proof":["f(i, m) >= 0"]}
{"goal":"col_val(f, m)(i) >= 0","proof":["f(i, m) >= 0"]}
{"goal":"is_lower_bound(col_val(f, m), 0)","proof":["let s0: (Nat -> Real, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not is_lower_bound(x0, x1) or x1 <= x0(x2) } and forall(x3: Real, x4: Nat -> Real) { not x3 <= x4(s0(x4, x3)) or is_lower_bound(x4, x3) } }","col_val(f, m, s0(col_val(f, m), 0)) >= 0","not 0 <= col_val(f, m, s0(col_val(f, m), 0)) or is_lower_bound(col_val(f, m), 0)","0 <= col_val(f, m, s0(col_val(f, m), 0)) = col_val(f, m, s0(col_val(f, m), 0)) >= 0","not col_val(f, m, s0(col_val(f, m), 0)) >= 0 or 0 <= col_val(f, m, s0(col_val(f, m), 0))","not 0 <= col_val(f, m, s0(col_val(f, m), 0))"]}
{"goal":"is_increasing(partial[Real](col_val(f, m)))","proof":["not is_lower_bound(col_val(f, m), 0) or is_increasing(partial[Real](col_val(f, m)))"]}
{"goal":"partial[Real](col_val(f, m), Nat.0) = 0","proof":["partial[Real](col_val(f, m), Nat.0) = 0"]}
{"goal":"Nat.0 <= n","proof":["Nat.0 + n != n or Nat.0 <= n","Nat.0 + n != n","Nat.0 + n = n"]}
{"goal":"partial[Real](col_val(f, m), Nat.0) <= partial[Real](col_val(f, m), n)","proof":["not is_increasing(partial[Real](col_val(f, m)))"]}
{"goal":"0 <= partial[Real](col_val(f, m), n)","proof":["not partial[Real](col_val(f, m), Nat.0) <= partial[Real](col_val(f, m), n)"]}
{"goal":"partial[Real](col_val(f, m), n) = sum[Real](map[Nat, Real](n.range, col_val(f, m)))","proof":["sum[Real](map[Nat, Real](n.range, col_val(f, m))) = partial[Real](col_val(f, m), n)"]}
{"goal":"sum[Real](map[Nat, Real](n.range, col_val(f, m))) >= 0","proof":["not partial[Real](col_val(f, m), n) >= 0","not is_lower_bound(col_val(f, m), 0) or partial[Real](col_val(f, m), n) >= 0"]}
{"goal":"double_sum(n, m, f) <= double_sum(n, m, f) + sum[Real](map[Nat, Real](n.range, col_val(f, m)))","proof":[]}
{"goal":"double_sum(n, m, f) <= double_sum(n, m.suc, f)","proof":[]}
{"goal":"double_sum_col_monotone","proof":["let (s0: Nat, s1: Nat) satisfy { not f(s0, s1) >= 0 or double_sum(n, m, f) <= double_sum(n, m.suc, f) }","f(s0, s1) >= 0"]}
{"goal":"cauchy_coefficient(a, b, m)(k) = a(k) * b(m - k)","proof":["a(k) * b(m - k) = cauchy_coefficient(a, b, m, k)"]}
{"goal":"cauchy_term_equals_prod","proof":[]}
{"goal":"cauchy_coefficient(a, b, m)(k) = a(k) * b(m - k)","proof":["a(k) * b(m - k) = cauchy_coefficient(a, b, m, k)"]}
{"goal":"a(k) >= 0","proof":["not is_lower_bound(a, 0) or 0 <= a(k)","0 <= a(k) = a(k) >= 0","not 0 <= a(k)"]}
{"goal":"b(m - k) >= 0","proof":["not is_lower_bound(b, 0) or 0 <= b(m - k)","0 <= b(m - k) = b(m - k) >= 0","not 0 <= b(m - k)"]}
{"goal":"a(k) * b(m - k) >= 0","proof":["not a(k) >= 0 or not b(m - k) >= 0 or a(k) * b(m - k) >= 0"]}
{"goal":"cauchy_coefficient(a, b, m)(k) >= 0","proof":[]}
{"goal":"cauchy_coefficient_nonneg","proof":["not is_lower_bound(a, 0)"]}
