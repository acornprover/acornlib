{"goal":"Nat.0.suc = Nat.1","proof":[]}
{"goal":"Nat.1.range = List.singleton(Nat.0)","proof":["Nat.0.until(Nat.0.suc) = Nat.0.upto(Nat.0)","Nat.0.upto(Nat.0) = Nat.0.suc.range","Nat.0.until(Nat.0.suc) = List.singleton(Nat.0)"]}
{"goal":"Nat.0 - Nat.0 = Nat.0","proof":["-lib(int.int_base).Int.from_nat(Nat.0) != lib(int.int_base).sub_nat(Nat.0, Nat.0) or Nat.0 + Nat.0 = Nat.0","Nat.0 + Nat.0 != Nat.0 or Nat.0 - Nat.0 = Nat.0","Nat.0 + Nat.0 != Nat.0","-lib(int.int_base).Int.from_nat(Nat.0) = lib(int.int_base).sub_nat(Nat.0, Nat.0)"]}
{"goal":"mapped = List.singleton(a(Nat.0) * b(Nat.0))","proof":["let s0: Nat -> Real satisfy { forall(x0: Nat) { a(x0) * b(Nat.0 - x0) = s0(x0) } }","a(Nat.0) * b(Nat.0 - Nat.0) = s0(Nat.0)","map[Nat, Real](List.singleton(Nat.0), s0) = List.singleton(s0(Nat.0))"]}
{"goal":"sum[Real](mapped) = a(Nat.0) * b(Nat.0)","proof":["let s0: Nat -> Real satisfy { forall(x0: Nat) { a(x0) * b(Nat.0 - x0) = s0(x0) } }","a(Nat.0) * b(Nat.0 - Nat.0) = s0(Nat.0)","sum[Real](map[Nat, Real](Nat.1.range, s0)) = partial[Real](s0, Nat.1)","partial[Real](s0, Nat.1) = s0(Nat.0)"]}
{"goal":"cauchy_product_zero","proof":["let s0: (Nat -> Real, Nat -> Real, Nat, Nat) -> Real satisfy { forall(x0: Nat -> Real, x1: Nat, x2: Nat -> Real, x3: Nat) { x0(x1) * x2(x3 - x1) = s0(x0, x2, x3, x1) } }","sum[Real](map[Nat, Real](Nat.0.suc.range, s0(a, b, Nat.0))) = cauchy_product(a, b, Nat.0)","a(Nat.0) * b(Nat.0 - Nat.0) = s0(a, b, Nat.0, Nat.0)","sum[Real](map[Nat, Real](Nat.0.suc.range, s0(a, b, Nat.0))) = partial[Real](s0(a, b, Nat.0), Nat.0.suc)","partial[Real](s0(a, b, Nat.0), Nat.1) = s0(a, b, Nat.0, Nat.0)"]}
