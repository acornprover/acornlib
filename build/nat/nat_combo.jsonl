{"goal":"choose_exists_left_zero","proof":["(0.factorial * x.factorial).divides((0 + x).factorial) = choose_exists(0, x)","1 * x.factorial = x.factorial","0 + x = x","x.factorial.divides(x.factorial)","not (0.factorial * x.factorial).divides((0 + x).factorial)","not (0.factorial * x.factorial).divides(x.factorial)","not (1 * x.factorial).divides(x.factorial)"]}
{"goal":"choose_exists_right_zero","proof":["(x.factorial * 0.factorial).divides((x + 0).factorial) = choose_exists(x, 0)","x.factorial * 1 = x.factorial","x + 0 = x","x.factorial.divides(x.factorial)","not (x.factorial * 0.factorial).divides((x + 0).factorial)","not (x.factorial * 0.factorial).divides(x.factorial)","not (x.factorial * 1).divides(x.factorial)"]}
{"goal":"choose_base","proof":["let (s0: Nat -> Nat, s1: Nat -> Nat) satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { not choose_hyp(x0) or x1 + x2 != x0 or choose_exists(x1, x2) } and forall(x3: Nat) { s0(x3) + s1(x3) = x3 or choose_hyp(x3) } and forall(x4: Nat) { not choose_exists(s0(x4), s1(x4)) or choose_hyp(x4) } }","s0(0) + s1(0) = 0 or choose_hyp(0)","not choose_exists(s0(0), s1(0)) or choose_hyp(0)","not choose_exists(s0(0), s1(0))","s0(0) + s1(0) != 0 or s0(0) = 0","s0(0) + s1(0) = 0","choose_exists(0, s1(0))","s0(0) = 0"]}
{"goal":"a - 1 + 1 = a","proof":["lib(nat.nat_base).bounded_sub(a, 1) + 1 = a or a < 1","not a < 0.suc or a < 0 or a = 0","a - 1 = lib(nat.nat_base).bounded_sub(a, 1)","lib(nat.nat_base).bounded_sub(a, 1) + 1 != a","a < 1","not a < 0","not a < 0.suc","a < 0.suc"]}
{"goal":"b - 1 + 1 = b","proof":["lib(nat.nat_base).bounded_sub(b, 1) + 1 = b or b < 1","not b < 0.suc or b < 0 or b = 0","b - 1 = lib(nat.nat_base).bounded_sub(b, 1)","lib(nat.nat_base).bounded_sub(b, 1) + 1 != b","b < 1","not b < 0","not b < 0.suc","b < 0.suc"]}
{"goal":"choose_hyp(a + (b - 1))","proof":["a + (b - 1 + 1) = a + (b - 1) + 1","a + (b - 1) + 1 - 1 = a + (b - 1)","not choose_hyp(a + (b - 1) + 1 - 1)","choose_hyp(a + (b - 1 + 1) - 1)"]}
{"goal":"choose_exists(a, b - 1)","proof":["not choose_hyp(a + (b - 1)) or a + (b - 1) != a + (b - 1) or choose_exists(a, b - 1)","a + (b - 1) != a + (b - 1) or not choose_hyp(a + (b - 1))"]}
{"goal":"a + b - 1 = a + (b - 1)","proof":["a + (b - 1 + 1) = a + (b - 1) + 1","a + (b - 1) + 1 != a + b or a + b - 1 = a + (b - 1)","a + (b - 1) + 1 != a + b"]}
{"goal":"(a.factorial * (b - 1).factorial).divides((a + b - 1).factorial)","proof":["not (a.factorial * (b - 1).factorial).divides((a + (b - 1)).factorial)","(a.factorial * (b - 1).factorial).divides((a + (b - 1)).factorial) = choose_exists(a, b - 1)"]}
{"goal":"(a.factorial * (b - 1).factorial * b.factorial).divides((a + b - 1).factorial * b.factorial)","proof":["not (a.factorial * (b - 1).factorial).divides((a + b - 1).factorial) or (a.factorial * (b - 1).factorial * b.factorial).divides((a + b - 1).factorial * b.factorial)"]}
{"goal":"(a.factorial * b.factorial * (b - 1).factorial).divides((a + b - 1).factorial * b.factorial)","proof":["(b - 1).factorial * (a.factorial * b.factorial) = (b - 1).factorial * a.factorial * b.factorial","b - 1 = lib(nat.nat_base).bounded_sub(b, 1)","a.factorial * (b - 1).factorial = (b - 1).factorial * a.factorial","lib(nat.nat_base).bounded_sub(b, 1).factorial * (a.factorial * b.factorial) = a.factorial * b.factorial * lib(nat.nat_base).bounded_sub(b, 1).factorial"]}
{"goal":"b.factorial = b * (b - 1).factorial","proof":["(b - 1).suc != b or b * (b - 1).factorial = b.factorial","(b - 1).suc != b","b - 1 + 1 = 1 + (b - 1)","1 + (b - 1) = b","1 + (b - 1) = (b - 1).suc"]}
{"goal":"(a.factorial * b.factorial * (b - 1).factorial).divides((a + b - 1).factorial * b * (b - 1).factorial)","proof":["(a + b - 1).factorial * (b * (b - 1).factorial) = (a + b - 1).factorial * b * (b - 1).factorial"]}
{"goal":"(a.factorial * b.factorial).divides((a + b - 1).factorial * b)","proof":["not (a.factorial * b.factorial * (b - 1).factorial).divides((a + b - 1).factorial * b * (b - 1).factorial) or (a.factorial * b.factorial).divides((a + b - 1).factorial * b) or (b - 1).factorial = 0","(b - 1).factorial = 0","not (a.factorial * b.factorial).divides((a + b - 1).factorial) or (a.factorial * b.factorial).divides((a + b - 1).factorial * b)","a.factorial * (b - 1).factorial = (b - 1).factorial * a.factorial","b.factorial * a.factorial = a.factorial * b.factorial","b * 0 = 0","not (a.factorial * b.factorial).divides((a + b - 1).factorial)"]}
{"goal":"choose_lemma","proof":[]}
{"goal":"choose_exists(a, b)","proof":["0 + b = b","not choose_exists(a, 0 + b)","not choose_exists(0, 0 + b)","choose_exists(0, 0 + b)"]}
{"goal":"choose_exists(a, b)","proof":["0 + a = a","not choose_exists(0 + a, b)","not choose_exists(0 + a, 0)","choose_exists(0 + a, 0)"]}
{"goal":"(a.factorial * b.factorial).divides((a + b - 1).factorial * b)","proof":["not choose_hyp(a + b - 1) or (a.factorial * b.factorial).divides((a + b - 1).factorial * b) or a = 0 or b = 0","x + 1 - 1 = x","not choose_hyp(a + b - 1)","x + 1 = x.suc","not choose_hyp(x.suc - 1)","choose_hyp(x + 1 - 1)"]}
{"goal":"(b.factorial * a.factorial).divides((b + a - 1).factorial * a)","proof":["not choose_hyp(b + a - 1) or (b.factorial * a.factorial).divides((b + a - 1).factorial * a) or b = 0 or a = 0","x + 1 - 1 = x","b + a = a + b","not choose_hyp(b + a - 1)","x + 1 = x.suc","not choose_hyp(a + b - 1)","not choose_hyp(x.suc - 1)","choose_hyp(x + 1 - 1)"]}
{"goal":"(a.factorial * b.factorial).divides((a + b - 1).factorial * a)","proof":["b + a - 1 = lib(nat.nat_base).bounded_sub(b + a, 1)","x.suc - 1 = lib(nat.nat_base).bounded_sub(x.suc, 1)","a * (b + a - 1).factorial = (b + a - 1).factorial * a","a * lib(nat.nat_base).bounded_sub(a + b, 1).factorial = lib(nat.nat_base).bounded_sub(a + b, 1).factorial * a","b.factorial * a.factorial = a.factorial * b.factorial","b + a = a + b"]}
{"goal":"(a + b - 1).factorial * b + (a + b - 1).factorial * a = (a + b).factorial","proof":["(a + b - 1).factorial * b + (a + b - 1).factorial * a = (a + b - 1).factorial * (b + a)","(a + b - 1).factorial * (b + a) != (a + b).factorial","(x.suc - 1).suc != a + b or (a + b) * (x.suc - 1).factorial = (a + b).factorial","x + 1 - 1 = x","(a + b - 1).factorial * (b + a) = (b + a) * (a + b - 1).factorial","b + a = a + b","x + 1 = x.suc","(b + a) * (a + b - 1).factorial != (a + b).factorial","(a + b) * (a + b - 1).factorial != (a + b).factorial","(x + 1 - 1).suc = a + b","(a + b) * (x.suc - 1).factorial != (a + b).factorial","(x.suc - 1).suc != a + b"]}
{"goal":"(a.factorial * b.factorial).divides((a + b).factorial)","proof":["not (a.factorial * b.factorial).divides((a + b - 1).factorial * b) or not (a.factorial * b.factorial).divides((a + b - 1).factorial * a) or (a.factorial * b.factorial).divides((a + b - 1).factorial * b + (a + b - 1).factorial * a)","not (a.factorial * b.factorial).divides((a + b - 1).factorial * b + (a + b - 1).factorial * a)"]}
{"goal":"choose_exists(a, b)","proof":["(a.factorial * b.factorial).divides((a + b).factorial) = choose_exists(a, b)"]}
{"goal":"choose_exists(a, b)","proof":["a = 0"]}
{"goal":"choose_hyp(x.suc)","proof":["let (s0: Nat -> Nat, s1: Nat -> Nat) satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { not choose_hyp(x0) or x1 + x2 != x0 or choose_exists(x1, x2) } and forall(x3: Nat) { s0(x3) + s1(x3) = x3 or choose_hyp(x3) } and forall(x4: Nat) { not choose_exists(s0(x4), s1(x4)) or choose_hyp(x4) } }","s0(x.suc) + s1(x.suc) != x.suc or choose_exists(s0(x.suc), s1(x.suc))","s0(x.suc) + s1(x.suc) = x.suc or choose_hyp(x.suc)","not choose_exists(s0(x.suc), s1(x.suc)) or choose_hyp(x.suc)","not choose_exists(s0(x.suc), s1(x.suc))","s0(x.suc) + s1(x.suc) = x.suc","s0(x.suc) + s1(x.suc) != x.suc"]}
{"goal":"choose_hyp(z1 + z2)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not choose_hyp(s0(choose_hyp)) or choose_hyp(s0(choose_hyp).suc)","not choose_hyp(s0(choose_hyp).suc) or not choose_hyp(0) or choose_hyp(z2 + z1)","not choose_hyp(0) or choose_hyp(s0(choose_hyp)) or choose_hyp(z1 + z2)","not choose_hyp(0) or choose_hyp(s0(choose_hyp))","z2 + z1 = z1 + z2","not choose_hyp(z2 + z1)","choose_hyp(s0(choose_hyp))","not choose_hyp(s0(choose_hyp).suc)","choose_hyp(s0(choose_hyp).suc)"]}
{"goal":"choose_exists_is_true","proof":["not choose_hyp(z1 + z2) or z1 + z2 != z1 + z2 or choose_exists(z1, z2)","z1 + z2 != z1 + z2 or not choose_hyp(z1 + z2)"]}
{"goal":"n - k + k = n","proof":["not k <= n or n - k + k = n"]}
{"goal":"(k.factorial * (n - k).factorial).divides(n.factorial)","proof":["((n - k).factorial * k.factorial).divides((n - k + k).factorial) = choose_exists(n - k, k)","k.factorial * (n - k).factorial = (n - k).factorial * k.factorial","choose_exists(n - k, k)","not (k.factorial * (n - k).factorial).divides((n - k + k).factorial)","not ((n - k).factorial * k.factorial).divides((n - k + k).factorial)"]}
{"goal":"exists(k0: Nat) { k.factorial * (n - k).factorial * k0 = n.factorial }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","k.factorial * (n - k).factorial * s0(k.factorial * (n - k).factorial, n.factorial) != n.factorial","not (k.factorial * (n - k).factorial).divides(n.factorial) or k.factorial * (n - k).factorial * s0(k.factorial * (n - k).factorial, n.factorial) = n.factorial"]}
{"goal":"choose_exists_sub_form","proof":["let s0: Nat satisfy { k.factorial * (n - k).factorial * s0 = n.factorial }","s0 * k.factorial * (n - k).factorial != n.factorial","s0 * (k.factorial * (n - k).factorial) = s0 * k.factorial * (n - k).factorial","s0 * (k.factorial * (n - k).factorial) = k.factorial * (n - k).factorial * s0","s0 * (k.factorial * (n - k).factorial) = n.factorial"]}
{"goal":"exists(k0: Nat) { if n < k { k0 = 0 } else { k0 * k.factorial * (n - k).factorial = n.factorial } }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 <= x1 or s0(x1, x0) * x0.factorial * (x1 - x0).factorial = x1.factorial } }","s0(n, k) * k.factorial * (n - k).factorial != n.factorial or n < k","not n < k or 0 != 0","not n < k","not k <= n or s0(n, k) * k.factorial * (n - k).factorial = n.factorial","k <= n or n < k","k <= n","s0(n, k) * k.factorial * (n - k).factorial != n.factorial"]}
{"goal":"factorial_nonzero(0)","proof":["0.factorial = 0 or factorial_nonzero(0)","0.factorial = 0","1 = 0","0.suc != 0"]}
{"goal":"factorial_nonzero(x.suc)","proof":["x.suc.factorial = 0 or factorial_nonzero(x.suc)","x.factorial != 0 or not factorial_nonzero(x)","x.suc.factorial = 0","x.suc * x.factorial = x.suc.factorial","x.suc * x.factorial != 0 or x.suc = 0 or x.factorial = 0","x.suc != 0","x.factorial != 0","x.suc * x.factorial = 0"]}
{"goal":"factorial_nonzero","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not factorial_nonzero(s0(factorial_nonzero)) or factorial_nonzero(s0(factorial_nonzero).suc)","n.factorial != 0 or not factorial_nonzero(n)","not factorial_nonzero(n)","not factorial_nonzero(s0(factorial_nonzero).suc) or not factorial_nonzero(0) or factorial_nonzero(n)","not factorial_nonzero(0) or factorial_nonzero(s0(factorial_nonzero)) or factorial_nonzero(n)","factorial_nonzero(s0(factorial_nonzero)) or factorial_nonzero(n)","factorial_nonzero(s0(factorial_nonzero))","not factorial_nonzero(s0(factorial_nonzero).suc)","factorial_nonzero(s0(factorial_nonzero).suc)"]}
{"goal":"not n < 0","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat) { s0(x2, x3) != 0 or not x2 < x3 } }","not n < 0 or n + s0(n, 0) = 0","s0(n, 0) != 0 or not n < 0","s0(n, 0) != 0","n + s0(n, 0) != 0 or s0(n, 0) = 0","n + s0(n, 0) = 0"]}
{"goal":"choose(n)(0) * 0.factorial * (n - 0).factorial = n.factorial","proof":["choose(n, 0) * 0.factorial * (n - 0).factorial = n.factorial or n < 0"]}
{"goal":"choose(n)(0) * 1 * n.factorial = n.factorial","proof":["(n - 0).factorial * (choose(n, 0) * 0.factorial) = choose(n, 0) * 0.factorial * (n - 0).factorial","choose(n, 0) * 0.factorial = 0.factorial * choose(n, 0)","choose(n, 0) * 1 = 1 * choose(n, 0)","n.factorial * (choose(n, 0) * 1) = choose(n, 0) * 1 * n.factorial","n - 0 = n"]}
{"goal":"choose(n)(0) * n.factorial = n.factorial","proof":["choose(n, 0) * (1 * n.factorial) = choose(n, 0) * 1 * n.factorial","1 * (choose(n, 0) * 1 * n.factorial) = choose(n, 0) * 1 * n.factorial"]}
{"goal":"n.factorial != 0","proof":["0 + n = n","(0 + n).factorial = 0","(0 + n).factorial != 0"]}
{"goal":"choose_zero","proof":["n.factorial * choose(n, 0) != n.factorial * 1 or n.factorial = 0 or choose(n, 0) = 1","choose(n, 0) * n.factorial = n.factorial * choose(n, 0)","n.factorial * 1 = n.factorial","n.factorial * choose(n, 0) = n.factorial","n.factorial * choose(n, 0) != n.factorial * 1 or n.factorial = 0","n.factorial * choose(n, 0) = n.factorial * 1","n.factorial * choose(n, 0) != n.factorial * 1"]}
{"goal":"not n < n","proof":["not n < n or n < n.suc","n < n.suc","not n < n or n.suc <= n","n.suc <= n","not n.suc <= n or not n < n.suc"]}
{"goal":"choose(n)(n) * n.factorial * (n - n).factorial = n.factorial","proof":["choose(n, n) * n.factorial * (n - n).factorial = n.factorial or n < n"]}
{"goal":"choose(n)(n) * n.factorial * 1 = n.factorial","proof":["(n - n).factorial * (choose(n, n) * n.factorial) = choose(n, n) * n.factorial * (n - n).factorial","choose(n, n) * n.factorial * 1 = 1 * (choose(n, n) * n.factorial)","n - n = 0"]}
{"goal":"choose(n)(n) * n.factorial = n.factorial","proof":["choose(n, n) * n.factorial * 1 = 1 * (choose(n, n) * n.factorial)","choose(n, n) * n.factorial = n.factorial * choose(n, n)","1 * (n.factorial * choose(n, n)) = n.factorial * choose(n, n)"]}
{"goal":"n.factorial != 0","proof":["0 + n = n","(0 + n).factorial = 0","(0 + n).factorial != 0"]}
{"goal":"choose_n","proof":["n.factorial * choose(n, n) != n.factorial * 1 or n.factorial = 0 or choose(n, n) = 1","choose(n, n) * n.factorial = n.factorial * choose(n, n)","n.factorial * 1 = n.factorial","n.factorial * choose(n, n) = n.factorial","n.factorial * choose(n, n) != n.factorial * 1 or n.factorial = 0","n.factorial * choose(n, n) = n.factorial * 1","n.factorial * choose(n, n) != n.factorial * 1"]}
{"goal":"not a + b < a","proof":["not a + b < a or lib(nat.nat_base).nat_mod(a + b, a) = a + b","lib(nat.nat_base).nat_mod(a + b, a) != a + b or a <= lib(nat.nat_base).nat_mod(a + b, a)","not a <= a + b or not a + b < a","not a <= a + b","lib(nat.nat_base).nat_mod(a + b, a) = a + b","a <= lib(nat.nat_base).nat_mod(a + b, a)","not a <= lib(nat.nat_base).nat_mod(a + b, a)"]}
{"goal":"choose(a + b)(a) * a.factorial * (a + b - a).factorial = (a + b).factorial","proof":["choose(a + b, a) * a.factorial * (a + b - a).factorial = (a + b).factorial or a + b < a"]}
{"goal":"(a + b - a).factorial = b.factorial","proof":["a + b - a != b","b + a - a = b","b + a = a + b"]}
{"goal":"choose_add","proof":["choose(a + b, a) * a.factorial * (a + b - a).factorial != (a + b).factorial"]}
{"goal":"a.factorial * b.factorial != 0","proof":["a.factorial * b.factorial != 0 or a.factorial = 0 or b.factorial = 0","b.factorial = 0 or a.factorial = 0","a.factorial != 0","b.factorial != 0"]}
{"goal":"choose(a + b)(a) * a.factorial * b.factorial = (a + b).factorial","proof":["choose(a + b, a) * a.factorial * b.factorial = (a + b).factorial"]}
{"goal":"choose(a + b)(a) * (a.factorial * b.factorial) = (a + b).factorial","proof":["choose(a + b, a) * a.factorial * b.factorial = (a + b).factorial","choose(a + b, a) * (a.factorial * b.factorial) = choose(a + b, a) * a.factorial * b.factorial"]}
{"goal":"choose(a + b)(b) * b.factorial * a.factorial = (a + b).factorial","proof":["choose(b + a, b) * b.factorial * a.factorial = (b + a).factorial","b + a = a + b","choose(a + b, b) * b.factorial * a.factorial != (b + a).factorial"]}
{"goal":"choose(a + b)(b) * (a.factorial * b.factorial) = (a + b).factorial","proof":["choose(a + b, b) * (b.factorial * a.factorial) = choose(a + b, b) * b.factorial * a.factorial","b.factorial * a.factorial = a.factorial * b.factorial"]}
{"goal":"choose_symm_add_form","proof":["choose(a + b, b) * (a.factorial * b.factorial) != choose(a + b, a) * (a.factorial * b.factorial) or a.factorial * b.factorial = 0 or choose(a + b, b) = choose(a + b, a)","choose(a + b, b) * (a.factorial * b.factorial) != choose(a + b, a) * (a.factorial * b.factorial) or a.factorial * b.factorial = 0","choose(a + b, b) * (a.factorial * b.factorial) = choose(a + b, a) * (a.factorial * b.factorial)","choose(a + b, b) * (a.factorial * b.factorial) != choose(a + b, a) * (a.factorial * b.factorial)"]}
{"goal":"exists(k0: Nat) { k + k0 = n }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 <= x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 + x3 != x4 or x2 <= x4 } }","k + s0(k, n) != n","not k <= n or k + s0(k, n) = n"]}
{"goal":"choose_symm_sub_form","proof":["choose(k + a, a) = choose(k + a, k)","a + k - k = a","a + k = k + a"]}
{"goal":"choose(n)(1) = 0","proof":["not n < 1 or choose(n, 1) = 0"]}
{"goal":"choose(n)(1) = n","proof":["n != 0","not n < 0.suc or n < 0 or n = 0","0 + 1 = 0.suc","0 + 1 = 1","not n < 0","not n < 0.suc"]}
{"goal":"choose(n)(1) * 1.factorial * (n - 1).factorial = n.factorial","proof":["choose(n, 1) * 1.factorial * (n - 1).factorial = n.factorial or n < 1"]}
{"goal":"choose(n)(1) * 1 * (n - 1).factorial = n.factorial","proof":[]}
{"goal":"choose(n)(1) * (n - 1).factorial = n.factorial","proof":["choose(n, 1) * (1 * (n - 1).factorial) = choose(n, 1) * 1 * (n - 1).factorial","n - 1 = lib(nat.nat_base).bounded_sub(n, 1)","1 * lib(nat.nat_base).bounded_sub(n, 1).factorial = lib(nat.nat_base).bounded_sub(n, 1).factorial"]}
{"goal":"n.factorial = n * (n - 1).factorial","proof":["lib(nat.nat_base).bounded_sub(n, 1) + 1 = n or n < 1","lib(nat.nat_base).bounded_sub(n, 1).suc != n or n * lib(nat.nat_base).bounded_sub(n, 1).factorial = n.factorial","n - 1 = lib(nat.nat_base).bounded_sub(n, 1)","n * lib(nat.nat_base).bounded_sub(n, 1).factorial != n.factorial","lib(nat.nat_base).bounded_sub(n, 1) + 1 = lib(nat.nat_base).bounded_sub(n, 1).suc","lib(nat.nat_base).bounded_sub(n, 1).suc != n","lib(nat.nat_base).bounded_sub(n, 1) + 1 = n","lib(nat.nat_base).bounded_sub(n, 1) + 1 != n"]}
{"goal":"choose(n)(1) * (n - 1).factorial = n * (n - 1).factorial","proof":["choose(n, 1) * (n - 1).factorial != n.factorial"]}
{"goal":"(n - 1).factorial != 0","proof":["n - 1 = lib(nat.nat_base).bounded_sub(n, 1)","lib(nat.nat_base).bounded_sub(n, 1).factorial = 0","lib(nat.nat_base).bounded_sub(n, 1).factorial != 0"]}
{"goal":"choose(n)(1) = n","proof":["choose(n, 1) * (n - 1).factorial != n * (n - 1).factorial or (n - 1).factorial = 0 or choose(n, 1) = n"]}
{"goal":"choose_one","proof":[]}
{"goal":"choose_out_of_bounds","proof":["not n < k or choose(n, k) = 0"]}
{"goal":"exists(k0: Nat) { k0.suc = k }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0).suc = x0 or 0 = x0 } }","s0(k).suc != k","not 0 < 0 or not 0 < 0","s0(k).suc = k or k = 0","k = 0","0 < 0"]}
{"goal":"k_pred + 1 = k","proof":["k_pred + 1 = 1 + k_pred","1 + k_pred != k","1 + k_pred = k_pred.suc"]}
{"goal":"k - 1 = k_pred","proof":["k_pred + 1 != k or k - 1 = k_pred"]}
{"goal":"k_pred < k","proof":["not k_pred.suc < k.suc or k_pred < k","not k_pred.suc < k.suc","not k < k.suc","k < k.suc"]}
{"goal":"k_pred <= n","proof":["not k_pred <= k or not k <= n or k_pred <= n","k_pred + 1 != k or k_pred <= k","not k_pred <= k or not k <= n","k_pred <= k","not k_pred <= k"]}
{"goal":"k_pred <= k","proof":["not k_pred.suc <= k.suc or k_pred <= k","not k_pred.suc <= k.suc","not k_pred < k or k_pred < k.suc","not k_pred < k.suc or k_pred.suc <= k.suc","k_pred < k.suc","not k_pred < k.suc"]}
{"goal":"k <= n.suc","proof":["not lib(util).is_transitive[Nat](Nat.lte) or not k <= n or not n <= n.suc or k <= n.suc","not n < n.suc or n <= n.suc","n < n.suc","not n <= n.suc or not k <= n","not n <= n.suc"]}
{"goal":"k.factorial * (n.suc - k).factorial != 0","proof":["k.factorial * (n.suc - k).factorial != 0 or k.factorial = 0 or (n.suc - k).factorial = 0","(n.suc - k).factorial != 0","k.factorial != 0"]}
{"goal":"not n.suc < k","proof":["not k <= n.suc or not n.suc < k"]}
{"goal":"choose(n.suc)(k) * k.factorial * (n.suc - k).factorial = n.suc.factorial","proof":["choose(n.suc, k) * k.factorial * (n.suc - k).factorial = n.suc.factorial or n.suc < k"]}
{"goal":"choose(n.suc)(k) * (k.factorial * (n.suc - k).factorial) = n.suc.factorial","proof":["choose(n.suc, k) * (k.factorial * (n.suc - k).factorial) = choose(n.suc, k) * k.factorial * (n.suc - k).factorial"]}
{"goal":"not n < k_pred","proof":["not n < k_pred or n < k_pred.suc","n < k_pred.suc","n < k","not k <= n or not n < k"]}
{"goal":"choose(n)(k_pred) * k_pred.factorial * (n - k_pred).factorial = n.factorial","proof":["choose(n, k_pred) * k_pred.factorial * (n - k_pred).factorial = n.factorial or n < k_pred"]}
{"goal":"n - k_pred = n.suc - k","proof":["k_pred.suc != k or (lib(nat.nat_base).bounded_sub(n, k_pred) + k_pred).suc = lib(nat.nat_base).bounded_sub(n, k_pred) + k","lib(nat.nat_base).bounded_sub(n, k_pred) + k_pred = n or n < k_pred","n - k_pred + k != n.suc or n.suc - k = n - k_pred","n - k_pred = lib(nat.nat_base).bounded_sub(n, k_pred)","n - k_pred + k != n.suc","lib(nat.nat_base).bounded_sub(n, k_pred) + k_pred = n","(lib(nat.nat_base).bounded_sub(n, k_pred) + k_pred).suc = lib(nat.nat_base).bounded_sub(n, k_pred) + k"]}
{"goal":"choose(n)(k_pred) * k_pred.factorial * (n.suc - k).factorial = n.factorial","proof":["choose(n, k_pred) * k_pred.factorial * (n - k_pred).factorial != n.factorial"]}
{"goal":"k.factorial = k * k_pred.factorial","proof":["k_pred.suc != k or k * k_pred.factorial = k.factorial"]}
{"goal":"choose(n)(k_pred) * k * k_pred.factorial * (n.suc - k).factorial = k * n.factorial","proof":["k * (choose(n, k_pred) * k_pred.factorial * (n - k_pred).factorial) = k * (choose(n, k_pred) * k_pred.factorial) * (n - k_pred).factorial","k * (choose(n, k_pred) * k_pred.factorial) = k * choose(n, k_pred) * k_pred.factorial","k * choose(n, k_pred) = choose(n, k_pred) * k"]}
{"goal":"choose(n)(k_pred) * (k.factorial * (n.suc - k).factorial) = k * n.factorial","proof":["choose(n, k_pred) * (k * k_pred.factorial) = choose(n, k_pred) * k * k_pred.factorial","choose(n, k_pred) * (k.factorial * (n.suc - k).factorial) = choose(n, k_pred) * k.factorial * (n.suc - k).factorial"]}
{"goal":"choose(n)(k - 1) * (k.factorial * (n.suc - k).factorial) = k * n.factorial","proof":["choose(n, k_pred) * (k.factorial * (n.suc - k).factorial) != k * n.factorial"]}
{"goal":"not n < k","proof":["not k <= n or not n < k"]}
{"goal":"choose(n)(k) * k.factorial * (n - k).factorial = n.factorial","proof":["choose(n, k) * k.factorial * (n - k).factorial = n.factorial or n < k"]}
{"goal":"n.suc - k = (n - k).suc","proof":["not k <= n or n - k + k = n","(n - k).suc + k != n.suc or n.suc - k = (n - k).suc","(n - k).suc + k = (n - k + k).suc","(n - k).suc + k != n.suc","(n - k + k).suc != n.suc","n - k + k = n","n - k + k != n"]}
{"goal":"(n.suc - k).factorial = (n - k).suc.factorial","proof":["n.suc - k != (n - k).suc"]}
{"goal":"(n.suc - k).factorial = (n - k + 1) * (n - k).factorial","proof":["(n - k).suc * (n - k).factorial = (n - k).suc.factorial","n - k = lib(nat.nat_base).bounded_sub(n, k)","lib(nat.nat_base).bounded_sub(n, k) + 1 = 1 + lib(nat.nat_base).bounded_sub(n, k)","1 + (n - k) = (n - k).suc"]}
{"goal":"choose(n)(k) * k.factorial * (n.suc - k).factorial = choose(n)(k) * k.factorial * (n - k + 1) * (n - k).factorial","proof":["choose(n, k) * k.factorial * ((n - k + 1) * (n - k).factorial) = choose(n, k) * k.factorial * (n - k + 1) * (n - k).factorial"]}
{"goal":"choose(n)(k) * k.factorial * (n.suc - k).factorial = (n - k + 1) * choose(n)(k) * k.factorial * (n - k).factorial","proof":["(n - k + 1) * choose(n, k) * k.factorial = (n - k + 1) * (choose(n, k) * k.factorial)","(n - k + 1) * (choose(n, k) * k.factorial) * (n - k).factorial != choose(n, k) * k.factorial * (n.suc - k).factorial","choose(n, k) * k.factorial * (n - k + 1) = (n - k + 1) * (choose(n, k) * k.factorial)"]}
{"goal":"choose(n)(k) * k.factorial * (n.suc - k).factorial = (n - k + 1) * n.factorial","proof":["(n - k + 1) * (choose(n, k) * k.factorial) * (n - k).factorial = (n - k + 1) * (choose(n, k) * k.factorial * (n - k).factorial)","choose(n, k) * k.factorial * (n - k + 1) = (n - k + 1) * (choose(n, k) * k.factorial)"]}
{"goal":"choose(n)(k) * (k.factorial * (n.suc - k).factorial) = (n - k + 1) * n.factorial","proof":["choose(n, k) * (k.factorial * (n.suc - k).factorial) = choose(n, k) * k.factorial * (n.suc - k).factorial"]}
{"goal":"(choose(n)(k - 1) + choose(n)(k)) * (k.factorial * (n.suc - k).factorial) = k * n.factorial + (n - k + 1) * n.factorial","proof":["choose(n, k - 1) * (k.factorial * (n.suc - k).factorial) + choose(n, k) * (k.factorial * (n.suc - k).factorial) = (choose(n, k - 1) + choose(n, k)) * (k.factorial * (n.suc - k).factorial)"]}
{"goal":"(choose(n)(k - 1) + choose(n)(k)) * (k.factorial * (n.suc - k).factorial) = (k + n - k + 1) * n.factorial","proof":["k * n.factorial + (n - k + 1) * n.factorial != (k + n - k + 1) * n.factorial","k * n.factorial + (n - k + 1) * n.factorial = (k + (n - k + 1)) * n.factorial","k + (n - k + 1) = k + (n - k) + 1","lib(nat.nat_base).bounded_sub(n, k) + k = n or n < k","n + k - k = n","k + n - k = lib(nat.nat_base).bounded_sub(k + n, k)","n - k = lib(nat.nat_base).bounded_sub(n, k)","k + lib(nat.nat_base).bounded_sub(n, k) = lib(nat.nat_base).bounded_sub(n, k) + k","lib(nat.nat_base).bounded_sub(k + n, k) + 1 = 1 + lib(nat.nat_base).bounded_sub(k + n, k)","n + k = k + n","1 + (k + n - k) = (k + n - k).suc","n + 1 = n.suc","(k + (n - k + 1)) * n.factorial != (k + n - k + 1) * n.factorial","lib(nat.nat_base).bounded_sub(n, k) + k = n","k + (n - k + 1) != k + n - k + 1"]}
{"goal":"(choose(n)(k - 1) + choose(n)(k)) * (k.factorial * (n.suc - k).factorial) = (n + 1) * n.factorial","proof":["(k + n - k + 1) * n.factorial != (n + 1) * n.factorial","n + k != k + n or k + n - k = n","n + k = k + n","k + n - k + 1 != n + 1","k + n - k != n"]}
{"goal":"(choose(n)(k - 1) + choose(n)(k)) * (k.factorial * (n.suc - k).factorial) = n.suc * n.factorial","proof":["(n + 1) * n.factorial != n.suc * n.factorial","n + 1 != n.suc","n + 1 = 1 + n","1 + n != n.suc","1 + n = n.suc"]}
{"goal":"(choose(n)(k - 1) + choose(n)(k)) * (k.factorial * (n.suc - k).factorial) = n.suc.factorial","proof":["n.suc * n.factorial != n.suc.factorial","n.suc != n.suc or n.suc * n.factorial = n.suc.factorial"]}
{"goal":"choose(n.suc)(k) = choose(n)(k - 1) + choose(n)(k)","proof":["(choose(n, k - 1) + choose(n, k)) * (k.factorial * (n.suc - k).factorial) != choose(n.suc, k) * (k.factorial * (n.suc - k).factorial) or k.factorial * (n.suc - k).factorial = 0 or choose(n, k - 1) + choose(n, k) = choose(n.suc, k)","(choose(n, k - 1) + choose(n, k)) * (k.factorial * (n.suc - k).factorial) != choose(n.suc, k) * (k.factorial * (n.suc - k).factorial) or k.factorial * (n.suc - k).factorial = 0","(choose(n, k - 1) + choose(n, k)) * (k.factorial * (n.suc - k).factorial) = choose(n.suc, k) * (k.factorial * (n.suc - k).factorial)","(choose(n, k - 1) + choose(n, k)) * (k.factorial * (n.suc - k).factorial) != choose(n.suc, k) * (k.factorial * (n.suc - k).factorial)"]}
{"goal":"pascal","proof":[]}
{"goal":"binomial_term(a, b, m.suc, 0) = choose(m.suc)(0) * a.pow(0) * b.pow(m.suc)","proof":["choose(m.suc, 0) * a.pow(0) * b.pow(m.suc - 0) = binomial_term(a, b, m.suc, 0)","m.suc - 0 = m.suc"]}
{"goal":"binomial_term(a, b, m.suc, 0) = 1 * 1 * b.pow(m.suc)","proof":["1 * 1 * b.pow(m.suc) = 1 * (1 * b.pow(m.suc))","choose(m.suc, 0) * (a.pow(0) * b.pow(m.suc)) = choose(m.suc, 0) * a.pow(0) * b.pow(m.suc)","a.pow(0) = 1","choose(m.suc, 0) = 1"]}
{"goal":"binomial_term(a, b, m.suc, 0) = b.pow(m.suc)","proof":["b.pow(m.suc) * (1 * 1) = 1 * 1 * b.pow(m.suc)","1 * 1 = 1","b.pow(m.suc) * 1 = b.pow(m.suc)"]}
{"goal":"b.pow(m.suc) = b * b.pow(m)","proof":["m.suc != m.suc or b * b.pow(m) = b.pow(m.suc)"]}
{"goal":"binomial_term(a, b, m.suc, 0) = b * b.pow(m)","proof":["binomial_term(a, b, m.suc, 0) != b.pow(m.suc)"]}
{"goal":"binomial_term(a, b, m, 0) = choose(m)(0) * a.pow(0) * b.pow(m)","proof":["choose(m, 0) * a.pow(0) * b.pow(m - 0) = binomial_term(a, b, m, 0)","m - 0 = m"]}
{"goal":"binomial_term(a, b, m, 0) = 1 * 1 * b.pow(m)","proof":["1 * 1 * b.pow(m) = 1 * (1 * b.pow(m))","choose(m, 0) * (a.pow(0) * b.pow(m)) = choose(m, 0) * a.pow(0) * b.pow(m)","a.pow(0) = 1","choose(m, 0) = 1"]}
{"goal":"binomial_term(a, b, m, 0) = b.pow(m)","proof":["b.pow(m) * (1 * 1) = 1 * 1 * b.pow(m)","1 * 1 = 1","b.pow(m) * 1 = b.pow(m)"]}
{"goal":"binomial_term(a, b, m.suc, 0) = b * binomial_term(a, b, m, 0)","proof":["binomial_term(a, b, m.suc, 0) != b * b.exp(m)"]}
{"goal":"binomial_term_zero","proof":[]}
{"goal":"binomial_term(a, b, m.suc, m.suc) = choose(m.suc)(m.suc) * a.pow(m.suc) * b.pow(0)","proof":["choose(m.suc, m.suc) * a.pow(m.suc) * b.pow(m.suc - m.suc) = binomial_term(a, b, m.suc, m.suc)","m.suc - m.suc = 0","choose(m.suc, m.suc) * a.pow(m.suc) * b.pow(m.suc - m.suc) != binomial_term(a, b, m.suc, m.suc)"]}
{"goal":"binomial_term(a, b, m.suc, m.suc) = 1 * a.pow(m.suc) * 1","proof":["1 * a.pow(m.suc) * 1 = 1 * (a.pow(m.suc) * 1)","choose(m.suc, m.suc) * (a.pow(m.suc) * b.pow(0)) = choose(m.suc, m.suc) * a.pow(m.suc) * b.pow(0)","a.pow(m.suc) * 1 * 1 = 1 * (a.pow(m.suc) * 1)","a.pow(m.suc) * choose(m.suc, m.suc) = choose(m.suc, m.suc) * a.pow(m.suc)","b.pow(0) = 1","a.pow(m.suc) * 1 = a.pow(m.suc)","choose(m.suc, m.suc) = 1"]}
{"goal":"binomial_term(a, b, m.suc, m.suc) = a.pow(m.suc)","proof":["a.pow(m.suc) * 1 = 1 * a.pow(m.suc)","1 * a.pow(m.suc) * 1 = 1 * a.pow(m.suc)","a.pow(m.suc) * 1 = a.pow(m.suc)"]}
{"goal":"a.pow(m.suc) = a * a.pow(m)","proof":["m.suc != m.suc or a * a.pow(m) = a.pow(m.suc)"]}
{"goal":"binomial_term(a, b, m.suc, m.suc) = a * a.pow(m)","proof":["binomial_term(a, b, m.suc, m.suc) != a.pow(m.suc)"]}
{"goal":"binomial_term(a, b, m, m) = choose(m)(m) * a.pow(m) * b.pow(0)","proof":["choose(m, m) * a.pow(m) * b.pow(m - m) = binomial_term(a, b, m, m)","m - m = 0","choose(m, m) * a.pow(m) * b.pow(m - m) != binomial_term(a, b, m, m)"]}
{"goal":"binomial_term(a, b, m, m) = 1 * a.pow(m) * 1","proof":["1 * a.pow(m) * 1 = 1 * (a.pow(m) * 1)","choose(m, m) * (a.pow(m) * b.pow(0)) = choose(m, m) * a.pow(m) * b.pow(0)","a.pow(m) * 1 * 1 = 1 * (a.pow(m) * 1)","a.pow(m) * choose(m, m) = choose(m, m) * a.pow(m)","b.pow(0) = 1","a.pow(m) * 1 = a.pow(m)","choose(m, m) = 1"]}
{"goal":"binomial_term(a, b, m, m) = a.pow(m)","proof":["a.pow(m) * 1 = 1 * a.pow(m)","1 * a.pow(m) * 1 = 1 * a.pow(m)","a.pow(m) * 1 = a.pow(m)"]}
{"goal":"binomial_term(a, b, m.suc, m.suc) = a * binomial_term(a, b, m, m)","proof":["binomial_term(a, b, m.suc, m.suc) != a * a.exp(m)"]}
{"goal":"binomial_term_top","proof":[]}
{"goal":"exists(k0: Nat) { k0.suc = k }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0).suc = x0 or 0 = x0 } }","s0(k).suc != k","not 0 < 0 or not 0 < 0","s0(k).suc = k or k = 0","k = 0","0 < 0"]}
{"goal":"k_pred + 1 = k","proof":["k_pred + 1 = 1 + k_pred","1 + k_pred != k","1 + k_pred = k_pred.suc"]}
{"goal":"k - 1 = k_pred","proof":["k_pred + 1 != k or k - 1 = k_pred"]}
{"goal":"k_pred < k","proof":["not k_pred.suc < k.suc or k_pred < k","not k_pred.suc < k.suc","not k < k.suc","k < k.suc"]}
{"goal":"k_pred <= m","proof":["not k_pred <= k or not k <= m or k_pred <= m","k_pred + 1 != k or k_pred <= k","not k_pred <= k or not k <= m","k_pred <= k","not k_pred <= k"]}
{"goal":"binomial_term(a, b, m.suc, k) = choose(m.suc)(k) * a.pow(k) * b.pow(m.suc - k)","proof":["choose(m.suc, k) * a.pow(k) * b.pow(m.suc - k) = binomial_term(a, b, m.suc, k)"]}
{"goal":"binomial_term(a, b, m, k_pred) = choose(m)(k_pred) * a.pow(k_pred) * b.pow(m - k_pred)","proof":["choose(m, k_pred) * a.pow(k_pred) * b.pow(m - k_pred) = binomial_term(a, b, m, k_pred)"]}
{"goal":"a * binomial_term(a, b, m, k_pred) = a * (choose(m)(k_pred) * a.pow(k_pred) * b.pow(m - k_pred))","proof":["choose(m, k_pred) * a.pow(k_pred) * b.pow(m - k_pred) != binomial_term(a, b, m, k_pred)"]}
{"goal":"a * binomial_term(a, b, m, k_pred) = a * choose(m)(k_pred) * a.pow(k_pred) * b.pow(m - k_pred)","proof":["a * (choose(m, k_pred) * a.pow(k_pred) * b.pow(m - k_pred)) = a * (choose(m, k_pred) * a.pow(k_pred)) * b.pow(m - k_pred)","a * (choose(m, k_pred) * a.pow(k_pred)) = a * choose(m, k_pred) * a.pow(k_pred)"]}
{"goal":"a * binomial_term(a, b, m, k_pred) = choose(m)(k_pred) * (a * a.pow(k_pred)) * b.pow(m - k_pred)","proof":["choose(m, k_pred) * (a * a.pow(k_pred)) = choose(m, k_pred) * a * a.pow(k_pred)","choose(m, k_pred) * a * a.pow(k_pred) * b.pow(m - k_pred) != a * binomial_term(a, b, m, k_pred)","a * choose(m, k_pred) = choose(m, k_pred) * a"]}
{"goal":"a.pow(k) = a * a.pow(k_pred)","proof":["k_pred.suc != k or a * a.pow(k_pred) = a.pow(k)"]}
{"goal":"a * binomial_term(a, b, m, k_pred) = choose(m)(k_pred) * a.pow(k) * b.pow(m - k_pred)","proof":["choose(m, k_pred) * (a * a.pow(k_pred)) * b.pow(m - k_pred) != a * binomial_term(a, b, m, k_pred)"]}
{"goal":"m - k_pred = m.suc - k","proof":["k_pred.suc != k or (lib(nat.nat_base).bounded_sub(m, k_pred) + k_pred).suc = lib(nat.nat_base).bounded_sub(m, k_pred) + k","not k_pred <= m or m - k_pred + k_pred = m","m - k_pred + k != m.suc or m.suc - k = m - k_pred","m - k_pred = lib(nat.nat_base).bounded_sub(m, k_pred)","m - k_pred + k != m.suc","m - k_pred + k_pred = m","(lib(nat.nat_base).bounded_sub(m, k_pred) + k_pred).suc = lib(nat.nat_base).bounded_sub(m, k_pred) + k"]}
{"goal":"a * binomial_term(a, b, m, k_pred) = choose(m)(k_pred) * a.pow(k) * b.pow(m.suc - k)","proof":["choose(m, k_pred) * a.pow(k) * b.pow(m - k_pred) != a * binomial_term(a, b, m, k_pred)"]}
{"goal":"a * binomial_term(a, b, m, k - 1) = choose(m)(k - 1) * a.pow(k) * b.pow(m.suc - k)","proof":[]}
{"goal":"k <= m","proof":[]}
{"goal":"binomial_term(a, b, m, k) = choose(m)(k) * a.pow(k) * b.pow(m - k)","proof":["choose(m, k) * a.pow(k) * b.pow(m - k) = binomial_term(a, b, m, k)"]}
{"goal":"b * binomial_term(a, b, m, k) = b * (choose(m)(k) * a.pow(k) * b.pow(m - k))","proof":["choose(m, k) * a.pow(k) * b.pow(m - k) != binomial_term(a, b, m, k)"]}
{"goal":"b * binomial_term(a, b, m, k) = b * choose(m)(k) * a.pow(k) * b.pow(m - k)","proof":["b * (choose(m, k) * a.pow(k) * b.pow(m - k)) = b * (choose(m, k) * a.pow(k)) * b.pow(m - k)","b * (choose(m, k) * a.pow(k)) = b * choose(m, k) * a.pow(k)"]}
{"goal":"b * binomial_term(a, b, m, k) = choose(m)(k) * a.pow(k) * (b * b.pow(m - k))","proof":["b * (choose(m, k) * a.pow(k)) = b * choose(m, k) * a.pow(k)","choose(m, k) * a.pow(k) * (b * b.pow(m - k)) = choose(m, k) * a.pow(k) * b * b.pow(m - k)","lib(list.list_sum).scalar_mul(b * choose(m, k) * a.pow(k), b.pow(m - k)) = b * choose(m, k) * a.pow(k) * b.pow(m - k)","lib(list.list_sum).scalar_mul(choose(m, k) * a.pow(k) * b, b.pow(m - k)) = choose(m, k) * a.pow(k) * b * b.pow(m - k)","b * (choose(m, k) * a.pow(k)) = choose(m, k) * a.pow(k) * b"]}
{"goal":"m - k + 1 = m.suc - k","proof":["not k <= m or m - k + k = m","m - k + 1 + k != m.suc or m - k + 1 = m.suc - k","(m - k).suc + k = (m - k + k).suc","m - k + 1 = (m - k).suc","m - k + 1 + k != m.suc","(m - k).suc + k != m.suc","m - k + k = m"]}
{"goal":"b.pow(m.suc - k) = b.pow(m - k + 1)","proof":["m - k + 1 != m.suc - k"]}
{"goal":"b.pow(m - k + 1) = b * b.pow(m - k)","proof":["1 + (m - k) != (m - k).suc or b * b.pow(m - k) = b.pow(1 + (m - k))","m - k + 1 = 1 + (m - k)","b * b.pow(m - k) != b.pow(1 + (m - k))","1 + (m - k) = (m - k).suc"]}
{"goal":"b * binomial_term(a, b, m, k) = choose(m)(k) * a.pow(k) * b.pow(m.suc - k)","proof":[]}
{"goal":"rhs_sum = choose(m)(k - 1) * a.pow(k) * b.pow(m.suc - k) + choose(m)(k) * a.pow(k) * b.pow(m.suc - k)","proof":[]}
{"goal":"rhs_sum = (choose(m)(k - 1) + choose(m)(k)) * a.pow(k) * b.pow(m.suc - k)","proof":["choose(m, k - 1) * a.pow(k) * b.pow(m.suc - k) + choose(m, k) * a.pow(k) * b.pow(m.suc - k) = (choose(m, k - 1) * a.pow(k) + choose(m, k) * a.pow(k)) * b.pow(m.suc - k)","choose(m, k - 1) * a.pow(k) + choose(m, k) * a.pow(k) = (choose(m, k - 1) + choose(m, k)) * a.pow(k)"]}
{"goal":"choose(m.suc)(k) = choose(m)(k - 1) + choose(m)(k)","proof":["not 0 < k or not k <= m or choose(m, k - 1) + choose(m, k) = choose(m.suc, k)"]}
{"goal":"rhs_sum = choose(m.suc)(k) * a.pow(k) * b.pow(m.suc - k)","proof":["(choose(m, k - 1) + choose(m, k)) * a.pow(k) * b.pow(m.suc - k) != rhs_sum"]}
{"goal":"binomial_term(a, b, m.suc, k) = rhs_sum","proof":["choose(m.suc, k) * a.exp(k) * b.exp(m.suc - k) != binomial_term(a, b, m.suc, k)"]}
{"goal":"binomial_term(a, b, m.suc, k) = a * binomial_term(a, b, m, k - 1) + b * binomial_term(a, b, m, k)","proof":["a * binomial_term(a, b, m, k - 1) + b * binomial_term(a, b, m, k) != rhs_sum"]}
{"goal":"binomial_term_recurrence","proof":[]}
{"goal":"k.suc <= m","proof":["not k < m or k.suc <= m"]}
{"goal":"0 < k.suc","proof":["0 < 0 + (1 * k).suc","1 * k = k","not 0 < (1 * k).suc","0 + (1 * k).suc = (1 * k).suc"]}
{"goal":"binomial_term(a, b, m.suc, k.suc) = a * binomial_term(a, b, m, k.suc - 1) + b * binomial_term(a, b, m, k.suc)","proof":["not 0 < k.suc or not k.suc <= m or a * binomial_term(a, b, m, k.suc - 1) + b * binomial_term(a, b, m, k.suc) = binomial_term(a, b, m.suc, k.suc)"]}
{"goal":"k.suc - 1 = k","proof":["k + 1 != k.suc or k.suc - 1 = k","k + 1 != k.suc","k + 1 = 1 + k","1 + k = k.suc"]}
{"goal":"binomial_term(a, b, m.suc, k.suc) = a * binomial_term(a, b, m, k) + b * binomial_term(a, b, m, k.suc)","proof":["a * binomial_term(a, b, m, k.suc - 1) + b * binomial_term(a, b, m, k.suc) != binomial_term(a, b, m.suc, k.suc)"]}
{"goal":"alt_binomial_term_recurrence","proof":[]}
{"goal":"h(k) = compose[Nat, Nat, Nat](binomial_term(a, b, m.suc), Nat.suc)(k)","proof":["compose(binomial_term(a, b, m.suc), Nat.suc, k) = h(k)"]}
{"goal":"h(k) = binomial_term(a, b, m.suc, k.suc)","proof":["compose(binomial_term(a, b, m.suc), Nat.suc, k) = binomial_term(a, b, m.suc, k.suc)"]}
{"goal":"binomial_term(a, b, m.suc, k.suc) = a * binomial_term(a, b, m, k) + b * binomial_term(a, b, m, k.suc)","proof":["not k < m or a * binomial_term(a, b, m, k) + b * binomial_term(a, b, m, k.suc) = binomial_term(a, b, m.suc, k.suc)"]}
{"goal":"f(k) = binomial_term(a, b, m, k)","proof":["binomial_term(a, b, m, k) = f(k)"]}
{"goal":"g(k) = binomial_term(a, b, m, k.suc)","proof":["let s0: Nat satisfy { true }","binomial_term(a, b, m, k.suc) = f(k.suc)","binomial_term(a, b, m, s0) = f(s0)","compose(binomial_term(a, b, m), Nat.suc, k) = g(k)","binomial_term(a, b, m) = f","compose(f, Nat.suc, k) = f(k.suc)"]}
{"goal":"h(k) = a * f(k) + b * g(k)","proof":[]}
{"goal":"h(k) = mul_fn(a, f)(k) + mul_fn(b, g)(k)","proof":["mul_fn(a, f, k) = a * f(k)","mul_fn(b, g, k) = b * g(k)"]}
{"goal":"h(k) = add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g))(k)","proof":["mul_fn(a, f, k) + mul_fn(b, g, k) = add_fn(mul_fn(a, f), mul_fn(b, g), k)"]}
{"goal":"partial(h, m) = partial(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), m)","proof":["let s0: (Nat -> Nat, Nat -> Nat, Nat) -> Nat satisfy { forall(x0: Nat -> Nat, x1: Nat -> Nat, x2: Nat) { s0(x0, x1, x2) < x2 or partial(x0, x2) = partial(x1, x2) } and forall(x3: Nat -> Nat, x4: Nat -> Nat, x5: Nat) { x3(s0(x3, x4, x5)) != x4(s0(x3, x4, x5)) or partial(x3, x5) = partial(x4, x5) } }","not s0(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), h, m) < m or add_fn(mul_fn(a, f), mul_fn(b, g), s0(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), h, m)) = h(s0(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), h, m))","add_fn(mul_fn(a, f), mul_fn(b, g), s0(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), h, m)) != h(s0(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), h, m)) or partial(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), m) = partial(h, m)","s0(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), h, m) < m or partial(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), m) = partial(h, m)","s0(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), h, m) < m","add_fn(mul_fn(a, f), mul_fn(b, g), s0(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), h, m)) != h(s0(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), h, m))","add_fn(mul_fn(a, f), mul_fn(b, g), s0(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), h, m)) = h(s0(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), h, m))"]}
{"goal":"partial(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), m) = partial(mul_fn(a, f), m) + partial(mul_fn(b, g), m)","proof":["partial(mul_fn(a, f), m) + partial(mul_fn(b, g), m) = partial(add_fn[Nat, Nat](mul_fn(a, f), mul_fn(b, g)), m)"]}
{"goal":"partial(mul_fn(a, f), m) = a * partial(f, m)","proof":["partial(mul_fn(a, f), m) = a * partial(f, m)"]}
{"goal":"partial(mul_fn(b, g), m) = b * partial(g, m)","proof":["partial(mul_fn(b, g), m) = b * partial(g, m)"]}
{"goal":"partial(h, m) = a * partial(f, m) + b * partial(g, m)","proof":[]}
{"goal":"partial(compose[Nat, Nat, Nat](binomial_term(a, b, m.suc), Nat.suc), m) = a * partial(binomial_term(a, b, m), m) + b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m)","proof":["let s0: Nat satisfy { true }","binomial_term(a, b, m, s0) = f(s0)","compose(binomial_term(a, b, m), Nat.suc, s0) = g(s0)","compose(binomial_term(a, b, m.suc), Nat.suc, s0) = h(s0)","binomial_term(a, b, m) = f","list.sum[Nat](list.map[Nat, Nat](m.range, compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc))) = partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m)","list.sum[Nat](list.map[Nat, Nat](m.range, compose[Nat, Nat, Nat](binomial_term(a, b, m.suc), Nat.suc))) = partial(compose[Nat, Nat, Nat](binomial_term(a, b, m.suc), Nat.suc), m)","list.sum[Nat](list.map[Nat, Nat](m.range, g)) = partial(g, m)","list.sum[Nat](list.map[Nat, Nat](m.range, h)) = partial(h, m)","b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m) + a * partial(binomial_term(a, b, m), m) = a * partial(binomial_term(a, b, m), m) + b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m)","b * partial(g, m) + a * partial(f, m) = a * partial(f, m) + b * partial(g, m)","partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m) * b = b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m)","partial(g, m) * b = b * partial(g, m)","compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc) = g","compose[Nat, Nat, Nat](binomial_term(a, b, m.suc), Nat.suc) = h"]}
{"goal":"binomial_middle_sum","proof":[]}
{"goal":"(a + b) * partial(binomial_term(a, b, m), m.suc) = a * partial(binomial_term(a, b, m), m.suc) + b * partial(binomial_term(a, b, m), m.suc)","proof":["a * partial(binomial_term(a, b, m), m.suc) + b * partial(binomial_term(a, b, m), m.suc) = (a + b) * partial(binomial_term(a, b, m), m.suc)"]}
{"goal":"partial(binomial_term(a, b, m.suc), m.suc.suc) = partial(binomial_term(a, b, m.suc), m.suc) + binomial_term(a, b, m.suc, m.suc)","proof":["partial(binomial_term(a, b, m.suc), m.suc) + binomial_term(a, b, m.suc, m.suc) = partial(binomial_term(a, b, m.suc), m.suc.suc)"]}
{"goal":"binomial_term(a, b, m.suc, m.suc) = a * binomial_term(a, b, m, m)","proof":["a * binomial_term(a, b, m, m) = binomial_term(a, b, m.suc, m.suc)"]}
{"goal":"partial(binomial_term(a, b, m.suc), m.suc) = binomial_term(a, b, m.suc, 0) + partial(compose[Nat, Nat, Nat](binomial_term(a, b, m.suc), Nat.suc), m)","proof":["binomial_term(a, b, m.suc, 0) + partial(compose[Nat, Nat, Nat](binomial_term(a, b, m.suc), Nat.suc), m) = partial(binomial_term(a, b, m.suc), m.suc)"]}
{"goal":"binomial_term(a, b, m.suc, 0) = b * binomial_term(a, b, m, 0)","proof":["b * binomial_term(a, b, m, 0) = binomial_term(a, b, m.suc, 0)"]}
{"goal":"partial(compose[Nat, Nat, Nat](binomial_term(a, b, m.suc), Nat.suc), m) = a * partial(binomial_term(a, b, m), m) + b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m)","proof":["a * partial(binomial_term(a, b, m), m) + b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m) = partial(compose[Nat, Nat, Nat](binomial_term(a, b, m.suc), Nat.suc), m)"]}
{"goal":"partial(binomial_term(a, b, m.suc), m.suc) = rhs_part1","proof":[]}
{"goal":"partial(binomial_term(a, b, m.suc), m.suc.suc) = rhs_part1 + a * binomial_term(a, b, m, m)","proof":[]}
{"goal":"rhs_part1 = b * binomial_term(a, b, m, 0) + a * partial(binomial_term(a, b, m), m) + b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m)","proof":["b * binomial_term(a, b, m, 0) + (a * partial(binomial_term(a, b, m), m) + b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m)) = b * binomial_term(a, b, m, 0) + a * partial(binomial_term(a, b, m), m) + b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m)"]}
{"goal":"b * binomial_term(a, b, m, 0) + b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m) = b * (binomial_term(a, b, m, 0) + partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m))","proof":["b * binomial_term(a, b, m, 0) + b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m) = b * (binomial_term(a, b, m, 0) + partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m))"]}
{"goal":"binomial_term(a, b, m, 0) + partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m) = partial(binomial_term(a, b, m), m.suc)","proof":["binomial_term(a, b, m, 0) + partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m) = partial(binomial_term(a, b, m), m.suc)"]}
{"goal":"b * binomial_term(a, b, m, 0) + b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m) = b * partial(binomial_term(a, b, m), m.suc)","proof":["b * binomial_term(a, b, m, 0) + b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m) != b * (binomial_term(a, b, m, 0) + partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m))"]}
{"goal":"rhs_part1 = b * partial(binomial_term(a, b, m), m.suc) + a * partial(binomial_term(a, b, m), m)","proof":["a * partial(binomial_term(a, b, m), m) + (b * binomial_term(a, b, m, 0) + b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m)) = a * partial(binomial_term(a, b, m), m) + b * binomial_term(a, b, m, 0) + b * partial(compose[Nat, Nat, Nat](binomial_term(a, b, m), Nat.suc), m)","b * binomial_term(a, b, m, 0) + a * partial(binomial_term(a, b, m), m) = a * partial(binomial_term(a, b, m), m) + b * binomial_term(a, b, m, 0)","b * partial(binomial_term(a, b, m), m.suc) + a * partial(binomial_term(a, b, m), m) = a * partial(binomial_term(a, b, m), m) + b * partial(binomial_term(a, b, m), m.suc)"]}
{"goal":"partial(binomial_term(a, b, m.suc), m.suc.suc) = b * partial(binomial_term(a, b, m), m.suc) + a * partial(binomial_term(a, b, m), m) + a * binomial_term(a, b, m, m)","proof":[]}
{"goal":"a * partial(binomial_term(a, b, m), m) + a * binomial_term(a, b, m, m) = a * (partial(binomial_term(a, b, m), m) + binomial_term(a, b, m, m))","proof":["a * partial(binomial_term(a, b, m), m) + a * binomial_term(a, b, m, m) = a * (partial(binomial_term(a, b, m), m) + binomial_term(a, b, m, m))"]}
{"goal":"partial(binomial_term(a, b, m), m) + binomial_term(a, b, m, m) = partial(binomial_term(a, b, m), m.suc)","proof":["partial(binomial_term(a, b, m), m) + binomial_term(a, b, m, m) = partial(binomial_term(a, b, m), m.suc)"]}
{"goal":"a * partial(binomial_term(a, b, m), m) + a * binomial_term(a, b, m, m) = a * partial(binomial_term(a, b, m), m.suc)","proof":["a * partial(binomial_term(a, b, m), m) + a * binomial_term(a, b, m, m) != a * (partial(binomial_term(a, b, m), m) + binomial_term(a, b, m, m))"]}
{"goal":"partial(binomial_term(a, b, m.suc), m.suc.suc) = b * partial(binomial_term(a, b, m), m.suc) + a * partial(binomial_term(a, b, m), m.suc)","proof":["b * partial(binomial_term(a, b, m), m.suc) + (a * partial(binomial_term(a, b, m), m) + a * binomial_term(a, b, m, m)) = b * partial(binomial_term(a, b, m), m.suc) + a * partial(binomial_term(a, b, m), m) + a * binomial_term(a, b, m, m)"]}
{"goal":"partial(binomial_term(a, b, m.suc), m.suc.suc) = a * partial(binomial_term(a, b, m), m.suc) + b * partial(binomial_term(a, b, m), m.suc)","proof":["b * partial(binomial_term(a, b, m), m.suc) + a * partial(binomial_term(a, b, m), m.suc) = a * partial(binomial_term(a, b, m), m.suc) + b * partial(binomial_term(a, b, m), m.suc)"]}
{"goal":"binomial_distribution","proof":["a * partial(binomial_term(a, b, m), m.suc) + b * partial(binomial_term(a, b, m), m.suc) != (a + b) * partial(binomial_term(a, b, m), m.suc)"]}
{"goal":"(a + b).pow(0) = 1","proof":["0 != 0 or (a + b).pow(0) = 1"]}
{"goal":"binomial_term(a, b, 0, 0) = choose(0)(0) * a.pow(0) * b.pow(0)","proof":["choose(0, 0) * a.pow(0) * b.pow(0 - 0) = binomial_term(a, b, 0, 0)","0 - 0 = 0"]}
{"goal":"binomial_term(a, b, 0, 0) = 1 * 1 * 1","proof":["choose(0, 0) * (a.pow(0) * b.pow(0)) = choose(0, 0) * a.pow(0) * b.pow(0)","lib(list.list_sum).scalar_mul(1 * 1, 1) = 1 * 1 * 1","lib(list.list_sum).scalar_mul(1, 1) = 1 * 1","1 * 1 = 1.pow(2)","1.pow(2) = 1","a.pow(0) = 1","b.pow(0) = 1","choose(0, 0) * 1 = choose(0, 0)","choose(0, 0) = 1"]}
{"goal":"binomial_term(a, b, 0, 0) = 1","proof":["1 * 1 * 1 != 1","1 * 1 = 1"]}
{"goal":"partial(binomial_term(a, b, 0), 1) = binomial_term(a, b, 0, 0)","proof":["partial(binomial_term(a, b, 0), 1) = binomial_term(a, b, 0, 0)"]}
{"goal":"(a + b).pow(0) = partial(binomial_term(a, b, 0), 0.suc)","proof":["lib(list.list_sum).sum[Nat](lib(list.list_base).map[Nat, Nat](0.suc.range, binomial_term(a, b, 0))) = partial(binomial_term(a, b, 0), 0.suc)","lib(list.list_sum).sum[Nat](lib(list.list_base).map[Nat, Nat](1.range, binomial_term(a, b, 0))) = partial(binomial_term(a, b, 0), 1)","1 + 0 = 0.suc","1 + 0 = 1"]}
{"goal":"f(0)","proof":["partial(binomial_term(a, b, 0), 0.suc) != (a + b).pow(0) or f(0)"]}
{"goal":"(a + b).pow(m) = partial(binomial_term(a, b, m), m.suc)","proof":["not f(m) or partial(binomial_term(a, b, m), m.suc) = (a + b).pow(m)"]}
{"goal":"(a + b).pow(m.suc) = (a + b) * (a + b).pow(m)","proof":["m.suc != m.suc or (a + b) * (a + b).pow(m) = (a + b).pow(m.suc)"]}
{"goal":"(a + b).pow(m.suc) = (a + b) * partial(binomial_term(a, b, m), m.suc)","proof":["(a + b) * (a + b).pow(m) != (a + b).pow(m.suc)"]}
{"goal":"(a + b) * partial(binomial_term(a, b, m), m.suc) = partial(binomial_term(a, b, m.suc), m.suc.suc)","proof":["(a + b) * partial(binomial_term(a, b, m), m.suc) = partial(binomial_term(a, b, m.suc), m.suc.suc)"]}
{"goal":"(a + b).pow(m.suc) = partial(binomial_term(a, b, m.suc), m.suc.suc)","proof":["(a + b) * partial(binomial_term(a, b, m), m.suc) != partial(binomial_term(a, b, m.suc), m.suc.suc)"]}
{"goal":"f(m.suc)","proof":["partial(binomial_term(a, b, m.suc), m.suc.suc) != (a + b).pow(m.suc) or f(m.suc)","partial(binomial_term(a, b, m.suc), m.suc.suc) != (a + b).pow(m.suc)"]}
{"goal":"f(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(s0(f).suc) or not f(0) or f(n)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(n)","not f(s0(f))","f(s0(f))"]}
{"goal":"binomial","proof":["not f(n) or partial(binomial_term(a, b, n), n.suc) = (a + b).pow(n)"]}
