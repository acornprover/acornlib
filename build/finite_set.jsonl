{"goal":"const_false_satisfies_finite_constraint","proof":["let (s1: T -> Bool -> List[T], s2: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or s1(x0).contains(x1) } and forall(x2: T -> Bool, x3: List[T]) { x2(s2(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not x4.contains(s2(x5, x4)) or finite_constraint[T](x5) } }","let s0: List[T] satisfy { true }","const_false(s2(const_false[T], s0)) or finite_constraint[T](const_false[T])","const_false(s2(const_false[T], s0))","not const_false(s2(const_false[T], s0))"]}
{"goal":"list_contains_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or s0(x0).contains(x1) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not x4.contains(s1(x5, x4)) or finite_constraint[T](x5) } }","not ts.contains(s1(ts.contains, ts)) or finite_constraint[T](ts.contains)","ts.contains(s1(ts.contains, ts)) or finite_constraint[T](ts.contains)","ts.contains(s1(ts.contains, ts))"]}
{"goal":"functional_insert_satisfies_finite_constraint","proof":["let (s1: T -> Bool -> List[T], s2: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or s1(x0).contains(x1) } and forall(x2: T -> Bool, x3: List[T]) { x2(s2(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not x4.contains(s2(x5, x4)) or finite_constraint[T](x5) } }","let s0: List[T] satisfy { true }","List.cons(item, s0) != List.cons(item, s0) or List.cons(item, s0) + s1(f) = List.cons(item, s0 + s1(f))","List.cons(item, s0) + s1(f) != List.cons(item, s0 + s1(f)) or s2(functional_insert(f, item), List.cons(item, s0) + s1(f)) != item or (List.cons(item, s0) + s1(f)).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","not functional_insert(f, item, s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or s2(functional_insert(f, item), List.cons(item, s0) + s1(f)) = item or f(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","not finite_constraint[T](f) or not f(s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or s1(f).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","not s1(f).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or (List.cons(item, s0) + s1(f)).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","not (List.cons(item, s0) + s1(f)).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or finite_constraint[T](functional_insert(f, item))","functional_insert(f, item, s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or finite_constraint[T](functional_insert(f, item))","not (List.cons(item, s0) + s1(f)).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","functional_insert(f, item, s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","List.cons(item, s0) + s1(f) = List.cons(item, s0 + s1(f))","not f(s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or s1(f).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","not s1(f).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","s2(functional_insert(f, item), List.cons(item, s0) + s1(f)) != item or List.cons(item, s0) + s1(f) != List.cons(item, s0 + s1(f))","f(s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or s2(functional_insert(f, item), List.cons(item, s0) + s1(f)) = item","s2(functional_insert(f, item), List.cons(item, s0) + s1(f)) != item","not f(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","f(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))"]}
{"goal":"functional_remove_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or s0(x0).contains(x1) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not x4.contains(s1(x5, x4)) or finite_constraint[T](x5) } }","not functional_remove(f, item, s1(functional_remove(f, item), s0(f))) or s1(functional_remove(f, item), s0(f)) = item or f(s1(functional_remove(f, item), s0(f)))","not finite_constraint[T](f) or not f(s1(functional_remove(f, item), s0(f))) or s0(f).contains(s1(functional_remove(f, item), s0(f)))","not s0(f).contains(s1(functional_remove(f, item), s0(f))) or finite_constraint[T](functional_remove(f, item))","not functional_remove(f, item, s1(functional_remove(f, item), s0(f))) or s1(functional_remove(f, item), s0(f)) != item","functional_remove(f, item, s1(functional_remove(f, item), s0(f))) or finite_constraint[T](functional_remove(f, item))","not s0(f).contains(s1(functional_remove(f, item), s0(f)))","functional_remove(f, item, s1(functional_remove(f, item), s0(f)))","not f(s1(functional_remove(f, item), s0(f))) or s0(f).contains(s1(functional_remove(f, item), s0(f)))","s1(functional_remove(f, item), s0(f)) != item","not f(s1(functional_remove(f, item), s0(f)))","f(s1(functional_remove(f, item), s0(f)))"]}
{"goal":"exists(k0: T -> Bool) { finite_constraint[T](k0) }","proof":["not finite_constraint[T](const_false[T])"]}
{"goal":"finite_constraint[T](a.contains)","proof":["finite_constraint[T](a.contains)"]}
{"goal":"finite_constraint[T](b.contains)","proof":["finite_constraint[T](b.contains)"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { a.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s2: List[T] -> T satisfy { forall(x6: List[T]) { s2(x6) ∈ a } and forall(x7: List[T]) { not s2(x7) ∈ x7 } }","not s2(s0(a.contains)) ∈ s0(a.contains)","s2(s0(a.contains)) ∈ a","not finite_constraint[T](a.contains) or not s2(s0(a.contains)) ∈ a or s2(s0(a.contains)) ∈ s0(a.contains)","not s2(s0(a.contains)) ∈ a or not finite_constraint[T](a.contains)"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { b.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s2: List[T] -> T satisfy { forall(x6: List[T]) { s2(x6) ∈ b } and forall(x7: List[T]) { not s2(x7) ∈ x7 } }","not s2(s0(b.contains)) ∈ s0(b.contains)","s2(s0(b.contains)) ∈ b","not finite_constraint[T](b.contains) or not s2(s0(b.contains)) ∈ b or s2(s0(b.contains)) ∈ s0(b.contains)","not s2(s0(b.contains)) ∈ b or not finite_constraint[T](b.contains)"]}
{"goal":"superset_a.contains(x)","proof":["not x ∈ a or x ∈ superset_a"]}
{"goal":"superset_union.contains(x)","proof":["not x ∈ superset_a + superset_b","not x ∈ superset_a or x ∈ superset_a + superset_b"]}
{"goal":"superset_b.contains(x)","proof":["not x ∈ b or x ∈ superset_b"]}
{"goal":"superset_union.contains(x)","proof":["not x ∈ superset_a + superset_b","not x ∈ superset_b or x ∈ superset_a + superset_b"]}
{"goal":"exists(k0: List[T]) { k0 = superset_union and forall(x0: T) { elem_in_finite_union(a, b, x0) implies k0.contains(x0) } }","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { superset_union != x0 or elem_in_finite_union(a, b, s0(x0)) } and forall(x1: List[T]) { not s0(x1) ∈ x1 or superset_union != x1 } }","superset_union != superset_union or elem_in_finite_union(a, b, s0(superset_union))","not s0(superset_union) ∈ superset_union or superset_union != superset_union","not s0(superset_union) ∈ b or s0(superset_union) ∈ superset_union","not s0(superset_union) ∈ a or s0(superset_union) ∈ superset_union","not s0(superset_union) ∈ superset_union","elem_in_finite_union(a, b, s0(superset_union))","not elem_in_finite_union(a, b, s0(superset_union)) or s0(superset_union) ∈ a or s0(superset_union) ∈ b","not s0(superset_union) ∈ a","not s0(superset_union) ∈ b","s0(superset_union) ∈ b"]}
{"goal":"union_contains_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s2: List[T] satisfy { s2 = superset_union and forall(x6: T) { not elem_in_finite_union(a, b, x6) or x6 ∈ s2 } }","not elem_in_finite_union(a, b, s1(elem_in_finite_union[T](a, b), s2)) or s1(elem_in_finite_union[T](a, b), s2) ∈ s2","not s1(elem_in_finite_union[T](a, b), s2) ∈ s2 or finite_constraint[T](elem_in_finite_union[T](a, b))","elem_in_finite_union(a, b, s1(elem_in_finite_union[T](a, b), s2)) or finite_constraint[T](elem_in_finite_union[T](a, b))","not s1(elem_in_finite_union[T](a, b), s2) ∈ s2","elem_in_finite_union(a, b, s1(elem_in_finite_union[T](a, b), s2))"]}
{"goal":"intersection_contains_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","not finite_constraint[T](a.contains) or not s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ a or s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ s0(a.contains)","not elem_in_finite_intersection(a, b, s1(elem_in_finite_intersection[T](a, b), s0(a.contains))) or s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ a","not s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ s0(a.contains) or finite_constraint[T](elem_in_finite_intersection[T](a, b))","elem_in_finite_intersection(a, b, s1(elem_in_finite_intersection[T](a, b), s0(a.contains))) or finite_constraint[T](elem_in_finite_intersection[T](a, b))","finite_constraint[T](a.contains)","not s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ s0(a.contains)","elem_in_finite_intersection(a, b, s1(elem_in_finite_intersection[T](a, b), s0(a.contains)))","s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ a","not s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ a or not finite_constraint[T](a.contains)","not s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ a"]}
{"goal":"finite_constraint[T](a.contains)","proof":["finite_constraint[T](a.contains)"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { a.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s2: List[T] -> T satisfy { forall(x6: List[T]) { s2(x6) ∈ a } and forall(x7: List[T]) { not s2(x7) ∈ x7 } }","not s2(s0(a.contains)) ∈ s0(a.contains)","s2(s0(a.contains)) ∈ a","not finite_constraint[T](a.contains) or not s2(s0(a.contains)) ∈ a or s2(s0(a.contains)) ∈ s0(a.contains)","not s2(s0(a.contains)) ∈ a or not finite_constraint[T](a.contains)"]}
{"goal":"a.contains(x)","proof":["not elem_in_finite_difference(a, b, x) or x ∈ a"]}
{"goal":"superset_a.contains(x)","proof":["not x ∈ a or x ∈ superset_a"]}
{"goal":"exists(k0: List[T]) { k0 = superset_a and forall(x0: T) { elem_in_finite_difference(a, b, x0) implies k0.contains(x0) } }","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { superset_a != x0 or elem_in_finite_difference(a, b, s0(x0)) } and forall(x1: List[T]) { not s0(x1) ∈ x1 or superset_a != x1 } }","superset_a != superset_a or elem_in_finite_difference(a, b, s0(superset_a))","not s0(superset_a) ∈ superset_a or superset_a != superset_a","not s0(superset_a) ∈ superset_a","not elem_in_finite_difference(a, b, s0(superset_a)) or s0(superset_a) ∈ superset_a","elem_in_finite_difference(a, b, s0(superset_a))","not elem_in_finite_difference(a, b, s0(superset_a))"]}
{"goal":"difference_contains_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s2: List[T] satisfy { s2 = superset_a and forall(x6: T) { not elem_in_finite_difference(a, b, x6) or x6 ∈ s2 } }","not elem_in_finite_difference(a, b, s1(elem_in_finite_difference[T](a, b), s2)) or s1(elem_in_finite_difference[T](a, b), s2) ∈ s2","not s1(elem_in_finite_difference[T](a, b), s2) ∈ s2 or finite_constraint[T](elem_in_finite_difference[T](a, b))","elem_in_finite_difference(a, b, s1(elem_in_finite_difference[T](a, b), s2)) or finite_constraint[T](elem_in_finite_difference[T](a, b))","not s1(elem_in_finite_difference[T](a, b), s2) ∈ s2","elem_in_finite_difference(a, b, s1(elem_in_finite_difference[T](a, b), s2))"]}
{"goal":"finite_subset_refl","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(s, s) ∈ s or s ⊆ s","not s0(s, s) ∈ s","s0(s, s) ∈ s or s ⊆ s"]}
{"goal":"finite_subset_trans","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not a ⊆ b or not s0(a, c) ∈ a or s0(a, c) ∈ b","not b ⊆ c or not s0(a, c) ∈ b or s0(a, c) ∈ c","not s0(a, c) ∈ c or a ⊆ c","not s0(a, c) ∈ c","s0(a, c) ∈ a or a ⊆ c","s0(a, c) ∈ a","not s0(a, c) ∈ b or s0(a, c) ∈ c","not s0(a, c) ∈ a or s0(a, c) ∈ b","not s0(a, c) ∈ b","s0(a, c) ∈ b"]}
{"goal":"a.contains(x) implies b.contains(x)","proof":["not a ⊆ b or not x ∈ a or x ∈ b","not a ⊆ b or not x ∈ a"]}
{"goal":"b.contains(x) implies a.contains(x)","proof":["not b ⊆ a or not x ∈ b or x ∈ a","not b ⊆ a or not x ∈ b"]}
{"goal":"a.contains(x) = b.contains(x)","proof":["x ∈ b or x ∈ a","x ∈ b","x ∈ a","not x ∈ a"]}
{"goal":"a.contains = b.contains","proof":["let s0: T satisfy { s0 ∈ b != s0 ∈ a }","s0 ∈ b = s0 ∈ a"]}
{"goal":"finite_double_inclusion","proof":["FiniteSet.new[T](a.contains) = a","FiniteSet.new[T](b.contains) = b"]}
{"goal":"false","proof":["not finite_constraint[T](const_false[T]) or x ∈ FiniteSet.new[T](const_false[T]) = const_false(x)","not const_false(x)","x ∈ FiniteSet.empty[T]","not x ∈ FiniteSet.new[T](const_false[T]) or not finite_constraint[T](const_false[T]) or const_false(x)","x ∈ FiniteSet.new[T](const_false[T])"]}
{"goal":"finite_empty_subset_all","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(e, s) ∈ e","not e ⊆ s","s0(e, s) ∈ e or e ⊆ s"]}
{"goal":"insert_contains","proof":["FiniteSet.new[T](functional_insert(s.contains, item)) = s.insert(item)","not finite_constraint[T](functional_insert(s.contains, item)) or item ∈ FiniteSet.new[T](functional_insert(s.contains, item)) = functional_insert(s.contains, item, item)","not finite_constraint[T](s.contains) or finite_constraint[T](functional_insert(s.contains, item))","item != item or functional_insert(s.contains, item, item)","finite_constraint[T](s.contains)","not item ∈ FiniteSet.new[T](functional_insert(s.contains, item))","functional_insert(s.contains, item, item)","not finite_constraint[T](functional_insert(s.contains, item)) or not functional_insert(s.contains, item, item) or item ∈ FiniteSet.new[T](functional_insert(s.contains, item))","not finite_constraint[T](functional_insert(s.contains, item))"]}
{"goal":"remove_does_not_contain","proof":["FiniteSet.new[T](functional_remove(s.contains, item)) = s.remove(item)","not finite_constraint[T](functional_remove(s.contains, item)) or item ∈ FiniteSet.new[T](functional_remove(s.contains, item)) = functional_remove(s.contains, item, item)","not finite_constraint[T](s.contains) or finite_constraint[T](functional_remove(s.contains, item))","not functional_remove(s.contains, item, item) or item != item","finite_constraint[T](s.contains)","item ∈ FiniteSet.new[T](functional_remove(s.contains, item))","not functional_remove(s.contains, item, item)","not item ∈ FiniteSet.new[T](functional_remove(s.contains, item)) or not finite_constraint[T](functional_remove(s.contains, item)) or functional_remove(s.contains, item, item)","not finite_constraint[T](functional_remove(s.contains, item))"]}
{"goal":"finite_constraint[T](s.contains)","proof":["finite_constraint[T](s.contains)"]}
{"goal":"finite_constraint[T](s.insert(other).contains)","proof":["finite_constraint[T](s.insert(other).contains)"]}
{"goal":"insert_other_still_contains","proof":["FiniteSet.new[T](functional_insert(s.contains, other)) = s.insert(other)","not item ∈ s or functional_insert(s.contains, other, item) or other = item","not finite_constraint[T](functional_insert(s.contains, other)) or item ∈ FiniteSet.new[T](functional_insert(s.contains, other)) = functional_insert(s.contains, other, item)","not finite_constraint[T](s.contains) or finite_constraint[T](functional_insert(s.contains, other))","other != item or functional_insert(s.contains, other, item)","not item ∈ FiniteSet.new[T](functional_insert(s.contains, other))","not finite_constraint[T](functional_insert(s.contains, other)) or not functional_insert(s.contains, other, item) or item ∈ FiniteSet.new[T](functional_insert(s.contains, other))","finite_constraint[T](functional_insert(s.contains, other))","not functional_insert(s.contains, other, item)","other = item","other != item"]}
{"goal":"finite_constraint[T](s.contains)","proof":["finite_constraint[T](s.contains)"]}
{"goal":"finite_constraint[T](s.remove(other).contains)","proof":["finite_constraint[T](s.remove(other).contains)"]}
{"goal":"remove_other_still_contains","proof":["FiniteSet.new[T](functional_remove(s.contains, other)) = s.remove(other)","not item ∈ s or functional_remove(s.contains, other, item) or other = item","not finite_constraint[T](functional_remove(s.contains, other)) or item ∈ FiniteSet.new[T](functional_remove(s.contains, other)) = functional_remove(s.contains, other, item)","not finite_constraint[T](s.contains) or finite_constraint[T](functional_remove(s.contains, other))","not item ∈ FiniteSet.new[T](functional_remove(s.contains, other))","not finite_constraint[T](functional_remove(s.contains, other)) or not functional_remove(s.contains, other, item) or item ∈ FiniteSet.new[T](functional_remove(s.contains, other))","finite_constraint[T](functional_remove(s.contains, other))","not item ∈ s or functional_remove(s.contains, other, item)","not functional_remove(s.contains, other, item)"]}
{"goal":"finite_constraint[T](s.contains)","proof":["finite_constraint[T](s.contains)"]}
{"goal":"finite_constraint[T](s.insert(other).contains)","proof":["finite_constraint[T](s.insert(other).contains)"]}
{"goal":"insert_other_contains_imp_contains","proof":["FiniteSet.new[T](functional_insert(s.contains, other)) = s.insert(other)","not functional_insert(s.contains, other, item) or other = item or item ∈ s","not finite_constraint[T](functional_insert(s.contains, other)) or item ∈ FiniteSet.new[T](functional_insert(s.contains, other)) = functional_insert(s.contains, other, item)","not finite_constraint[T](s.contains) or finite_constraint[T](functional_insert(s.contains, other))","not item ∈ FiniteSet.new[T](functional_insert(s.contains, other)) or not finite_constraint[T](functional_insert(s.contains, other)) or functional_insert(s.contains, other, item)","finite_constraint[T](functional_insert(s.contains, other))","not functional_insert(s.contains, other, item) or item ∈ s","item ∈ FiniteSet.new[T](functional_insert(s.contains, other))","functional_insert(s.contains, other, item)"]}
{"goal":"finite_constraint[T](s.contains)","proof":["finite_constraint[T](s.contains)"]}
{"goal":"finite_constraint[T](s.remove(other).contains)","proof":["finite_constraint[T](s.remove(other).contains)"]}
{"goal":"remove_other_contains_imp_contains","proof":["FiniteSet.new[T](functional_remove(s.contains, other)) = s.remove(other)","not functional_remove(s.contains, other, item) or other = item or item ∈ s","not finite_constraint[T](functional_remove(s.contains, other)) or item ∈ FiniteSet.new[T](functional_remove(s.contains, other)) = functional_remove(s.contains, other, item)","not finite_constraint[T](s.contains) or finite_constraint[T](functional_remove(s.contains, other))","not item ∈ FiniteSet.new[T](functional_remove(s.contains, other)) or not finite_constraint[T](functional_remove(s.contains, other)) or functional_remove(s.contains, other, item)","finite_constraint[T](functional_remove(s.contains, other))","not functional_remove(s.contains, other, item) or item ∈ s","item ∈ FiniteSet.new[T](functional_remove(s.contains, other))","functional_remove(s.contains, other, item)"]}
{"goal":"s.contains(item) = s.insert(other).contains(item)","proof":["not item ∈ s.insert(other)","not item ∈ s or item ∈ s.insert(other)"]}
{"goal":"not s.contains(item)","proof":[]}
{"goal":"not s.insert(other).contains(item)","proof":["not item ∈ s.insert(other) or item ∈ s or other = item"]}
{"goal":"s.contains(item) = s.insert(other).contains(item)","proof":["item ∈ s.insert(other)"]}
{"goal":"insert_other_contains_eq","proof":["set.contains(item)","not set.insert(other).contains(item)"]}
{"goal":"s.contains(item) = s.remove(other).contains(item)","proof":["not item ∈ s.remove(other)","not item ∈ s or item ∈ s.remove(other) or other = item"]}
{"goal":"not s.contains(item)","proof":[]}
{"goal":"not s.remove(other).contains(item)","proof":["not item ∈ s.remove(other) or item ∈ s or other = item"]}
{"goal":"s.contains(item) = s.remove(other).contains(item)","proof":["item ∈ s.remove(other)"]}
{"goal":"remove_other_contains_eq","proof":["set.contains(item)","not set.remove(other).contains(item)"]}
{"goal":"s.remove(item).insert(item).contains != s.contains","proof":["FiniteSet.new[T](s.contains) = s","FiniteSet.new[T](s.remove(item).insert(item).contains) = s.remove(item).insert(item)"]}
{"goal":"exists(k0: T) { s.remove(item).insert(item).contains(k0) != s.contains(k0) }","proof":["let s0: T satisfy { s0 ∈ s.remove(item).insert(item) != s0 ∈ s }","s0 ∈ s.remove(item).insert(item) = s0 ∈ s"]}
{"goal":"s.remove(item).contains(t)","proof":["not t ∈ s or t ∈ s.remove(item) or t = item"]}
{"goal":"false","proof":["not t ∈ s.remove(item) or t ∈ s.remove(item).insert(item)","not t ∈ s.remove(item).insert(item)"]}
{"goal":"false","proof":["not t ∈ s.remove(item).insert(item) or t ∈ s.remove(item) or t = item","not t ∈ s.remove(item) or t ∈ s or t = item","t ∈ s.remove(item).insert(item)","t ∈ s.remove(item)"]}
{"goal":"item = t","proof":[]}
{"goal":"not s.contains(t)","proof":["not t ∈ s.remove(item).insert(item)","not item ∈ s.remove(item).insert(item)","item ∈ s.remove(item).insert(item)"]}
{"goal":"false","proof":["not set.remove(item).contains(t) or set.remove(item).insert(item).contains(t) or t = item"]}
{"goal":"remove_then_insert","proof":[]}
{"goal":"s.insert(item).remove(item).contains != s.contains","proof":["FiniteSet.new[T](s.contains) = s","FiniteSet.new[T](s.insert(item).remove(item).contains) = s.insert(item).remove(item)"]}
{"goal":"exists(k0: T) { s.insert(item).remove(item).contains(k0) != s.contains(k0) }","proof":["let s0: T satisfy { s0 ∈ s.insert(item).remove(item) != s0 ∈ s }","s0 ∈ s.insert(item).remove(item) = s0 ∈ s"]}
{"goal":"false","proof":["not t ∈ s.insert(item) or t ∈ s.insert(item).remove(item) or t = item","not t ∈ s or t ∈ s.insert(item)","not t ∈ s.insert(item).remove(item)","t ∈ s.insert(item)"]}
{"goal":"s.insert(item).contains(t)","proof":["not t ∈ s.insert(item).remove(item) or t ∈ s.insert(item) or t = item","t ∈ s.insert(item).remove(item)"]}
{"goal":"false","proof":["not t ∈ s.insert(item) or t ∈ s or t = item"]}
{"goal":"item = t","proof":[]}
{"goal":"not s.contains(t)","proof":[]}
{"goal":"false","proof":["not t ∈ s.insert(item).remove(t)","t ∈ s.insert(item).remove(item)"]}
{"goal":"insert_then_remove","proof":[]}
{"goal":"a.subset_eq(a.union(b))","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(a, a ∪ b) ∈ a ∪ b or a ⊆ a ∪ b","s0(a, a ∪ b) ∈ a or a ⊆ a ∪ b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or s0(a, a ∪ b) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) = elem_in_finite_union(a, b, s0(a, a ∪ b))","FiniteSet.new[T](elem_in_finite_union[T](a, b)) = a ∪ b","not s0(a, a ∪ b) ∈ a or elem_in_finite_union(a, b, s0(a, a ∪ b))","finite_constraint[T](elem_in_finite_union[T](a, b))","s0(a, a ∪ b) ∈ a","not s0(a, a ∪ b) ∈ a ∪ b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or not elem_in_finite_union(a, b, s0(a, a ∪ b)) or s0(a, a ∪ b) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))","elem_in_finite_union(a, b, s0(a, a ∪ b))","not s0(a, a ∪ b) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))"]}
{"goal":"b.subset_eq(a.union(b))","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(b, a ∪ b) ∈ a ∪ b or b ⊆ a ∪ b","s0(b, a ∪ b) ∈ b or b ⊆ a ∪ b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or s0(b, a ∪ b) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) = elem_in_finite_union(a, b, s0(b, a ∪ b))","FiniteSet.new[T](elem_in_finite_union[T](a, b)) = a ∪ b","not s0(b, a ∪ b) ∈ b or elem_in_finite_union(a, b, s0(b, a ∪ b))","finite_constraint[T](elem_in_finite_union[T](a, b))","s0(b, a ∪ b) ∈ b","not s0(b, a ∪ b) ∈ a ∪ b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or not elem_in_finite_union(a, b, s0(b, a ∪ b)) or s0(b, a ∪ b) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))","elem_in_finite_union(a, b, s0(b, a ∪ b))","not s0(b, a ∪ b) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))"]}
{"goal":"finite_sets_subset_union","proof":["not a ⊂ a ∪ b"]}
{"goal":"finite_sets_subset_contain_union","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not elem_in_finite_union(a, b, s0(a ∪ b, c)) or s0(a ∪ b, c) ∈ a or s0(a ∪ b, c) ∈ b","not a ⊆ c or not s0(a ∪ b, c) ∈ a or s0(a ∪ b, c) ∈ c","not b ⊆ c or not s0(a ∪ b, c) ∈ b or s0(a ∪ b, c) ∈ c","not s0(a ∪ b, c) ∈ c or a ∪ b ⊆ c","s0(a ∪ b, c) ∈ a ∪ b or a ∪ b ⊆ c","not finite_constraint[T](elem_in_finite_union[T](a, b)) or s0(a ∪ b, c) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) = elem_in_finite_union(a, b, s0(a ∪ b, c))","FiniteSet.new[T](elem_in_finite_union[T](a, b)) = a ∪ b","finite_constraint[T](elem_in_finite_union[T](a, b))","not s0(a ∪ b, c) ∈ c","s0(a ∪ b, c) ∈ a ∪ b","not s0(a ∪ b, c) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) or not finite_constraint[T](elem_in_finite_union[T](a, b)) or elem_in_finite_union(a, b, s0(a ∪ b, c))","not s0(a ∪ b, c) ∈ b or s0(a ∪ b, c) ∈ c","not s0(a ∪ b, c) ∈ a or s0(a ∪ b, c) ∈ c","not s0(a ∪ b, c) ∈ a","not s0(a ∪ b, c) ∈ b","s0(a ∪ b, c) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))","elem_in_finite_union(a, b, s0(a ∪ b, c))"]}
{"goal":"v.subset_eq(u)","proof":["not b ⊆ a ∪ b or not a ⊆ a ∪ b or b ∪ a ⊆ a ∪ b","not b ∪ a ⊆ u","b ⊆ a ∪ b","a ⊆ a ∪ b","not b ∪ a ⊆ a ∪ b"]}
{"goal":"u.subset_eq(v)","proof":["not a ⊆ b ∪ a or not b ⊆ b ∪ a or a ∪ b ⊆ b ∪ a","not u ⊆ b ∪ a","a ⊆ b ∪ a","b ⊆ b ∪ a","not a ∪ b ⊆ b ∪ a"]}
{"goal":"finite_union_comm","proof":["a ∪ b != v","v != u","not u ⊆ v or not v ⊆ u or v = u"]}
{"goal":"a.subset_eq(u)","proof":["a ⊆ a ∪ (b ∪ c)"]}
{"goal":"b.subset_eq(u)","proof":["not b ⊆ b ∪ c or not b ∪ c ⊆ a ∪ (b ∪ c) or b ⊆ a ∪ (b ∪ c)","b ∪ c ⊆ a ∪ (b ∪ c)","b ⊆ b ∪ c","not b ⊆ a ∪ (b ∪ c)","not b ∪ c ⊆ a ∪ (b ∪ c) or not b ⊆ b ∪ c"]}
{"goal":"c.subset_eq(u)","proof":["not c ⊆ b ∪ c or not b ∪ c ⊆ a ∪ (b ∪ c) or c ⊆ a ∪ (b ∪ c)","b ∪ c ⊆ a ∪ (b ∪ c)","c ⊆ b ∪ c","not c ⊆ a ∪ (b ∪ c)","not b ∪ c ⊆ a ∪ (b ∪ c) or not c ⊆ b ∪ c"]}
{"goal":"v.subset_eq(u)","proof":["not a ∪ b ⊆ u or not c ⊆ u or a ∪ b ∪ c ⊆ u","not a ⊆ u or not b ⊆ u or a ∪ b ⊆ u","not a ∪ b ∪ c ⊆ u","not a ⊆ u or a ∪ b ⊆ u","not a ∪ b ⊆ u","a ∪ b ⊆ u"]}
{"goal":"a.subset_eq(v)","proof":["not a ⊆ a ∪ b or not a ∪ b ⊆ a ∪ b ∪ c or a ⊆ a ∪ b ∪ c","a ∪ b ⊆ a ∪ b ∪ c","a ⊆ a ∪ b","not a ⊆ a ∪ b ∪ c","not a ∪ b ⊆ a ∪ b ∪ c or not a ⊆ a ∪ b"]}
{"goal":"b.subset_eq(v)","proof":["not b ⊆ a ∪ b or not a ∪ b ⊆ a ∪ b ∪ c or b ⊆ a ∪ b ∪ c","b ⊆ a ∪ b","a ∪ b ⊆ a ∪ b ∪ c","not b ⊆ a ∪ b ∪ c","not a ∪ b ⊆ a ∪ b ∪ c or not b ⊆ a ∪ b"]}
{"goal":"c.subset_eq(v)","proof":["c ⊆ a ∪ b ∪ c"]}
{"goal":"u.subset_eq(v)","proof":["not a ⊆ v or not b ∪ c ⊆ v or a ∪ (b ∪ c) ⊆ v","not b ⊆ v or not c ⊆ v or b ∪ c ⊆ v","not a ∪ (b ∪ c) ⊆ v","not b ⊆ v or b ∪ c ⊆ v","not b ∪ c ⊆ v","b ∪ c ⊆ v"]}
{"goal":"finite_union_assoc","proof":["a ∪ b ∪ c != u","v != u","not u ⊆ v or not v ⊆ u or v = u"]}
{"goal":"finite_union_idemp","proof":["not s ⊆ s or not s ⊆ s or s ∪ s ⊆ s","not s ∪ s ⊆ s or not s ⊆ s ∪ s or s ∪ s = s","s ⊆ s ∪ s","not s ∪ s ⊆ s","s ⊆ s"]}
{"goal":"finite_union_subset_is_set","proof":["not a ⊆ b or not b ⊆ b or a ∪ b ⊆ b","not a ∪ b ⊆ b or not b ⊆ a ∪ b or a ∪ b = b","b ⊆ a ∪ b","not a ∪ b ⊆ b","b ⊆ b"]}
{"goal":"a.intersection(b).subset_eq(a)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(a ∩ b, a) ∈ a or a ∩ b ⊆ a","s0(a ∩ b, a) ∈ a ∩ b or a ∩ b ⊆ a","not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or s0(a ∩ b, a) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = elem_in_finite_intersection(a, b, s0(a ∩ b, a))","FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = a ∩ b","not elem_in_finite_intersection(a, b, s0(a ∩ b, a)) or s0(a ∩ b, a) ∈ a","finite_constraint[T](elem_in_finite_intersection[T](a, b))","not s0(a ∩ b, a) ∈ a","s0(a ∩ b, a) ∈ a ∩ b","not s0(a ∩ b, a) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) or not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or elem_in_finite_intersection(a, b, s0(a ∩ b, a))","not elem_in_finite_intersection(a, b, s0(a ∩ b, a))","s0(a ∩ b, a) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b))"]}
{"goal":"a.intersection(b).subset_eq(b)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(a ∩ b, b) ∈ b or a ∩ b ⊆ b","s0(a ∩ b, b) ∈ a ∩ b or a ∩ b ⊆ b","not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or s0(a ∩ b, b) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = elem_in_finite_intersection(a, b, s0(a ∩ b, b))","FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = a ∩ b","not elem_in_finite_intersection(a, b, s0(a ∩ b, b)) or s0(a ∩ b, b) ∈ b","finite_constraint[T](elem_in_finite_intersection[T](a, b))","not s0(a ∩ b, b) ∈ b","s0(a ∩ b, b) ∈ a ∩ b","not s0(a ∩ b, b) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) or not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or elem_in_finite_intersection(a, b, s0(a ∩ b, b))","not elem_in_finite_intersection(a, b, s0(a ∩ b, b))","s0(a ∩ b, b) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b))"]}
{"goal":"finite_sets_subset_intersection","proof":["not a ∩ b ⊂ a"]}
{"goal":"finite_set_supset_contains_intersection","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(c, a ∩ b) ∈ a or not s0(c, a ∩ b) ∈ b or elem_in_finite_intersection(a, b, s0(c, a ∩ b))","not c ⊆ a or not s0(c, a ∩ b) ∈ c or s0(c, a ∩ b) ∈ a","not c ⊆ b or not s0(c, a ∩ b) ∈ c or s0(c, a ∩ b) ∈ b","not s0(c, a ∩ b) ∈ a ∩ b or c ⊆ a ∩ b","s0(c, a ∩ b) ∈ c or c ⊆ a ∩ b","not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or s0(c, a ∩ b) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = elem_in_finite_intersection(a, b, s0(c, a ∩ b))","FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = a ∩ b","a ∩ b ⊇ c = c ⊆ a ∩ b","a ⊇ c = c ⊆ a","b ⊇ c = c ⊆ b","not c ⊆ a ∩ b","c ⊆ b","c ⊆ a","finite_constraint[T](elem_in_finite_intersection[T](a, b))","s0(c, a ∩ b) ∈ c","not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or not elem_in_finite_intersection(a, b, s0(c, a ∩ b)) or s0(c, a ∩ b) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b))","not s0(c, a ∩ b) ∈ a ∩ b","not s0(c, a ∩ b) ∈ c or s0(c, a ∩ b) ∈ a","not s0(c, a ∩ b) ∈ c or s0(c, a ∩ b) ∈ b","s0(c, a ∩ b) ∈ b","s0(c, a ∩ b) ∈ a","not s0(c, a ∩ b) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b))","not elem_in_finite_intersection(a, b, s0(c, a ∩ b))"]}
{"goal":"a.contains(x)","proof":["not x ∈ u or not u ⊆ a or x ∈ a","not x ∈ u or not u ⊆ a","not u ⊆ a","a ∩ b ⊆ a"]}
{"goal":"b.contains(x)","proof":["not x ∈ u or not u ⊆ b or x ∈ b","not x ∈ u or not u ⊆ b","not u ⊆ b","a ∩ b ⊆ b"]}
{"goal":"v.contains(x)","proof":["not x ∈ b or not x ∈ a or elem_in_finite_intersection(b, a, x)","not x ∈ b ∩ a","not finite_constraint[T](elem_in_finite_intersection[T](b, a)) or x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](b, a)) = elem_in_finite_intersection(b, a, x)","FiniteSet.new[T](elem_in_finite_intersection[T](b, a)) = b ∩ a","finite_constraint[T](elem_in_finite_intersection[T](b, a))","not finite_constraint[T](elem_in_finite_intersection[T](b, a)) or not elem_in_finite_intersection(b, a, x) or x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](b, a))","not x ∈ b or elem_in_finite_intersection(b, a, x)","elem_in_finite_intersection(b, a, x)","not x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](b, a))"]}
{"goal":"u.subset_eq(v)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: T, x2: FiniteSet[T]) { not x1 ∈ x0 or not x0 ⊆ x2 or x1 ∈ x2 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(u, v) ∈ u or s0(u, v) ∈ v","not s0(u, v) ∈ v or u ⊆ v","not s0(u, v) ∈ v","s0(u, v) ∈ u or u ⊆ v","not s0(u, v) ∈ u","s0(u, v) ∈ u"]}
{"goal":"a.contains(x)","proof":["not x ∈ v or not v ⊆ a or x ∈ a","not x ∈ v or not v ⊆ a","not v ⊆ a","b ∩ a ⊆ a"]}
{"goal":"b.contains(x)","proof":["not x ∈ v or not v ⊆ b or x ∈ b","not x ∈ v or not v ⊆ b","not v ⊆ b","b ∩ a ⊆ b"]}
{"goal":"u.contains(x)","proof":["not x ∈ a or not x ∈ b or elem_in_finite_intersection(a, b, x)","not x ∈ a ∩ b","not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = elem_in_finite_intersection(a, b, x)","FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = a ∩ b","finite_constraint[T](elem_in_finite_intersection[T](a, b))","not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or not elem_in_finite_intersection(a, b, x) or x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b))","not x ∈ a or elem_in_finite_intersection(a, b, x)","elem_in_finite_intersection(a, b, x)","not x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b))"]}
{"goal":"u.superset_eq(v)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: T, x2: FiniteSet[T]) { not x1 ∈ x0 or not x0 ⊆ x2 or x1 ∈ x2 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(v, u) ∈ v or s0(v, u) ∈ u","not s0(v, u) ∈ u or v ⊆ u","s0(v, u) ∈ v or v ⊆ u","u ⊇ v = v ⊆ u","not v ⊆ u","s0(v, u) ∈ v","not s0(v, u) ∈ u","s0(v, u) ∈ u"]}
{"goal":"finite_intersection_comm","proof":["a ∩ b != v","v != u","not v ⊆ u or not u ⊆ v or v = u","not v ⊆ u","u ⊇ v = v ⊆ u"]}
{"goal":"a.superset_eq(u)","proof":["a ⊇ u = u ⊆ a","not u ⊆ a","a ∩ (b ∩ c) ⊆ a"]}
{"goal":"b.superset_eq(b.intersection(c))","proof":["c ∩ b = b ∩ c","b ⊇ b ∩ c = b ∩ c ⊆ b","not b ∩ c ⊆ b","c ∩ b ⊆ b"]}
{"goal":"b.superset_eq(u)","proof":["not a ∩ (b ∩ c) ⊆ b ∩ c or not b ∩ c ⊆ b or a ∩ (b ∩ c) ⊆ b","b ⊇ a ∩ (b ∩ c) = a ∩ (b ∩ c) ⊆ b","b ⊇ b ∩ c = b ∩ c ⊆ b","b ∩ c ⊆ b","a ∩ (b ∩ c) ⊆ b ∩ c","not b ⊇ a ∩ (b ∩ c)","not a ∩ (b ∩ c) ⊆ b","not a ∩ (b ∩ c) ⊆ b ∩ c or a ∩ (b ∩ c) ⊆ b"]}
{"goal":"c.superset_eq(b.intersection(c))","proof":["c ⊇ b ∩ c = b ∩ c ⊆ c","not b ∩ c ⊆ c","b ∩ c ⊆ c"]}
{"goal":"c.superset_eq(u)","proof":["not a ∩ (b ∩ c) ⊆ b ∩ c or not b ∩ c ⊆ c or a ∩ (b ∩ c) ⊆ c","c ⊇ a ∩ (b ∩ c) = a ∩ (b ∩ c) ⊆ c","c ⊇ b ∩ c = b ∩ c ⊆ c","b ∩ c ⊆ c","a ∩ (b ∩ c) ⊆ b ∩ c","not c ⊇ a ∩ (b ∩ c)","not a ∩ (b ∩ c) ⊆ c","not a ∩ (b ∩ c) ⊆ b ∩ c or a ∩ (b ∩ c) ⊆ c"]}
{"goal":"v.superset_eq(u)","proof":["not a ∩ b ⊇ u or not c ⊇ u or a ∩ b ∩ c ⊇ u","not a ⊇ u or not b ⊇ u or a ∩ b ⊇ u","not a ∩ b ∩ c ⊇ u","not a ⊇ u or a ∩ b ⊇ u","not a ∩ b ⊇ u","a ∩ b ⊇ u"]}
{"goal":"a.superset_eq(a.intersection(b))","proof":["b ∩ a = a ∩ b","a ⊇ a ∩ b = a ∩ b ⊆ a","not a ∩ b ⊆ a","b ∩ a ⊆ a"]}
{"goal":"a.superset_eq(v)","proof":["not c ∩ (a ∩ b) ⊆ a ∩ b or not a ∩ b ⊆ a or c ∩ (a ∩ b) ⊆ a","a ∩ b ∩ c = c ∩ (a ∩ b)","a ⊇ a ∩ b = a ∩ b ⊆ a","a ⊇ c ∩ (a ∩ b) = c ∩ (a ∩ b) ⊆ a","a ∩ b ⊆ a","c ∩ (a ∩ b) ⊆ a ∩ b","not a ⊇ a ∩ b ∩ c","not a ⊇ c ∩ (a ∩ b)","not c ∩ (a ∩ b) ⊆ a","not c ∩ (a ∩ b) ⊆ a ∩ b or c ∩ (a ∩ b) ⊆ a"]}
{"goal":"b.superset_eq(a.intersection(b))","proof":["b ⊇ a ∩ b = a ∩ b ⊆ b","not a ∩ b ⊆ b","a ∩ b ⊆ b"]}
{"goal":"b.superset_eq(v)","proof":["not c ∩ (a ∩ b) ⊆ a ∩ b or not a ∩ b ⊆ b or c ∩ (a ∩ b) ⊆ b","a ∩ b ∩ c = c ∩ (a ∩ b)","b ⊇ a ∩ b = a ∩ b ⊆ b","b ⊇ c ∩ (a ∩ b) = c ∩ (a ∩ b) ⊆ b","a ∩ b ⊆ b","c ∩ (a ∩ b) ⊆ a ∩ b","not b ⊇ a ∩ b ∩ c","not b ⊇ c ∩ (a ∩ b)","not c ∩ (a ∩ b) ⊆ b","not c ∩ (a ∩ b) ⊆ a ∩ b or c ∩ (a ∩ b) ⊆ b"]}
{"goal":"c.superset_eq(v)","proof":["c ⊇ v = v ⊆ c","not v ⊆ c","a ∩ b ∩ c ⊆ c"]}
{"goal":"u.superset_eq(v)","proof":["not a ⊇ v or not b ∩ c ⊇ v or a ∩ (b ∩ c) ⊇ v","not b ⊇ v or not c ⊇ v or b ∩ c ⊇ v","not a ∩ (b ∩ c) ⊇ v","not b ⊇ v or b ∩ c ⊇ v","not b ∩ c ⊇ v","b ∩ c ⊇ v"]}
{"goal":"finite_intersection_assoc","proof":["a ∩ b ∩ c != u","v != u","not v ⊆ u or not u ⊆ v or v = u","u ⊇ v = v ⊆ u","v ⊇ u = u ⊆ v","u ⊆ v","v ⊆ u","not v ⊆ u"]}
{"goal":"finite_intersection_idemp","proof":["not s ⊇ s or not s ⊇ s or s ∩ s ⊇ s","not s ∩ s ⊆ s or not s ⊆ s ∩ s or s ∩ s = s","s ∩ s ⊇ s = s ⊆ s ∩ s","s ⊇ s = s ⊆ s","s ∩ s ⊆ s","not s ⊆ s ∩ s","s ⊆ s","not s ⊆ s or s ⊇ s","not s ∩ s ⊇ s","not s ⊇ s"]}
{"goal":"finite_intersection_with_superset_is_self","proof":["not s ⊇ s or not t ⊇ s or s ∩ t ⊇ s","not s ∩ t ⊆ s or not s ⊆ s ∩ t or s ∩ t = s","s ∩ t ⊇ s = s ⊆ s ∩ t","s ⊇ s = s ⊆ s","t ⊇ s = s ⊆ t","s ∩ t ⊆ s","not s ⊆ s ∩ t","s ⊆ s","t ⊇ s","not s ⊆ s or s ⊇ s","not s ∩ t ⊇ s","not s ⊇ s"]}
{"goal":"finite_difference_subset","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(a ∖ b, a) ∈ a or a ∖ b ⊆ a","s0(a ∖ b, a) ∈ a ∖ b or a ∖ b ⊆ a","not finite_constraint[T](elem_in_finite_difference[T](a, b)) or s0(a ∖ b, a) ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b)) = elem_in_finite_difference(a, b, s0(a ∖ b, a))","FiniteSet.new[T](elem_in_finite_difference[T](a, b)) = a ∖ b","not elem_in_finite_difference(a, b, s0(a ∖ b, a)) or s0(a ∖ b, a) ∈ a","finite_constraint[T](elem_in_finite_difference[T](a, b))","not s0(a ∖ b, a) ∈ a","s0(a ∖ b, a) ∈ a ∖ b","not s0(a ∖ b, a) ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b)) or not finite_constraint[T](elem_in_finite_difference[T](a, b)) or elem_in_finite_difference(a, b, s0(a ∖ b, a))","not elem_in_finite_difference(a, b, s0(a ∖ b, a))","s0(a ∖ b, a) ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b))"]}
{"goal":"finite_difference_contains_imp_not_contains","proof":["not finite_constraint[T](elem_in_finite_difference[T](a, b)) or x ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b)) = elem_in_finite_difference(a, b, x)","FiniteSet.new[T](elem_in_finite_difference[T](a, b)) = a ∖ b","not elem_in_finite_difference(a, b, x) or not x ∈ b","not elem_in_finite_difference(a, b, x)","finite_constraint[T](elem_in_finite_difference[T](a, b))","not x ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b)) or not finite_constraint[T](elem_in_finite_difference[T](a, b)) or elem_in_finite_difference(a, b, x)","x ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b))"]}
{"goal":"finite_difference_contains_imp_contains","proof":["not a ∖ b ⊆ a or not x ∈ a ∖ b or x ∈ a","not x ∈ a ∖ b or not a ∖ b ⊆ a","a ∖ b ⊆ a"]}
{"goal":"finite_difference_contains_of_membership","proof":["not x ∈ a or elem_in_finite_difference(a, b, x) or x ∈ b","not finite_constraint[T](elem_in_finite_difference[T](a, b)) or x ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b)) = elem_in_finite_difference(a, b, x)","FiniteSet.new[T](elem_in_finite_difference[T](a, b)) = a ∖ b","not x ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b))","finite_constraint[T](elem_in_finite_difference[T](a, b))","not finite_constraint[T](elem_in_finite_difference[T](a, b)) or not elem_in_finite_difference(a, b, x) or x ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b))","not x ∈ a or elem_in_finite_difference(a, b, x)","not elem_in_finite_difference(a, b, x)","elem_in_finite_difference(a, b, x)"]}
{"goal":"finite_difference_of_self_is_empty","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: T, x2: FiniteSet[T]) { not x1 ∈ x0 or not x0 ⊆ x2 or x1 ∈ x2 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(a ∖ a, FiniteSet.empty[T]) ∈ a ∖ a or s0(a ∖ a, FiniteSet.empty[T]) ∈ a","not s0(a ∖ a, FiniteSet.empty[T]) ∈ a ∖ a or not s0(a ∖ a, FiniteSet.empty[T]) ∈ a","not FiniteSet.empty[T] ⊆ a ∖ a or not a ∖ a ⊆ FiniteSet.empty[T] or a ∖ a = FiniteSet.empty[T]","s0(a ∖ a, FiniteSet.empty[T]) ∈ a ∖ a or a ∖ a ⊆ FiniteSet.empty[T]","FiniteSet.empty[T] ⊆ a ∖ a","not a ∖ a ⊆ FiniteSet.empty[T]","s0(a ∖ a, FiniteSet.empty[T]) ∈ a ∖ a","s0(a ∖ a, FiniteSet.empty[T]) ∈ a","not s0(a ∖ a, FiniteSet.empty[T]) ∈ a"]}
{"goal":"s.contains(x) implies v.contains(x)","proof":["not x ∈ s or x ∈ s ∖ t or x ∈ t","not x ∈ s ∖ t or not s ∖ t ⊆ t ∪ (s ∖ t) or x ∈ t ∪ (s ∖ t)","not x ∈ t or not t ⊆ t ∪ (s ∖ t) or x ∈ t ∪ (s ∖ t)","s ∖ t ⊆ t ∪ (s ∖ t)","t ⊆ t ∪ (s ∖ t)","not x ∈ t ∪ (s ∖ t)","x ∈ s ∖ t or x ∈ t","not s ∖ t ⊆ t ∪ (s ∖ t) or not x ∈ s ∖ t","not t ⊆ t ∪ (s ∖ t) or not x ∈ t","not x ∈ t","not x ∈ s ∖ t","x ∈ s ∖ t"]}
{"goal":"s.subset_eq(v)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: T, x2: FiniteSet[T]) { not x1 ∈ x0 or not x0 ⊆ x2 or x1 ∈ x2 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(s, v) ∈ s or s0(s, v) ∈ v","not s0(s, v) ∈ v or s ⊆ v","not s0(s, v) ∈ v","s0(s, v) ∈ s or s ⊆ v","not s0(s, v) ∈ s","s0(s, v) ∈ s"]}
{"goal":"t.subset_eq(v)","proof":["t ⊆ t ∪ (s ∖ t)"]}
{"goal":"u.subset_eq(v)","proof":["not s ⊆ v or not t ⊆ v or s ∪ t ⊆ v","not s ∪ t ⊆ v"]}
{"goal":"s.contains(x)","proof":["not x ∈ s ∖ t or x ∈ s"]}
{"goal":"u.contains(x)","proof":["not x ∈ s or not s ⊆ u or x ∈ u","not x ∈ s or not s ⊆ u","not s ⊆ u","s ⊆ s ∪ t"]}
{"goal":"s.difference(t).subset_eq(u)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: T, x2: FiniteSet[T]) { not x1 ∈ x0 or not x0 ⊆ x2 or x1 ∈ x2 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(s ∖ t, u) ∈ s ∖ t or s0(s ∖ t, u) ∈ u","not s0(s ∖ t, u) ∈ u or s ∖ t ⊆ u","s0(s ∖ t, u) ∈ s ∖ t or s ∖ t ⊆ u","not s0(s ∖ t, u) ∈ u","s0(s ∖ t, u) ∈ s ∖ t","not s0(s ∖ t, u) ∈ s ∖ t"]}
{"goal":"t.subset_eq(u)","proof":["not t ⊆ s ∪ t","t ⊆ s ∪ t"]}
{"goal":"union_with_difference_decomp","proof":["t ∪ (s ∖ t) != u","not t ⊆ u or not s ∖ t ⊆ u or t ∪ (s ∖ t) ⊆ u","not t ∪ (s ∖ t) ⊆ u or not u ⊆ t ∪ (s ∖ t) or t ∪ (s ∖ t) = u","u ⊆ t ∪ (s ∖ t)","not t ∪ (s ∖ t) ⊆ u"]}
{"goal":"t.contains(x) implies v.contains(x)","proof":["not x ∈ t or not t ⊆ s ∪ t or x ∈ s ∪ t","s ∪ (t ∖ s) = t ∪ s","t ∪ s = s ∪ t","t ⊆ s ∪ t","not x ∈ s ∪ (t ∖ s)","not x ∈ t ∪ s","not x ∈ s ∪ t","not t ⊆ s ∪ t or x ∈ s ∪ t"]}
{"goal":"t.subset_eq(v)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: T, x2: FiniteSet[T]) { not x1 ∈ x0 or not x0 ⊆ x2 or x1 ∈ x2 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(t, v) ∈ t or s0(t, v) ∈ v","not s0(t, v) ∈ v or t ⊆ v","not s0(t, v) ∈ v","s0(t, v) ∈ t or t ⊆ v","not s0(t, v) ∈ t","s0(t, v) ∈ t"]}
{"goal":"s.subset_eq(v)","proof":["s ⊆ s ∪ (t ∖ s)"]}
{"goal":"u.subset_eq(v)","proof":["not s ⊆ v or not t ⊆ v or s ∪ t ⊆ v","not s ∪ t ⊆ v"]}
{"goal":"t.contains(x)","proof":["not x ∈ t ∖ s or x ∈ t"]}
{"goal":"u.contains(x)","proof":["not x ∈ t or not t ⊆ u or x ∈ u","s ∪ (t ∖ s) = t ∪ s","t ∪ s = s ∪ t","not x ∈ t or not t ⊆ u","not t ⊆ u"]}
{"goal":"t.difference(s).subset_eq(u)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: T, x2: FiniteSet[T]) { not x1 ∈ x0 or not x0 ⊆ x2 or x1 ∈ x2 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(t ∖ s, u) ∈ t ∖ s or s0(t ∖ s, u) ∈ u","not s0(t ∖ s, u) ∈ u or t ∖ s ⊆ u","s0(t ∖ s, u) ∈ t ∖ s or t ∖ s ⊆ u","not s0(t ∖ s, u) ∈ u","s0(t ∖ s, u) ∈ t ∖ s","not s0(t ∖ s, u) ∈ t ∖ s"]}
{"goal":"s.subset_eq(u)","proof":["s ∪ (t ∖ s) = t ∪ s","t ∪ s = s ∪ t"]}
{"goal":"union_with_difference_decomp_rev","proof":["s ∪ (t ∖ s) = t ∪ s","t ∪ s != s ∪ t","t ∪ s = s ∪ t"]}
{"goal":"t.contains(x) implies v.contains(x)","proof":["not x ∈ t or x ∈ t ∖ s ∩ t or x ∈ s ∩ t","not x ∈ s or not s ⊆ s ∪ (t ∖ s ∩ t) or x ∈ s ∪ (t ∖ s ∩ t)","not x ∈ s ∩ t or not s ∩ t ⊆ s or x ∈ s","not x ∈ t ∖ s ∩ t or not t ∖ s ∩ t ⊆ s ∪ (t ∖ s ∩ t) or x ∈ s ∪ (t ∖ s ∩ t)","t ∖ s ∩ t ⊆ s ∪ (t ∖ s ∩ t)","s ⊆ s ∪ (t ∖ s ∩ t)","s ∩ t ⊆ s","not x ∈ s ∪ (t ∖ s ∩ t)","not s ⊆ s ∪ (t ∖ s ∩ t) or not x ∈ s","not t ∖ s ∩ t ⊆ s ∪ (t ∖ s ∩ t) or not x ∈ t ∖ s ∩ t","not x ∈ s","not x ∈ t ∖ s ∩ t","x ∈ s ∩ t","not x ∈ s ∩ t or not s ∩ t ⊆ s"]}
{"goal":"t.subset_eq(v)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: T, x2: FiniteSet[T]) { not x1 ∈ x0 or not x0 ⊆ x2 or x1 ∈ x2 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(t, v) ∈ t or s0(t, v) ∈ v","not s0(t, v) ∈ v or t ⊆ v","not s0(t, v) ∈ v","s0(t, v) ∈ t or t ⊆ v","not s0(t, v) ∈ t","s0(t, v) ∈ t"]}
{"goal":"s.subset_eq(v)","proof":["s ⊆ s ∪ (t ∖ s ∩ t)"]}
{"goal":"u.subset_eq(v)","proof":["not s ⊆ v or not t ⊆ v or s ∪ t ⊆ v","not s ∪ t ⊆ v"]}
{"goal":"t.contains(x)","proof":["not x ∈ t ∖ s ∩ t or x ∈ t"]}
{"goal":"u.contains(x)","proof":["not x ∈ t or not t ⊆ u or x ∈ u","not x ∈ t or not t ⊆ u","not t ⊆ u","t ⊆ s ∪ t"]}
{"goal":"t.difference(s.intersection(t)).subset_eq(u)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: T, x2: FiniteSet[T]) { not x1 ∈ x0 or not x0 ⊆ x2 or x1 ∈ x2 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(t ∖ s ∩ t, u) ∈ t ∖ s ∩ t or s0(t ∖ s ∩ t, u) ∈ u","not s0(t ∖ s ∩ t, u) ∈ u or t ∖ s ∩ t ⊆ u","s0(t ∖ s ∩ t, u) ∈ t ∖ s ∩ t or t ∖ s ∩ t ⊆ u","not s0(t ∖ s ∩ t, u) ∈ u","s0(t ∖ s ∩ t, u) ∈ t ∖ s ∩ t","not s0(t ∖ s ∩ t, u) ∈ t ∖ s ∩ t"]}
{"goal":"s.subset_eq(u)","proof":["not s ⊆ s ∪ t","t ∪ s = s ∪ t","s ⊆ t ∪ s"]}
{"goal":"union_with_difference_decomp_inter","proof":["s ∪ t != v","v != u","not s ⊆ u or not t ∖ s ∩ t ⊆ u or s ∪ (t ∖ s ∩ t) ⊆ u","not v ⊆ u or not u ⊆ v or v = u","not v ⊆ u","not t ∖ s ∩ t ⊆ u or s ∪ (t ∖ s ∩ t) ⊆ u","not s ∪ (t ∖ s ∩ t) ⊆ u","s ∪ (t ∖ s ∩ t) ⊆ u"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { s.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s2: List[T] -> T satisfy { forall(x6: List[T]) { s2(x6) ∈ s } and forall(x7: List[T]) { not s2(x7) ∈ x7 } }","not s2(s0(s.contains)) ∈ s0(s.contains)","s2(s0(s.contains)) ∈ s","not finite_constraint[T](s.contains) or not s2(s0(s.contains)) ∈ s or s2(s0(s.contains)) ∈ s0(s.contains)","not s2(s0(s.contains)) ∈ s or not finite_constraint[T](s.contains)","finite_constraint[T](s.contains)","not s2(s0(s.contains)) ∈ s"]}
{"goal":"cardinality_always_exists","proof":["let s0: List[T] satisfy { forall(x0: T) { not x0 ∈ s or x0 ∈ s0 } }","not s.cardinality_is(s0.filter(s.contains).unique.length)","let (s1: (FiniteSet[T], Nat) -> List[T], s2: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x1: FiniteSet[T], x2: T, x3: Nat) { not x2 ∈ x1 or not x1.cardinality_is(x3) or x2 ∈ s1(x1, x3) } and forall(x4: FiniteSet[T], x5: Nat) { not x4.cardinality_is(x5) or s1(x4, x5).filter(x4.contains).unique.length = x5 } and forall(x6: List[T], x7: FiniteSet[T], x8: Nat) { x6.filter(x7.contains).unique.length != x8 or s2(x7, x8, x6) ∈ x7 or x7.cardinality_is(x8) } and forall(x9: List[T], x10: FiniteSet[T], x11: Nat) { x9.filter(x10.contains).unique.length != x11 or not s2(x10, x11, x9) ∈ x9 or x10.cardinality_is(x11) } }","not s2(s, s0.filter(s.contains).unique.length, s0) ∈ s or s2(s, s0.filter(s.contains).unique.length, s0) ∈ s0","s0.filter(s.contains).unique.length != s0.filter(s.contains).unique.length or not s2(s, s0.filter(s.contains).unique.length, s0) ∈ s0 or s.cardinality_is(s0.filter(s.contains).unique.length)","s0.filter(s.contains).unique.length != s0.filter(s.contains).unique.length or s2(s, s0.filter(s.contains).unique.length, s0) ∈ s or s.cardinality_is(s0.filter(s.contains).unique.length)","s2(s, s0.filter(s.contains).unique.length, s0) ∈ s or s.cardinality_is(s0.filter(s.contains).unique.length)","not s2(s, s0.filter(s.contains).unique.length, s0) ∈ s0 or s.cardinality_is(s0.filter(s.contains).unique.length)","not s2(s, s0.filter(s.contains).unique.length, s0) ∈ s0","s2(s, s0.filter(s.contains).unique.length, s0) ∈ s"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { a.contains(x0) implies k0.contains(x0) } and k0.length <= n1 }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_at_most(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_at_most(x4) or s0(x3, x4).length <= x4 } and forall(x5: List[T], x6: Nat, x7: FiniteSet[T]) { not x5.length <= x6 or s1(x7, x6, x5) ∈ x7 or x7.cardinality_at_most(x6) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { not s1(x9, x10, x8) ∈ x8 or not x8.length <= x10 or x9.cardinality_at_most(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { not x11.length <= n1 or s2(x11) ∈ a } and forall(x12: List[T]) { not x12.length <= n1 or not s2(x12) ∈ x12 } }","not s0(a, n1).length <= n1 or not s2(s0(a, n1)) ∈ s0(a, n1)","not s0(a, n1).length <= n1 or s2(s0(a, n1)) ∈ a","not a.cardinality_at_most(n1) or not s2(s0(a, n1)) ∈ a or s2(s0(a, n1)) ∈ s0(a, n1)","not a.cardinality_at_most(n1) or s0(a, n1).length <= n1","s0(a, n1).length <= n1","not s2(s0(a, n1)) ∈ a or s2(s0(a, n1)) ∈ s0(a, n1)","s2(s0(a, n1)) ∈ a","not s2(s0(a, n1)) ∈ s0(a, n1)","s2(s0(a, n1)) ∈ s0(a, n1)"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { b.contains(x0) implies k0.contains(x0) } and k0.length <= n2 }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_at_most(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_at_most(x4) or s0(x3, x4).length <= x4 } and forall(x5: List[T], x6: Nat, x7: FiniteSet[T]) { not x5.length <= x6 or s1(x7, x6, x5) ∈ x7 or x7.cardinality_at_most(x6) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { not s1(x9, x10, x8) ∈ x8 or not x8.length <= x10 or x9.cardinality_at_most(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { not x11.length <= n2 or s2(x11) ∈ b } and forall(x12: List[T]) { not x12.length <= n2 or not s2(x12) ∈ x12 } }","not s0(b, n2).length <= n2 or not s2(s0(b, n2)) ∈ s0(b, n2)","not s0(b, n2).length <= n2 or s2(s0(b, n2)) ∈ b","not b.cardinality_at_most(n2) or not s2(s0(b, n2)) ∈ b or s2(s0(b, n2)) ∈ s0(b, n2)","not b.cardinality_at_most(n2) or s0(b, n2).length <= n2","s0(b, n2).length <= n2","not s2(s0(b, n2)) ∈ b or s2(s0(b, n2)) ∈ s0(b, n2)","s2(s0(b, n2)) ∈ b","not s2(s0(b, n2)) ∈ s0(b, n2)","s2(s0(b, n2)) ∈ s0(b, n2)"]}
{"goal":"a.union(b).contains(x) implies superset_union.contains(x)","proof":["not x ∈ b or x ∈ superset_b","not x ∈ a or x ∈ superset_a","not elem_in_finite_union(a, b, x) or x ∈ a or x ∈ b","not x ∈ superset_a + superset_b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) = elem_in_finite_union(a, b, x)","not x ∈ superset_b or x ∈ superset_a + superset_b","not x ∈ superset_a or x ∈ superset_a + superset_b","FiniteSet.new[T](elem_in_finite_union[T](a, b)) = a ∪ b","finite_constraint[T](elem_in_finite_union[T](a, b))","not x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) or not finite_constraint[T](elem_in_finite_union[T](a, b)) or elem_in_finite_union(a, b, x)","x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))","not x ∈ superset_a","not x ∈ superset_b","not x ∈ b","not x ∈ a","elem_in_finite_union(a, b, x)"]}
{"goal":"superset_union.length = superset_a.length + superset_b.length","proof":["superset_a.length + superset_b.length = (superset_a + superset_b).length"]}
{"goal":"superset_union.length <= n1 + n2","proof":["not superset_a.length <= n1 or not superset_b.length <= n2 or superset_a.length + superset_b.length <= n1 + n2","not superset_a.length + superset_b.length <= n1 + n2"]}
{"goal":"union_is_at_most_length","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_at_most(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_at_most(x4) or s0(x3, x4).length <= x4 } and forall(x5: List[T], x6: Nat, x7: FiniteSet[T]) { not x5.length <= x6 or s1(x7, x6, x5) ∈ x7 or x7.cardinality_at_most(x6) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { not s1(x9, x10, x8) ∈ x8 or not x8.length <= x10 or x9.cardinality_at_most(x10) } }","not s1(a ∪ b, n1 + n2, superset_union) ∈ a ∪ b or s1(a ∪ b, n1 + n2, superset_union) ∈ superset_union","not s1(a ∪ b, n1 + n2, superset_union) ∈ superset_union or not superset_union.length <= n1 + n2 or (a ∪ b).cardinality_at_most(n1 + n2)","not superset_union.length <= n1 + n2 or s1(a ∪ b, n1 + n2, superset_union) ∈ a ∪ b or (a ∪ b).cardinality_at_most(n1 + n2)","not s1(a ∪ b, n1 + n2, superset_union) ∈ superset_union or not superset_union.length <= n1 + n2","not superset_union.length <= n1 + n2 or s1(a ∪ b, n1 + n2, superset_union) ∈ a ∪ b","not s1(a ∪ b, n1 + n2, superset_union) ∈ superset_union","s1(a ∪ b, n1 + n2, superset_union) ∈ a ∪ b","not s1(a ∪ b, n1 + n2, superset_union) ∈ a ∪ b"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { a.contains(x0) implies k0.contains(x0) } and k0.filter(a.contains).unique.length = n1 }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_is(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_is(x4) or s0(x3, x4).filter(x3.contains).unique.length = x4 } and forall(x5: List[T], x6: FiniteSet[T], x7: Nat) { x5.filter(x6.contains).unique.length != x7 or s1(x6, x7, x5) ∈ x6 or x6.cardinality_is(x7) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { x8.filter(x9.contains).unique.length != x10 or not s1(x9, x10, x8) ∈ x8 or x9.cardinality_is(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { x11.filter(a.contains).unique.length != n1 or s2(x11) ∈ a } and forall(x12: List[T]) { x12.filter(a.contains).unique.length != n1 or not s2(x12) ∈ x12 } }","s0(a, n1).filter(a.contains).unique.length != n1 or not s2(s0(a, n1)) ∈ s0(a, n1)","s0(a, n1).filter(a.contains).unique.length != n1 or s2(s0(a, n1)) ∈ a","not a.cardinality_is(n1) or s0(a, n1).filter(a.contains).unique.length = n1","not a.cardinality_is(n1) or not s2(s0(a, n1)) ∈ a or s2(s0(a, n1)) ∈ s0(a, n1)","not s2(s0(a, n1)) ∈ a or s2(s0(a, n1)) ∈ s0(a, n1)","s0(a, n1).filter(a.contains).unique.length = n1","s2(s0(a, n1)) ∈ a","not s2(s0(a, n1)) ∈ s0(a, n1)","s2(s0(a, n1)) ∈ s0(a, n1)"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { b.contains(x0) implies k0.contains(x0) } and k0.filter(b.contains).unique.length = n2 }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_is(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_is(x4) or s0(x3, x4).filter(x3.contains).unique.length = x4 } and forall(x5: List[T], x6: FiniteSet[T], x7: Nat) { x5.filter(x6.contains).unique.length != x7 or s1(x6, x7, x5) ∈ x6 or x6.cardinality_is(x7) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { x8.filter(x9.contains).unique.length != x10 or not s1(x9, x10, x8) ∈ x8 or x9.cardinality_is(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { x11.filter(b.contains).unique.length != n2 or s2(x11) ∈ b } and forall(x12: List[T]) { x12.filter(b.contains).unique.length != n2 or not s2(x12) ∈ x12 } }","s0(b, n2).filter(b.contains).unique.length != n2 or not s2(s0(b, n2)) ∈ s0(b, n2)","s0(b, n2).filter(b.contains).unique.length != n2 or s2(s0(b, n2)) ∈ b","not b.cardinality_is(n2) or s0(b, n2).filter(b.contains).unique.length = n2","not b.cardinality_is(n2) or not s2(s0(b, n2)) ∈ b or s2(s0(b, n2)) ∈ s0(b, n2)","not s2(s0(b, n2)) ∈ b or s2(s0(b, n2)) ∈ s0(b, n2)","s0(b, n2).filter(b.contains).unique.length = n2","s2(s0(b, n2)) ∈ b","not s2(s0(b, n2)) ∈ s0(b, n2)","s2(s0(b, n2)) ∈ s0(b, n2)"]}
{"goal":"list_union.length = n1 + n2","proof":["f_list_a.length + f_list_b.length = (f_list_a + f_list_b).length"]}
{"goal":"f_list_a.contains(x) implies list_union.contains(x)","proof":["not x ∈ f_list_a + f_list_b","not x ∈ f_list_a or x ∈ f_list_a + f_list_b"]}
{"goal":"a.contains(x) implies list_union.contains(x)","proof":["not x ∈ a or x ∈ list_a","not x ∈ list_a or not x ∈ a or x ∈ list_a.filter(a.contains)","x ∈ list_a.filter(a.contains).unique = x ∈ list_a.filter(a.contains)","not x ∈ list_a.filter(a.contains).unique","x ∈ list_a","not x ∈ list_a.filter(a.contains)"]}
{"goal":"f_list_b.contains(x) implies list_union.contains(x)","proof":["not x ∈ f_list_a + f_list_b","not x ∈ f_list_b or x ∈ f_list_a + f_list_b"]}
{"goal":"b.contains(x) implies list_union.contains(x)","proof":["not x ∈ b or x ∈ list_b","not x ∈ list_b or not x ∈ b or x ∈ list_b.filter(b.contains)","x ∈ list_b.filter(b.contains).unique = x ∈ list_b.filter(b.contains)","not x ∈ list_b.filter(b.contains).unique","x ∈ list_b","not x ∈ list_b.filter(b.contains)"]}
{"goal":"a.union(b).contains(x) implies list_union.contains(x)","proof":["not elem_in_finite_union(a, b, x) or x ∈ a or x ∈ b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) = elem_in_finite_union(a, b, x)","FiniteSet.new[T](elem_in_finite_union[T](a, b)) = a ∪ b","finite_constraint[T](elem_in_finite_union[T](a, b))","not elem_in_finite_union(a, b, x) or x ∈ a","not elem_in_finite_union(a, b, x)","not x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) or not finite_constraint[T](elem_in_finite_union[T](a, b)) or elem_in_finite_union(a, b, x)","x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))"]}
{"goal":"not b.contains(x)","proof":["not a.is_disjoint(b) or not x ∈ a or not x ∈ b","not a.is_disjoint(b) or not x ∈ a"]}
{"goal":"a.union(b).contains(x) = list_union.contains(x)","proof":["not x ∈ a ∪ b or x ∈ list_union","not a ⊆ a ∪ FiniteSet.new[T](b.contains) or not x ∈ a or x ∈ a ∪ FiniteSet.new[T](b.contains)","not a ⊆ a ∪ b or not x ∈ a or x ∈ a ∪ b","a ⊆ a ∪ FiniteSet.new[T](b.contains)","a ⊆ a ∪ b","FiniteSet.new[T](b.contains) = b","x ∈ a ∪ FiniteSet.new[T](b.contains) != x ∈ list_union","not a ⊆ a ∪ FiniteSet.new[T](b.contains) or x ∈ a ∪ FiniteSet.new[T](b.contains)","not a ⊆ a ∪ b or x ∈ a ∪ b","x ∈ a ∪ FiniteSet.new[T](b.contains)","x ∈ a ∪ b","not x ∈ list_union","x ∈ list_union"]}
{"goal":"not a.contains(x)","proof":[]}
{"goal":"list_union.contains(x) implies b.contains(x)","proof":[]}
{"goal":"a.union(b).contains(x) = list_union.contains(x)","proof":["not x ∈ a ∪ b or x ∈ list_union","x ∈ a ∪ b or x ∈ list_union","not b ⊆ b ∪ a or not x ∈ b or x ∈ b ∪ a","b ∪ a = a ∪ b","b ⊆ b ∪ a","x ∈ b ∪ a != x ∈ list_union","not b ⊆ b ∪ a or x ∈ b ∪ a","x ∈ b ∪ a","not x ∈ list_union","x ∈ a ∪ b","not x ∈ a ∪ b"]}
{"goal":"not a.union(b).contains(x)","proof":["not elem_in_finite_union(a, b, x) or x ∈ a or x ∈ b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) = elem_in_finite_union(a, b, x)","FiniteSet.new[T](elem_in_finite_union[T](a, b)) = a ∪ b","x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))","finite_constraint[T](elem_in_finite_union[T](a, b))","not x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) or not finite_constraint[T](elem_in_finite_union[T](a, b)) or elem_in_finite_union(a, b, x)","not elem_in_finite_union(a, b, x) or x ∈ a","elem_in_finite_union(a, b, x)","not elem_in_finite_union(a, b, x)"]}
{"goal":"not f_list_a.contains(x)","proof":["not x ∈ list_a.filter(a.contains) or x ∈ a","x ∈ list_a.filter(a.contains).unique = x ∈ list_a.filter(a.contains)","x ∈ list_a.filter(a.contains).unique","x ∈ list_a.filter(a.contains)"]}
{"goal":"not f_list_b.contains(x)","proof":["not x ∈ list_b.filter(b.contains) or x ∈ b","x ∈ list_b.filter(b.contains).unique = x ∈ list_b.filter(b.contains)","x ∈ list_b.filter(b.contains).unique","x ∈ list_b.filter(b.contains)"]}
{"goal":"a.union(b).contains(x) = list_union.contains(x)","proof":["x ∈ list_union","not x ∈ f_list_a + f_list_b or x ∈ f_list_a or x ∈ f_list_b","x ∈ f_list_a + f_list_b"]}
{"goal":"a.union(b).contains(x) = list_union.contains(x)","proof":["not x ∈ a ∪ b or x ∈ list_union","not a ⊂ a ∪ FiniteSet.new[T](b.contains) or not x ∈ a or x ∈ a ∪ FiniteSet.new[T](b.contains)","not a ⊂ a ∪ b or not x ∈ a or x ∈ a ∪ b","a ⊂ a ∪ FiniteSet.new[T](b.contains)","a ⊂ a ∪ b","FiniteSet.new[T](b.contains) = b","x ∈ a ∪ FiniteSet.new[T](b.contains) != x ∈ list_union","not a ⊂ a ∪ FiniteSet.new[T](b.contains) or x ∈ a ∪ FiniteSet.new[T](b.contains)","not a ⊂ a ∪ b or x ∈ a ∪ b","x ∈ a ∪ FiniteSet.new[T](b.contains)","x ∈ a ∪ b","not x ∈ list_union","x ∈ list_union"]}
{"goal":"a.union(b).contains = list_union.contains","proof":["let s0: T satisfy { s0 ∈ a ∪ b != s0 ∈ list_union }","s0 ∈ a ∪ b = s0 ∈ list_union"]}
{"goal":"f_list_a.is_unique","proof":["not list_a.filter(a.contains).unique.is_unique","list_a.filter(a.contains).unique.unique = list_a.filter(a.contains).unique","list_a.filter(a.contains).unique.unique != list_a.filter(a.contains).unique or list_a.filter(a.contains).unique.is_unique"]}
{"goal":"f_list_b.is_unique","proof":["not list_b.filter(b.contains).unique.is_unique","list_b.filter(b.contains).unique.unique = list_b.filter(b.contains).unique","list_b.filter(b.contains).unique.unique != list_b.filter(b.contains).unique or list_b.filter(b.contains).unique.is_unique"]}
{"goal":"not (f_list_a.contains(x) and f_list_b.contains(x))","proof":["not a.is_disjoint(b) or not x ∈ a or not x ∈ b","not x ∈ list_b.filter(b.contains) or x ∈ b","not x ∈ list_a.filter(a.contains) or x ∈ a","x ∈ list_a.filter(a.contains).unique = x ∈ list_a.filter(a.contains)","x ∈ list_b.filter(b.contains).unique = x ∈ list_b.filter(b.contains)","x ∈ list_a.filter(a.contains).unique","x ∈ list_b.filter(b.contains).unique","x ∈ list_b.filter(b.contains)","x ∈ list_a.filter(a.contains)","not x ∈ b or not x ∈ a","x ∈ a","x ∈ b","not x ∈ b"]}
{"goal":"(f_list_a + f_list_b).is_unique","proof":["let s0: (List[T], List[T]) -> T satisfy { forall(x0: List[T], x1: List[T]) { not x0.is_unique or not x1.is_unique or s0(x0, x1) ∈ x0 or (x0 + x1).is_unique } and forall(x2: List[T], x3: List[T]) { not x2.is_unique or not x3.is_unique or s0(x2, x3) ∈ x3 or (x2 + x3).is_unique } }","not s0(f_list_a, f_list_b) ∈ f_list_b or not s0(f_list_a, f_list_b) ∈ f_list_a","not f_list_a.is_unique or not f_list_b.is_unique or s0(f_list_a, f_list_b) ∈ f_list_b or (f_list_a + f_list_b).is_unique","not f_list_a.is_unique or not f_list_b.is_unique or s0(f_list_a, f_list_b) ∈ f_list_a or (f_list_a + f_list_b).is_unique","s0(f_list_a, f_list_b) ∈ f_list_a","s0(f_list_a, f_list_b) ∈ f_list_b","not s0(f_list_a, f_list_b) ∈ f_list_b"]}
{"goal":"list_union.is_unique","proof":[]}
{"goal":"list_union.filter(a.union(b).contains).unique.length = n1 + n2","proof":["list_union.filter((a ∪ b).contains).unique.length != list_union.length","list_union.filter(list_union.contains).unique.length != list_union.length","list_union.filter(list_union.contains).unique != list_union","list_union.filter(list_union.contains) = list_union","list_union.unique != list_union","not list_union.is_unique or list_union.unique = list_union"]}
{"goal":"disjoint_union_is_length","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_is(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_is(x4) or s0(x3, x4).filter(x3.contains).unique.length = x4 } and forall(x5: List[T], x6: FiniteSet[T], x7: Nat) { x5.filter(x6.contains).unique.length != x7 or s1(x6, x7, x5) ∈ x6 or x6.cardinality_is(x7) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { x8.filter(x9.contains).unique.length != x10 or not s1(x9, x10, x8) ∈ x8 or x9.cardinality_is(x10) } }","s1(a ∪ b, n1 + n2, list_union) ∈ a ∪ b = s1(a ∪ b, n1 + n2, list_union) ∈ list_union","list_union.filter((a ∪ b).contains).unique.length != n1 + n2 or not s1(a ∪ b, n1 + n2, list_union) ∈ list_union or (a ∪ b).cardinality_is(n1 + n2)","list_union.filter((a ∪ b).contains).unique.length != n1 + n2 or s1(a ∪ b, n1 + n2, list_union) ∈ a ∪ b or (a ∪ b).cardinality_is(n1 + n2)","not s1(a ∪ b, n1 + n2, list_union) ∈ list_union","s1(a ∪ b, n1 + n2, list_union) ∈ a ∪ b","not s1(a ∪ b, n1 + n2, list_union) ∈ a ∪ b"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { s.contains(x0) implies k0.contains(x0) } and k0.filter(s.contains).unique.length = n1 }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_is(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_is(x4) or s0(x3, x4).filter(x3.contains).unique.length = x4 } and forall(x5: List[T], x6: FiniteSet[T], x7: Nat) { x5.filter(x6.contains).unique.length != x7 or s1(x6, x7, x5) ∈ x6 or x6.cardinality_is(x7) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { x8.filter(x9.contains).unique.length != x10 or not s1(x9, x10, x8) ∈ x8 or x9.cardinality_is(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { x11.filter(s.contains).unique.length != n1 or s2(x11) ∈ s } and forall(x12: List[T]) { x12.filter(s.contains).unique.length != n1 or not s2(x12) ∈ x12 } }","s0(s, n1).filter(s.contains).unique.length != n1 or not s2(s0(s, n1)) ∈ s0(s, n1)","s0(s, n1).filter(s.contains).unique.length != n1 or s2(s0(s, n1)) ∈ s","not s.cardinality_is(n1) or s0(s, n1).filter(s.contains).unique.length = n1","not s.cardinality_is(n1) or not s2(s0(s, n1)) ∈ s or s2(s0(s, n1)) ∈ s0(s, n1)","not s2(s0(s, n1)) ∈ s or s2(s0(s, n1)) ∈ s0(s, n1)","s0(s, n1).filter(s.contains).unique.length = n1","s2(s0(s, n1)) ∈ s","not s2(s0(s, n1)) ∈ s0(s, n1)","s2(s0(s, n1)) ∈ s0(s, n1)"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { s.contains(x0) implies k0.contains(x0) } and k0.filter(s.contains).unique.length = n2 }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_is(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_is(x4) or s0(x3, x4).filter(x3.contains).unique.length = x4 } and forall(x5: List[T], x6: FiniteSet[T], x7: Nat) { x5.filter(x6.contains).unique.length != x7 or s1(x6, x7, x5) ∈ x6 or x6.cardinality_is(x7) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { x8.filter(x9.contains).unique.length != x10 or not s1(x9, x10, x8) ∈ x8 or x9.cardinality_is(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { x11.filter(s.contains).unique.length != n2 or s2(x11) ∈ s } and forall(x12: List[T]) { x12.filter(s.contains).unique.length != n2 or not s2(x12) ∈ x12 } }","s0(s, n2).filter(s.contains).unique.length != n2 or not s2(s0(s, n2)) ∈ s0(s, n2)","s0(s, n2).filter(s.contains).unique.length != n2 or s2(s0(s, n2)) ∈ s","not s.cardinality_is(n2) or s0(s, n2).filter(s.contains).unique.length = n2","not s.cardinality_is(n2) or not s2(s0(s, n2)) ∈ s or s2(s0(s, n2)) ∈ s0(s, n2)","not s2(s0(s, n2)) ∈ s or s2(s0(s, n2)) ∈ s0(s, n2)","s0(s, n2).filter(s.contains).unique.length = n2","s2(s0(s, n2)) ∈ s","not s2(s0(s, n2)) ∈ s0(s, n2)","s2(s0(s, n2)) ∈ s0(s, n2)"]}
{"goal":"f_list_1.contains(x)","proof":["not x ∈ s or x ∈ list_1","not x ∈ list_1 or not x ∈ s or x ∈ list_1.filter(s.contains)","x ∈ list_1.filter(s.contains).unique = x ∈ list_1.filter(s.contains)","not x ∈ list_1.filter(s.contains).unique","x ∈ list_1","not x ∈ list_1.filter(s.contains)"]}
{"goal":"f_list_2.contains(x)","proof":["not x ∈ s or x ∈ list_2","not x ∈ list_2 or not x ∈ s or x ∈ list_2.filter(s.contains)","x ∈ list_2.filter(s.contains).unique = x ∈ list_2.filter(s.contains)","not x ∈ list_2.filter(s.contains).unique","x ∈ list_2","not x ∈ list_2.filter(s.contains)"]}
{"goal":"f_list_1.contains(x) = f_list_2.contains(x)","proof":["not x ∈ f_list_1"]}
{"goal":"not f_list_1.contains(x)","proof":["not x ∈ list_1.filter(s.contains) or x ∈ s","x ∈ list_1.filter(s.contains).unique = x ∈ list_1.filter(s.contains)","x ∈ list_1.filter(s.contains).unique","x ∈ list_1.filter(s.contains)"]}
{"goal":"not f_list_2.contains(x)","proof":["not x ∈ list_2.filter(s.contains) or x ∈ s","x ∈ list_2.filter(s.contains).unique = x ∈ list_2.filter(s.contains)","x ∈ list_2.filter(s.contains).unique","x ∈ list_2.filter(s.contains)"]}
{"goal":"f_list_1.contains(x) = f_list_2.contains(x)","proof":["x ∈ f_list_1"]}
{"goal":"f_list_1.unique.length <= f_list_2.unique.length","proof":["let s0: (List[T], List[T]) -> T satisfy { forall(x0: List[T], x1: List[T]) { x0.unique.length <= x1.length or s0(x0, x1) ∈ x0 } and forall(x2: List[T], x3: List[T]) { not s0(x3, x2) ∈ x2 or x3.unique.length <= x2.length } }","s0(f_list_1, f_list_2.unique) ∈ f_list_2 = s0(f_list_1, f_list_2.unique) ∈ f_list_1","not s0(f_list_1, f_list_2.unique) ∈ f_list_2.unique or f_list_1.unique.length <= f_list_2.unique.length","f_list_1.unique.length <= f_list_2.unique.length or s0(f_list_1, f_list_2.unique) ∈ f_list_1","s0(f_list_1, f_list_2.unique) ∈ f_list_1","list_2.filter(s.contains).unique.unique = list_2.filter(s.contains).unique","not s0(f_list_1, f_list_2.unique) ∈ f_list_2.unique"]}
{"goal":"f_list_2.unique.length <= f_list_1.unique.length","proof":["let s0: (List[T], List[T]) -> T satisfy { forall(x0: List[T], x1: List[T]) { x0.unique.length <= x1.length or s0(x0, x1) ∈ x0 } and forall(x2: List[T], x3: List[T]) { not s0(x3, x2) ∈ x2 or x3.unique.length <= x2.length } }","s0(f_list_2, f_list_1.unique) ∈ f_list_2 = s0(f_list_2, f_list_1.unique) ∈ f_list_1","not s0(f_list_2, f_list_1.unique) ∈ f_list_1.unique or f_list_2.unique.length <= f_list_1.unique.length","f_list_2.unique.length <= f_list_1.unique.length or s0(f_list_2, f_list_1.unique) ∈ f_list_2","s0(f_list_2, f_list_1.unique) ∈ f_list_2","list_1.filter(s.contains).unique.unique = list_1.filter(s.contains).unique","not s0(f_list_2, f_list_1.unique) ∈ f_list_1.unique"]}
{"goal":"cardinality_is_well_defined","proof":["not f_list_2.unique.length <= f_list_1.unique.length or not f_list_1.unique.length <= f_list_2.unique.length or f_list_2.unique.length = f_list_1.unique.length","list_1.filter(s.contains).unique.unique = list_1.filter(s.contains).unique","list_2.filter(s.contains).unique.unique = list_2.filter(s.contains).unique","f_list_2.unique.length = f_list_1.unique.length"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { s.contains(x0) implies k0.contains(x0) } and k0.filter(s.contains).unique.length = n }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_is(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_is(x4) or s0(x3, x4).filter(x3.contains).unique.length = x4 } and forall(x5: List[T], x6: FiniteSet[T], x7: Nat) { x5.filter(x6.contains).unique.length != x7 or s1(x6, x7, x5) ∈ x6 or x6.cardinality_is(x7) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { x8.filter(x9.contains).unique.length != x10 or not s1(x9, x10, x8) ∈ x8 or x9.cardinality_is(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { x11.filter(s.contains).unique.length != n or s2(x11) ∈ s } and forall(x12: List[T]) { x12.filter(s.contains).unique.length != n or not s2(x12) ∈ x12 } }","s0(s, n).filter(s.contains).unique.length != n or not s2(s0(s, n)) ∈ s0(s, n)","s0(s, n).filter(s.contains).unique.length != n or s2(s0(s, n)) ∈ s","not s.cardinality_is(n) or s0(s, n).filter(s.contains).unique.length = n","not s.cardinality_is(n) or not s2(s0(s, n)) ∈ s or s2(s0(s, n)) ∈ s0(s, n)","not s2(s0(s, n)) ∈ s or s2(s0(s, n)) ∈ s0(s, n)","s0(s, n).filter(s.contains).unique.length = n","s2(s0(s, n)) ∈ s","not s2(s0(s, n)) ∈ s0(s, n)","s2(s0(s, n)) ∈ s0(s, n)"]}
{"goal":"s.contains(x) implies f_containing_list.contains(x)","proof":["not x ∈ s or x ∈ containing_list","not x ∈ containing_list or not x ∈ s or x ∈ containing_list.filter(s.contains)","x ∈ containing_list.filter(s.contains).unique = x ∈ containing_list.filter(s.contains)","not x ∈ containing_list.filter(s.contains).unique","x ∈ containing_list","not x ∈ containing_list.filter(s.contains)"]}
{"goal":"f_containing_list.length <= n","proof":["n <= f_containing_list.length or f_containing_list.length <= n","n <= f_containing_list.length"]}
{"goal":"s.cardinality_at_most(n)","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_at_most(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_at_most(x4) or s0(x3, x4).length <= x4 } and forall(x5: List[T], x6: Nat, x7: FiniteSet[T]) { not x5.length <= x6 or s1(x7, x6, x5) ∈ x7 or x7.cardinality_at_most(x6) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { not s1(x9, x10, x8) ∈ x8 or not x8.length <= x10 or x9.cardinality_at_most(x10) } }","not s1(s, n, f_containing_list) ∈ s or s1(s, n, f_containing_list) ∈ f_containing_list","not s1(s, n, f_containing_list) ∈ f_containing_list or not f_containing_list.length <= n or s.cardinality_at_most(n)","not f_containing_list.length <= n or s1(s, n, f_containing_list) ∈ s or s.cardinality_at_most(n)","not f_containing_list.length <= n or s1(s, n, f_containing_list) ∈ s","s1(s, n, f_containing_list) ∈ s","not s1(s, n, f_containing_list) ∈ f_containing_list or not f_containing_list.length <= n","s1(s, n, f_containing_list) ∈ f_containing_list","not s1(s, n, f_containing_list) ∈ f_containing_list"]}
{"goal":"cardinality_is_smallest_cardinality","proof":[]}
{"goal":"s.union(t.difference(s)).cardinality_is(n_s + n_diff)","proof":["not s.is_disjoint(t ∖ s) or not s.cardinality_is(n_s) or not (t ∖ s).cardinality_is(n_diff) or (s ∪ (t ∖ s)).cardinality_is(n_s + n_diff)","not s.is_disjoint(t ∖ s)","let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0.is_disjoint(x1) or not x2 ∈ x0 or not x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3.is_disjoint(x4) } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { s0(x6, x5) ∈ x5 or x6.is_disjoint(x5) } }","s0(s, t ∖ s) ∈ t ∖ s or s.is_disjoint(t ∖ s)","s0(s, t ∖ s) ∈ s or s.is_disjoint(t ∖ s)","not s0(s, t ∖ s) ∈ t ∖ s or not s0(s, t ∖ s) ∈ s","s0(s, t ∖ s) ∈ s","s0(s, t ∖ s) ∈ t ∖ s"]}
{"goal":"union_cardinality_with_difference","proof":["s ∪ (t ∖ s) = s ∪ t"]}
{"goal":"sut.superset_eq(sit)","proof":["not s ∩ t ⊆ s or not s ⊆ sut or s ∩ t ⊆ sut","sut ⊇ sit = sit ⊆ sut","not sit ⊆ sut","s ⊆ s ∪ t","s ∩ t ⊆ s","not s ∩ t ⊆ sut","not s ∩ t ⊆ s or not s ⊆ sut","not s ⊆ sut"]}
{"goal":"sit.union(sut.difference(sit)) = sut","proof":["sit ∪ (sut ∖ sit) = sit ∪ sut","sit ∪ sut != sut","not sit ⊆ sut or sit ∪ sut = sut","not sit ⊆ sut","sut ⊇ sit = sit ⊆ sut"]}
{"goal":"sit.union(sym_diff) = sut","proof":["sit ∪ (sut ∖ sit) != sut"]}
{"goal":"sit.union(s_diff) = s","proof":["sit ∪ (s ∖ sit) = sit ∪ s","not sit ⊆ s or sit ∪ s = s","sit ∪ (s ∖ sit) != s","sit ∪ s != s","s ∩ t ⊆ s","not sit ⊆ s"]}
{"goal":"exists(k0: Nat) { s_diff.cardinality_is(k0) }","proof":["let s0: FiniteSet[T] -> Nat satisfy { forall(x0: FiniteSet[T]) { x0.cardinality_is(s0(x0)) } }","not s_diff.cardinality_is(s0(s_diff))","s_diff.cardinality_is(s0(s_diff))"]}
{"goal":"sit.is_disjoint(s_diff)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0.is_disjoint(x1) or not x2 ∈ x0 or not x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3.is_disjoint(x4) } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { s0(x6, x5) ∈ x5 or x6.is_disjoint(x5) } }","s0(sit, s_diff) ∈ s_diff or sit.is_disjoint(s_diff)","s0(sit, s_diff) ∈ s_diff","s0(sit, s_diff) ∈ sit or sit.is_disjoint(s_diff)","s0(sit, s_diff) ∈ sit","not s0(sit, s_diff) ∈ s ∖ sit or not s0(sit, s_diff) ∈ sit","not s0(sit, s_diff) ∈ s ∖ sit"]}
{"goal":"sit.union(s_diff).cardinality_is(n_inter + n_s_diff)","proof":["sit.cardinality_is(n_inter)","not sit.is_disjoint(s_diff) or not sit.cardinality_is(n_inter) or not s_diff.cardinality_is(n_s_diff) or (sit ∪ s_diff).cardinality_is(n_inter + n_s_diff)"]}
{"goal":"n_inter + n_s_diff = n_s","proof":["s.cardinality_is(n_inter + n_s_diff)","not s.cardinality_is(n_s) or not s.cardinality_is(n_inter + n_s_diff) or n_inter + n_s_diff = n_s","not s.cardinality_is(n_inter + n_s_diff) or not s.cardinality_is(n_s)"]}
{"goal":"n_s_diff = n_s - n_inter","proof":["n_s_diff + n_inter != n_s or n_s - n_inter = n_s_diff","n_s_diff + n_inter != n_s","n_s_diff + n_inter = n_inter + n_s_diff"]}
{"goal":"s.contains(x)","proof":["not x ∈ s ∖ sit or x ∈ s","not x ∈ s ∖ sit"]}
{"goal":"s.intersection(t).contains(x)","proof":["not x ∈ s or not x ∈ t or elem_in_finite_intersection(s, t, x)","not finite_constraint[T](elem_in_finite_intersection[T](s, t)) or x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](s, t)) = elem_in_finite_intersection(s, t, x)","FiniteSet.new[T](elem_in_finite_intersection[T](s, t)) = s ∩ t","not x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](s, t))","finite_constraint[T](elem_in_finite_intersection[T](s, t))","not finite_constraint[T](elem_in_finite_intersection[T](s, t)) or not elem_in_finite_intersection(s, t, x) or x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](s, t))","not x ∈ s or elem_in_finite_intersection(s, t, x)","not elem_in_finite_intersection(s, t, x)","elem_in_finite_intersection(s, t, x)"]}
{"goal":"sit.contains(x)","proof":["not x ∈ s ∩ t"]}
{"goal":"not s_diff.contains(x)","proof":["x ∈ s ∖ sit","not x ∈ s ∖ sit or not x ∈ sit"]}
{"goal":"t.is_disjoint(s_diff)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0.is_disjoint(x1) or not x2 ∈ x0 or not x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3.is_disjoint(x4) } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { s0(x6, x5) ∈ x5 or x6.is_disjoint(x5) } }","not s0(t, s_diff) ∈ s_diff or not s0(t, s_diff) ∈ t","s0(t, s_diff) ∈ s_diff or t.is_disjoint(s_diff)","s0(t, s_diff) ∈ s_diff","s0(t, s_diff) ∈ t or t.is_disjoint(s_diff)","not s0(t, s_diff) ∈ t","s0(t, s_diff) ∈ t"]}
{"goal":"t.union(s_diff).cardinality_is(n_t + n_s_diff)","proof":["not t.is_disjoint(s_diff) or not t.cardinality_is(n_t) or not s_diff.cardinality_is(n_s_diff) or (t ∪ s_diff).cardinality_is(n_t + n_s_diff)"]}
{"goal":"n_t + n_s_diff = n_t + (n_s - n_inter)","proof":["n_s - n_inter != n_s_diff"]}
{"goal":"n_t + n_s_diff = n_t + n_s - n_inter","proof":["n_t + (n_s_diff + n_inter) = n_t + n_s_diff + n_inter","n_t + n_s_diff + n_inter != n_t + n_s or n_t + n_s - n_inter = n_t + n_s_diff","n_s_diff + n_inter = n_inter + n_s_diff","n_t + n_s_diff + n_inter != n_t + n_s"]}
{"goal":"t.union(s_diff) = t.union(s)","proof":["t ∪ (s ∖ t ∩ s) = t ∪ s","t ∩ s = s ∩ t"]}
{"goal":"inclusion_exclusion","proof":["s ∪ (t ∖ s) = t ∪ s","s ∪ (t ∖ s) = s ∪ t","n_s + n_t - n_inter = lib(nat.nat_base).bounded_sub(n_s + n_t, n_inter)","n_t + n_s - n_inter = lib(nat.nat_base).bounded_sub(n_t + n_s, n_inter)","n_t + n_s = n_s + n_t"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { s.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s2: List[T] -> T satisfy { forall(x6: List[T]) { s2(x6) ∈ s } and forall(x7: List[T]) { not s2(x7) ∈ x7 } }","not s2(s0(s.contains)) ∈ s0(s.contains)","s2(s0(s.contains)) ∈ s","not finite_constraint[T](s.contains) or not s2(s0(s.contains)) ∈ s or s2(s0(s.contains)) ∈ s0(s.contains)","not s2(s0(s.contains)) ∈ s or not finite_constraint[T](s.contains)","finite_constraint[T](s.contains)","not s2(s0(s.contains)) ∈ s"]}
{"goal":"s.contains(x) implies filtered.contains(x)","proof":["not x ∈ s or x ∈ superset","not x ∈ superset or not x ∈ s or x ∈ superset.filter(s.contains)","x ∈ superset.filter(s.contains).unique = x ∈ superset.filter(s.contains)","not x ∈ superset.filter(s.contains).unique","x ∈ superset","not x ∈ superset.filter(s.contains)"]}
{"goal":"filtered.contains(x) implies s.contains(x)","proof":["not x ∈ superset.filter(s.contains) or x ∈ s","x ∈ superset.filter(s.contains).unique = x ∈ superset.filter(s.contains)","x ∈ superset.filter(s.contains).unique","x ∈ superset.filter(s.contains)"]}
{"goal":"s.contains(x) = filtered.contains(x)","proof":["x ∈ s or x ∈ filtered","x ∈ s","x ∈ filtered","not x ∈ filtered"]}
{"goal":"finite_set_has_exact_containing_list","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { s0(x0) ∈ s != s0(x0) ∈ x0 or not x0.is_unique } }","s0(filtered) ∈ s != s0(filtered) ∈ filtered or not filtered.is_unique","s0(filtered) ∈ s = s0(filtered) ∈ filtered","not filtered.is_unique","superset.filter(s.contains).unique.is_unique"]}
{"goal":"p(List.nil[FiniteSet[T]])","proof":["let s0: List[List[T]] satisfy { true }","not is_containing_list_of_lists[T](List.nil[FiniteSet[T]], s0) or p(List.nil[FiniteSet[T]])","not is_containing_list_of_lists[T](List.nil[FiniteSet[T]], s0)","let s1: (List[FiniteSet[T]], List[List[T]]) -> FiniteSet[T] satisfy { forall(x0: List[FiniteSet[T]], x1: List[List[T]], x2: FiniteSet[T]) { not is_containing_list_of_lists[T](x0, x1) or is_containing_list_of_lists_elem[T](x0, x1, x2) } and forall(x3: List[FiniteSet[T]], x4: List[List[T]]) { not is_containing_list_of_lists_elem[T](x3, x4, s1(x3, x4)) or is_containing_list_of_lists[T](x3, x4) } }","not is_containing_list_of_lists_elem[T](List.nil[FiniteSet[T]], s0, s1(List.nil[FiniteSet[T]], s0)) or is_containing_list_of_lists[T](List.nil[FiniteSet[T]], s0)","is_containing_list_of_lists_elem[T](List.nil[FiniteSet[T]], s0, s1(List.nil[FiniteSet[T]], s0)) or s1(List.nil[FiniteSet[T]], s0) ∈ List.nil[FiniteSet[T]]","not s1(List.nil[FiniteSet[T]], s0) ∈ List.nil[FiniteSet[T]] or List.nil[FiniteSet[T]] != List.nil[FiniteSet[T]]","not s1(List.nil[FiniteSet[T]], s0) ∈ List.nil[FiniteSet[T]]","not is_containing_list_of_lists_elem[T](List.nil[FiniteSet[T]], s0, s1(List.nil[FiniteSet[T]], s0))"]}
{"goal":"exists(k0: List[List[T]]) { is_containing_list_of_lists[T](tail, k0) }","proof":["let s0: List[FiniteSet[T]] -> List[List[T]] satisfy { forall(x0: List[FiniteSet[T]]) { not p(x0) or is_containing_list_of_lists[T](x0, s0(x0)) } and forall(x1: List[FiniteSet[T]], x2: List[List[T]]) { not is_containing_list_of_lists[T](x1, x2) or p(x1) } }","not is_containing_list_of_lists[T](tail, s0(tail))","not p(tail) or is_containing_list_of_lists[T](tail, s0(tail))"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { head.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { finite_constraint[T](x2) or x2(s1(x2, x3)) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s2: List[T] -> T satisfy { forall(x6: List[T]) { s2(x6) ∈ head } and forall(x7: List[T]) { not s2(x7) ∈ x7 } }","not s2(s0(head.contains)) ∈ s0(head.contains)","s2(s0(head.contains)) ∈ head","not finite_constraint[T](head.contains) or not s2(s0(head.contains)) ∈ head or s2(s0(head.contains)) ∈ s0(head.contains)","not s2(s0(head.contains)) ∈ head or not finite_constraint[T](head.contains)","finite_constraint[T](head.contains)","not s2(s0(head.contains)) ∈ head"]}
{"goal":"exists(k0: List[T]) { containing_cons.contains(k0) and forall(x0: T) { s.contains(x0) implies k0.contains(x0) } }","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { not x0 ∈ containing_cons or s0(x0) ∈ s } and forall(x1: List[T]) { not s0(x1) ∈ x1 or not x1 ∈ containing_cons } }","not s0(containing_list_head) ∈ containing_list_head or not containing_list_head ∈ containing_cons","not containing_list_head ∈ containing_cons or s0(containing_list_head) ∈ s","not s0(containing_list_head) ∈ head or s0(containing_list_head) ∈ containing_list_head","containing_list_head.cons(containing_lists_tail) != containing_cons or containing_list_head != containing_list_head or containing_list_head ∈ containing_cons","containing_list_head.cons(containing_lists_tail) != containing_cons or containing_list_head ∈ containing_cons","containing_list_head ∈ containing_cons","s0(containing_list_head) ∈ s","not s0(containing_list_head) ∈ containing_list_head","s0(containing_list_head) ∈ head","not s0(containing_list_head) ∈ head"]}
{"goal":"containing_cons.contains(l) and forall(x0: T) { s.contains(x0) implies l.contains(x0) }","proof":["let s0: T satisfy { not l ∈ containing_cons or s0 ∈ s and (not s0 ∈ l or not l ∈ containing_cons) }","s0 ∈ s","not s0 ∈ l","not s0 ∈ s or s0 ∈ l"]}
{"goal":"is_containing_list_of_lists_elem[T](List.cons(head, tail), containing_cons, s)","proof":["let s0: List[T] satisfy { s0 ∈ containing_cons and forall(x0: T) { not x0 ∈ s or x0 ∈ s0 } }","let (s1: (List[FiniteSet[T]], List[List[T]], FiniteSet[T]) -> List[T], s2: (List[FiniteSet[T]], List[List[T]], FiniteSet[T], List[T]) -> T) satisfy { forall(x1: List[FiniteSet[T]], x2: List[List[T]], x3: FiniteSet[T]) { not is_containing_list_of_lists_elem[T](x1, x2, x3) or not x3 ∈ x1 or s1(x1, x2, x3) ∈ x2 } and forall(x4: List[FiniteSet[T]], x5: List[List[T]], x6: FiniteSet[T], x7: T) { not is_containing_list_of_lists_elem[T](x4, x5, x6) or not x7 ∈ x6 or not x6 ∈ x4 or x7 ∈ s1(x4, x5, x6) } and forall(x8: List[FiniteSet[T]], x9: List[List[T]], x10: FiniteSet[T]) { is_containing_list_of_lists_elem[T](x8, x9, x10) or x10 ∈ x8 } and forall(x11: List[List[T]], x12: List[T], x13: FiniteSet[T], x14: List[FiniteSet[T]]) { not x12 ∈ x11 or s2(x14, x11, x13, x12) ∈ x13 or is_containing_list_of_lists_elem[T](x14, x11, x13) } and forall(x15: List[T], x16: List[FiniteSet[T]], x17: List[List[T]], x18: FiniteSet[T]) { not s2(x16, x17, x18, x15) ∈ x15 or not x15 ∈ x17 or is_containing_list_of_lists_elem[T](x16, x17, x18) } }","not s2(List.cons(head, tail), containing_cons, s, s0) ∈ s or s2(List.cons(head, tail), containing_cons, s, s0) ∈ s0","not s2(List.cons(head, tail), containing_cons, s, s0) ∈ s0 or not s0 ∈ containing_cons or is_containing_list_of_lists_elem[T](List.cons(head, tail), containing_cons, s)","not s0 ∈ containing_cons or s2(List.cons(head, tail), containing_cons, s, s0) ∈ s or is_containing_list_of_lists_elem[T](List.cons(head, tail), containing_cons, s)","not s0 ∈ containing_cons or s2(List.cons(head, tail), containing_cons, s, s0) ∈ s","not s2(List.cons(head, tail), containing_cons, s, s0) ∈ s0 or not s0 ∈ containing_cons","not s2(List.cons(head, tail), containing_cons, s, s0) ∈ s0","s2(List.cons(head, tail), containing_cons, s, s0) ∈ s","not s2(List.cons(head, tail), containing_cons, s, s0) ∈ s"]}
{"goal":"tail.contains(s)","proof":["not s ∈ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or s ∈ tail or s = head","not s ∈ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or s = head","List.cons(head, tail) != List.cons(head, tail) or not s ∈ List.cons(head, tail)"]}
{"goal":"is_containing_list_of_lists_elem[T](tail, containing_lists_tail, x0)","proof":["not is_containing_list_of_lists[T](tail, containing_lists_tail) or is_containing_list_of_lists_elem[T](tail, containing_lists_tail, x0)"]}
{"goal":"exists(k0: List[T]) { containing_lists_tail.contains(k0) and forall(x0: T) { s.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: (List[FiniteSet[T]], List[List[T]], FiniteSet[T]) -> List[T], s1: (List[FiniteSet[T]], List[List[T]], FiniteSet[T], List[T]) -> T) satisfy { forall(x0: List[FiniteSet[T]], x1: List[List[T]], x2: FiniteSet[T]) { not is_containing_list_of_lists_elem[T](x0, x1, x2) or not x2 ∈ x0 or s0(x0, x1, x2) ∈ x1 } and forall(x3: List[FiniteSet[T]], x4: List[List[T]], x5: FiniteSet[T], x6: T) { not is_containing_list_of_lists_elem[T](x3, x4, x5) or not x6 ∈ x5 or not x5 ∈ x3 or x6 ∈ s0(x3, x4, x5) } and forall(x7: List[FiniteSet[T]], x8: List[List[T]], x9: FiniteSet[T]) { is_containing_list_of_lists_elem[T](x7, x8, x9) or x9 ∈ x7 } and forall(x10: List[List[T]], x11: List[T], x12: FiniteSet[T], x13: List[FiniteSet[T]]) { not x11 ∈ x10 or s1(x13, x10, x12, x11) ∈ x12 or is_containing_list_of_lists_elem[T](x13, x10, x12) } and forall(x14: List[T], x15: List[FiniteSet[T]], x16: List[List[T]], x17: FiniteSet[T]) { not s1(x15, x16, x17, x14) ∈ x14 or not x14 ∈ x16 or is_containing_list_of_lists_elem[T](x15, x16, x17) } }","let s2: List[T] -> T satisfy { forall(x18: List[T]) { not x18 ∈ containing_lists_tail or s2(x18) ∈ s } and forall(x19: List[T]) { not s2(x19) ∈ x19 or not x19 ∈ containing_lists_tail } }","not s2(s0(tail, containing_lists_tail, s)) ∈ s0(tail, containing_lists_tail, s) or not s0(tail, containing_lists_tail, s) ∈ containing_lists_tail","not s0(tail, containing_lists_tail, s) ∈ containing_lists_tail or s2(s0(tail, containing_lists_tail, s)) ∈ s","is_containing_list_of_lists_elem[T](tail, containing_lists_tail, s)","not is_containing_list_of_lists_elem[T](tail, containing_lists_tail, s) or not s2(s0(tail, containing_lists_tail, s)) ∈ s or not s ∈ tail or s2(s0(tail, containing_lists_tail, s)) ∈ s0(tail, containing_lists_tail, s)","not is_containing_list_of_lists_elem[T](tail, containing_lists_tail, s) or not s ∈ tail or s0(tail, containing_lists_tail, s) ∈ containing_lists_tail","not s ∈ tail or s0(tail, containing_lists_tail, s) ∈ containing_lists_tail","s0(tail, containing_lists_tail, s) ∈ containing_lists_tail","not s ∈ tail or not s2(s0(tail, containing_lists_tail, s)) ∈ s or s2(s0(tail, containing_lists_tail, s)) ∈ s0(tail, containing_lists_tail, s)","s2(s0(tail, containing_lists_tail, s)) ∈ s","not s2(s0(tail, containing_lists_tail, s)) ∈ s0(tail, containing_lists_tail, s)","s2(s0(tail, containing_lists_tail, s)) ∈ s0(tail, containing_lists_tail, s)"]}
{"goal":"containing_cons.contains(l)","proof":["not l ∈ containing_lists_tail or containing_list_head.cons(containing_lists_tail) != containing_cons or l ∈ containing_cons or l = containing_list_head","containing_list_head.cons(containing_lists_tail) != containing_cons or l != containing_list_head or l ∈ containing_cons","containing_list_head.cons(containing_lists_tail) != containing_cons or l != containing_list_head","l != containing_list_head","not l ∈ containing_lists_tail or containing_list_head.cons(containing_lists_tail) != containing_cons or l = containing_list_head"]}
{"goal":"s.contains(y) implies l.contains(y)","proof":["not y ∈ s or y ∈ l"]}
{"goal":"containing_cons.contains(l) and forall(x0: T) { s.contains(x0) implies l.contains(x0) }","proof":["let s0: T satisfy { not l ∈ containing_cons or s0 ∈ s and (not s0 ∈ l or not l ∈ containing_cons) }","s0 ∈ s","not s0 ∈ l","not s0 ∈ s or s0 ∈ l"]}
{"goal":"is_containing_list_of_lists_elem[T](List.cons(head, tail), containing_cons, s)","proof":["let (s0: (List[FiniteSet[T]], List[List[T]], FiniteSet[T]) -> List[T], s1: (List[FiniteSet[T]], List[List[T]], FiniteSet[T], List[T]) -> T) satisfy { forall(x0: List[FiniteSet[T]], x1: List[List[T]], x2: FiniteSet[T]) { not is_containing_list_of_lists_elem[T](x0, x1, x2) or not x2 ∈ x0 or s0(x0, x1, x2) ∈ x1 } and forall(x3: List[FiniteSet[T]], x4: List[List[T]], x5: FiniteSet[T], x6: T) { not is_containing_list_of_lists_elem[T](x3, x4, x5) or not x6 ∈ x5 or not x5 ∈ x3 or x6 ∈ s0(x3, x4, x5) } and forall(x7: List[FiniteSet[T]], x8: List[List[T]], x9: FiniteSet[T]) { is_containing_list_of_lists_elem[T](x7, x8, x9) or x9 ∈ x7 } and forall(x10: List[List[T]], x11: List[T], x12: FiniteSet[T], x13: List[FiniteSet[T]]) { not x11 ∈ x10 or s1(x13, x10, x12, x11) ∈ x12 or is_containing_list_of_lists_elem[T](x13, x10, x12) } and forall(x14: List[T], x15: List[FiniteSet[T]], x16: List[List[T]], x17: FiniteSet[T]) { not s1(x15, x16, x17, x14) ∈ x14 or not x14 ∈ x16 or is_containing_list_of_lists_elem[T](x15, x16, x17) } }","not s1(List.cons(head, tail), containing_cons, s, l) ∈ s or s1(List.cons(head, tail), containing_cons, s, l) ∈ l","not s1(List.cons(head, tail), containing_cons, s, l) ∈ l or not l ∈ containing_cons or is_containing_list_of_lists_elem[T](List.cons(head, tail), containing_cons, s)","not l ∈ containing_cons or s1(List.cons(head, tail), containing_cons, s, l) ∈ s or is_containing_list_of_lists_elem[T](List.cons(head, tail), containing_cons, s)","not l ∈ containing_cons or s1(List.cons(head, tail), containing_cons, s, l) ∈ s","not s1(List.cons(head, tail), containing_cons, s, l) ∈ l or not l ∈ containing_cons","not s1(List.cons(head, tail), containing_cons, s, l) ∈ l","s1(List.cons(head, tail), containing_cons, s, l) ∈ s","not s1(List.cons(head, tail), containing_cons, s, l) ∈ s"]}
{"goal":"is_containing_list_of_lists_elem[T](List.cons(head, tail), containing_cons, s)","proof":["is_containing_list_of_lists_elem[T](List.cons(head, tail), containing_cons, s) or s ∈ List.cons(head, tail)"]}
{"goal":"is_containing_list_of_lists[T](List.cons(head, tail), containing_cons)","proof":["let s0: (List[FiniteSet[T]], List[List[T]]) -> FiniteSet[T] satisfy { forall(x0: List[FiniteSet[T]], x1: List[List[T]], x2: FiniteSet[T]) { not is_containing_list_of_lists[T](x0, x1) or is_containing_list_of_lists_elem[T](x0, x1, x2) } and forall(x3: List[FiniteSet[T]], x4: List[List[T]]) { not is_containing_list_of_lists_elem[T](x3, x4, s0(x3, x4)) or is_containing_list_of_lists[T](x3, x4) } }","is_containing_list_of_lists_elem[T](List.cons(head, tail), containing_cons, s0(List.cons(head, tail), containing_cons))","not is_containing_list_of_lists_elem[T](List.cons(head, tail), containing_cons, s0(List.cons(head, tail), containing_cons)) or is_containing_list_of_lists[T](List.cons(head, tail), containing_cons)"]}
{"goal":"p(List.cons(head, tail))","proof":["not is_containing_list_of_lists[T](List.cons(head, tail), containing_cons) or p(List.cons(head, tail))"]}
{"goal":"p(sets)","proof":["let (s0: FiniteSet[T], s1: List[FiniteSet[T]]) satisfy { forall(x0: List[FiniteSet[T]]) { not p(List.nil[FiniteSet[T]]) or p(s1) or p(x0) } and forall(x1: List[FiniteSet[T]]) { not p(List.cons(s0, s1)) or not p(List.nil[FiniteSet[T]]) or p(x1) } }","not p(List.nil[FiniteSet[T]]) or p(s1) or p(sets)","p(s1) or p(sets)","p(s1)","not p(List.cons(s0, s1)) or not p(List.nil[FiniteSet[T]]) or p(sets)","not p(List.cons(s0, s1)) or p(sets)","not p(s1) or p(List.cons(s0, s1))","not p(List.cons(s0, s1))"]}
{"goal":"exists_containing_list_of_lists","proof":["let s0: List[FiniteSet[T]] -> List[List[T]] satisfy { forall(x0: List[FiniteSet[T]]) { not p(x0) or is_containing_list_of_lists[T](x0, s0(x0)) } and forall(x1: List[FiniteSet[T]], x2: List[List[T]]) { not is_containing_list_of_lists[T](x1, x2) or p(x1) } }","not is_containing_list_of_lists[T](sets, s0(sets))","not p(sets) or is_containing_list_of_lists[T](sets, s0(sets))"]}
