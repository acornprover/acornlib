{"goal":"exists(k0: Set[T]) { k0.is_finite }","proof":["not Set.empty_set[T].is_finite","let s0: lib(list).List[T] satisfy { true }","not Set.empty_set[T].cardinality_is(s0.filter(Set.empty_set[T].contains).unique.length) or Set.empty_set[T].is_finite","not Set.empty_set[T].cardinality_is(s0.filter(Set.empty_set[T].contains).unique.length)","let (s1: (Set[T], Nat) -> lib(list).List[T], s2: (Set[T], Nat, lib(list).List[T]) -> T) satisfy { forall(x0: Set[T], x1: Nat, x2: T) { not x0.cardinality_is(x1) or not x2 ∈ x0 or x2 ∈ s1(x0, x1) } and forall(x3: Set[T], x4: Nat) { not x3.cardinality_is(x4) or s1(x3, x4).filter(x3.contains).unique.length = x4 } and forall(x5: lib(list).List[T], x6: Set[T], x7: Nat) { x5.filter(x6.contains).unique.length != x7 or s2(x6, x7, x5) ∈ x6 or x6.cardinality_is(x7) } and forall(x8: lib(list).List[T], x9: Set[T], x10: Nat) { x8.filter(x9.contains).unique.length != x10 or not s2(x9, x10, x8) ∈ x8 or x9.cardinality_is(x10) } }","s0.filter(Set.empty_set[T].contains).unique.length != s0.filter(Set.empty_set[T].contains).unique.length or s2(Set.empty_set[T], s0.filter(Set.empty_set[T].contains).unique.length, s0) ∈ Set.empty_set[T] or Set.empty_set[T].cardinality_is(s0.filter(Set.empty_set[T].contains).unique.length)","s0.filter(Set.empty_set[T].contains).unique.length != s0.filter(Set.empty_set[T].contains).unique.length or s2(Set.empty_set[T], s0.filter(Set.empty_set[T].contains).unique.length, s0) ∈ Set.empty_set[T]","s2(Set.empty_set[T], s0.filter(Set.empty_set[T].contains).unique.length, s0) ∈ Set.empty_set[T]","not Set.empty_set[T].is_empty or not s2(Set.empty_set[T], s0.filter(Set.empty_set[T].contains).unique.length, s0) ∈ Set.empty_set[T]","not Set.empty_set[T].is_empty"]}
