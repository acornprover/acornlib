{"goal":"const_false_satisfies_finite_constraint","proof":["let (s1: T -> Bool -> List[T], s2: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or s1(x0).contains(x1) } and forall(x2: T -> Bool, x3: List[T]) { x2(s2(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not x4.contains(s2(x5, x4)) or finite_constraint[T](x5) } }","let s0: List[T] satisfy { true }","const_false(s2(const_false[T], s0)) or finite_constraint[T](const_false[T])","const_false(s2(const_false[T], s0))","not const_false(s2(const_false[T], s0))"]}
{"goal":"list_contains_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or s0(x0).contains(x1) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not x4.contains(s1(x5, x4)) or finite_constraint[T](x5) } }","not ts.contains(s1(ts.contains, ts)) or finite_constraint[T](ts.contains)","ts.contains(s1(ts.contains, ts)) or finite_constraint[T](ts.contains)","ts.contains(s1(ts.contains, ts))"]}
{"goal":"functional_insert_satisfies_finite_constraint","proof":["let (s1: T -> Bool -> List[T], s2: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or s1(x0).contains(x1) } and forall(x2: T -> Bool, x3: List[T]) { x2(s2(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not x4.contains(s2(x5, x4)) or finite_constraint[T](x5) } }","let s0: List[T] satisfy { true }","List.cons(item, s0) != List.cons(item, s0) or List.cons(item, s0) + s1(f) = List.cons(item, s0 + s1(f))","List.cons(item, s0) + s1(f) != List.cons(item, s0 + s1(f)) or s2(functional_insert(f, item), List.cons(item, s0) + s1(f)) != item or (List.cons(item, s0) + s1(f)).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","not functional_insert(f, item, s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or s2(functional_insert(f, item), List.cons(item, s0) + s1(f)) = item or f(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","not finite_constraint[T](f) or not f(s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or s1(f).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","not s1(f).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or (List.cons(item, s0) + s1(f)).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","not (List.cons(item, s0) + s1(f)).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or finite_constraint[T](functional_insert(f, item))","functional_insert(f, item, s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or finite_constraint[T](functional_insert(f, item))","not (List.cons(item, s0) + s1(f)).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","functional_insert(f, item, s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","List.cons(item, s0) + s1(f) = List.cons(item, s0 + s1(f))","not f(s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or s1(f).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","not s1(f).contains(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","s2(functional_insert(f, item), List.cons(item, s0) + s1(f)) != item or List.cons(item, s0) + s1(f) != List.cons(item, s0 + s1(f))","f(s2(functional_insert(f, item), List.cons(item, s0) + s1(f))) or s2(functional_insert(f, item), List.cons(item, s0) + s1(f)) = item","s2(functional_insert(f, item), List.cons(item, s0) + s1(f)) != item","not f(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))","f(s2(functional_insert(f, item), List.cons(item, s0) + s1(f)))"]}
{"goal":"functional_remove_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or s0(x0).contains(x1) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not x4.contains(s1(x5, x4)) or finite_constraint[T](x5) } }","not functional_remove(f, item, s1(functional_remove(f, item), s0(f))) or s1(functional_remove(f, item), s0(f)) = item or f(s1(functional_remove(f, item), s0(f)))","not finite_constraint[T](f) or not f(s1(functional_remove(f, item), s0(f))) or s0(f).contains(s1(functional_remove(f, item), s0(f)))","not s0(f).contains(s1(functional_remove(f, item), s0(f))) or finite_constraint[T](functional_remove(f, item))","not functional_remove(f, item, s1(functional_remove(f, item), s0(f))) or s1(functional_remove(f, item), s0(f)) != item","functional_remove(f, item, s1(functional_remove(f, item), s0(f))) or finite_constraint[T](functional_remove(f, item))","not s0(f).contains(s1(functional_remove(f, item), s0(f)))","functional_remove(f, item, s1(functional_remove(f, item), s0(f)))","not f(s1(functional_remove(f, item), s0(f))) or s0(f).contains(s1(functional_remove(f, item), s0(f)))","s1(functional_remove(f, item), s0(f)) != item","not f(s1(functional_remove(f, item), s0(f)))","f(s1(functional_remove(f, item), s0(f)))"]}
{"goal":"exists(k0: T -> Bool) { finite_constraint[T](k0) }","proof":["not finite_constraint[T](const_false[T])"]}
{"goal":"finite_constraint[T](a.contains)","proof":["finite_constraint[T](a.contains)"]}
{"goal":"finite_constraint[T](b.contains)","proof":["finite_constraint[T](b.contains)"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { a.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s2: List[T] -> T satisfy { forall(x6: List[T]) { s2(x6) ∈ a } and forall(x7: List[T]) { not s2(x7) ∈ x7 } }","not s2(s0(a.contains)) ∈ s0(a.contains)","s2(s0(a.contains)) ∈ a","not finite_constraint[T](a.contains) or not s2(s0(a.contains)) ∈ a or s2(s0(a.contains)) ∈ s0(a.contains)","not s2(s0(a.contains)) ∈ a or not finite_constraint[T](a.contains)"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { b.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s2: List[T] -> T satisfy { forall(x6: List[T]) { s2(x6) ∈ b } and forall(x7: List[T]) { not s2(x7) ∈ x7 } }","not s2(s0(b.contains)) ∈ s0(b.contains)","s2(s0(b.contains)) ∈ b","not finite_constraint[T](b.contains) or not s2(s0(b.contains)) ∈ b or s2(s0(b.contains)) ∈ s0(b.contains)","not s2(s0(b.contains)) ∈ b or not finite_constraint[T](b.contains)"]}
{"goal":"superset_a.contains(x)","proof":["not x ∈ a or x ∈ superset_a"]}
{"goal":"superset_union.contains(x)","proof":["not x ∈ superset_a + superset_b","not x ∈ superset_a or x ∈ superset_a + superset_b"]}
{"goal":"superset_b.contains(x)","proof":["not x ∈ b or x ∈ superset_b"]}
{"goal":"superset_union.contains(x)","proof":["not x ∈ superset_a + superset_b","not x ∈ superset_b or x ∈ superset_a + superset_b"]}
{"goal":"exists(k0: List[T]) { k0 = superset_union and forall(x0: T) { elem_in_finite_union(a, b, x0) implies k0.contains(x0) } }","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { superset_union != x0 or elem_in_finite_union(a, b, s0(x0)) } and forall(x1: List[T]) { not s0(x1) ∈ x1 or superset_union != x1 } }","superset_union != superset_union or elem_in_finite_union(a, b, s0(superset_union))","not s0(superset_union) ∈ superset_union or superset_union != superset_union","not s0(superset_union) ∈ b or s0(superset_union) ∈ superset_union","not s0(superset_union) ∈ a or s0(superset_union) ∈ superset_union","not s0(superset_union) ∈ superset_union","elem_in_finite_union(a, b, s0(superset_union))","not elem_in_finite_union(a, b, s0(superset_union)) or s0(superset_union) ∈ a or s0(superset_union) ∈ b","not s0(superset_union) ∈ a","not s0(superset_union) ∈ b","s0(superset_union) ∈ b"]}
{"goal":"union_contains_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s2: List[T] satisfy { s2 = superset_union and forall(x6: T) { not elem_in_finite_union(a, b, x6) or x6 ∈ s2 } }","not elem_in_finite_union(a, b, s1(elem_in_finite_union[T](a, b), s2)) or s1(elem_in_finite_union[T](a, b), s2) ∈ s2","not s1(elem_in_finite_union[T](a, b), s2) ∈ s2 or finite_constraint[T](elem_in_finite_union[T](a, b))","elem_in_finite_union(a, b, s1(elem_in_finite_union[T](a, b), s2)) or finite_constraint[T](elem_in_finite_union[T](a, b))","not s1(elem_in_finite_union[T](a, b), s2) ∈ s2","elem_in_finite_union(a, b, s1(elem_in_finite_union[T](a, b), s2))"]}
{"goal":"intersection_contains_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","not finite_constraint[T](a.contains) or not s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ a or s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ s0(a.contains)","not elem_in_finite_intersection(a, b, s1(elem_in_finite_intersection[T](a, b), s0(a.contains))) or s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ a","not s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ s0(a.contains) or finite_constraint[T](elem_in_finite_intersection[T](a, b))","elem_in_finite_intersection(a, b, s1(elem_in_finite_intersection[T](a, b), s0(a.contains))) or finite_constraint[T](elem_in_finite_intersection[T](a, b))","finite_constraint[T](a.contains)","not s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ s0(a.contains)","elem_in_finite_intersection(a, b, s1(elem_in_finite_intersection[T](a, b), s0(a.contains)))","s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ a","not s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ a or not finite_constraint[T](a.contains)","not s1(elem_in_finite_intersection[T](a, b), s0(a.contains)) ∈ a"]}
{"goal":"finite_constraint[T](a.contains)","proof":["finite_constraint[T](a.contains)"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { a.contains(x0) implies k0.contains(x0) } }","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s2: List[T] -> T satisfy { forall(x6: List[T]) { s2(x6) ∈ a } and forall(x7: List[T]) { not s2(x7) ∈ x7 } }","not s2(s0(a.contains)) ∈ s0(a.contains)","s2(s0(a.contains)) ∈ a","not finite_constraint[T](a.contains) or not s2(s0(a.contains)) ∈ a or s2(s0(a.contains)) ∈ s0(a.contains)","not s2(s0(a.contains)) ∈ a or not finite_constraint[T](a.contains)"]}
{"goal":"a.contains(x)","proof":["not elem_in_finite_difference(a, b, x) or x ∈ a"]}
{"goal":"superset_a.contains(x)","proof":["not x ∈ a or x ∈ superset_a"]}
{"goal":"exists(k0: List[T]) { k0 = superset_a and forall(x0: T) { elem_in_finite_difference(a, b, x0) implies k0.contains(x0) } }","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { superset_a != x0 or elem_in_finite_difference(a, b, s0(x0)) } and forall(x1: List[T]) { not s0(x1) ∈ x1 or superset_a != x1 } }","superset_a != superset_a or elem_in_finite_difference(a, b, s0(superset_a))","not s0(superset_a) ∈ superset_a or superset_a != superset_a","not s0(superset_a) ∈ superset_a","not elem_in_finite_difference(a, b, s0(superset_a)) or s0(superset_a) ∈ superset_a","elem_in_finite_difference(a, b, s0(superset_a))","not elem_in_finite_difference(a, b, s0(superset_a))"]}
{"goal":"difference_contains_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { x2(s1(x2, x3)) or finite_constraint[T](x2) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s2: List[T] satisfy { s2 = superset_a and forall(x6: T) { not elem_in_finite_difference(a, b, x6) or x6 ∈ s2 } }","not elem_in_finite_difference(a, b, s1(elem_in_finite_difference[T](a, b), s2)) or s1(elem_in_finite_difference[T](a, b), s2) ∈ s2","not s1(elem_in_finite_difference[T](a, b), s2) ∈ s2 or finite_constraint[T](elem_in_finite_difference[T](a, b))","elem_in_finite_difference(a, b, s1(elem_in_finite_difference[T](a, b), s2)) or finite_constraint[T](elem_in_finite_difference[T](a, b))","not s1(elem_in_finite_difference[T](a, b), s2) ∈ s2","elem_in_finite_difference(a, b, s1(elem_in_finite_difference[T](a, b), s2))"]}
{"goal":"finite_subset_refl","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(s, s) ∈ s or s ⊆ s","not s0(s, s) ∈ s","s0(s, s) ∈ s or s ⊆ s"]}
{"goal":"finite_subset_trans","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not a ⊆ b or not s0(a, c) ∈ a or s0(a, c) ∈ b","not b ⊆ c or not s0(a, c) ∈ b or s0(a, c) ∈ c","not s0(a, c) ∈ c or a ⊆ c","not s0(a, c) ∈ c","s0(a, c) ∈ a or a ⊆ c","s0(a, c) ∈ a","not s0(a, c) ∈ b or s0(a, c) ∈ c","not s0(a, c) ∈ a or s0(a, c) ∈ b","not s0(a, c) ∈ b","s0(a, c) ∈ b"]}
{"goal":"a.contains(x) implies b.contains(x)","proof":["not a ⊆ b or not x ∈ a or x ∈ b","not a ⊆ b or not x ∈ a"]}
{"goal":"b.contains(x) implies a.contains(x)","proof":["not b ⊆ a or not x ∈ b or x ∈ a","not b ⊆ a or not x ∈ b"]}
{"goal":"a.contains(x) = b.contains(x)","proof":["x ∈ b or x ∈ a","x ∈ b","x ∈ a","not x ∈ a"]}
{"goal":"a.contains = b.contains","proof":["let s0: T satisfy { s0 ∈ b != s0 ∈ a }","s0 ∈ b = s0 ∈ a"]}
{"goal":"finite_double_inclusion","proof":["FiniteSet.new[T](a.contains) = a","FiniteSet.new[T](b.contains) = b"]}
{"goal":"false","proof":["not finite_constraint[T](const_false[T]) or x ∈ FiniteSet.new[T](const_false[T]) = const_false(x)","not const_false(x)","x ∈ FiniteSet.empty[T]","not x ∈ FiniteSet.new[T](const_false[T]) or not finite_constraint[T](const_false[T]) or const_false(x)","x ∈ FiniteSet.new[T](const_false[T])"]}
{"goal":"finite_empty_subset_all","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(e, s) ∈ e","not e ⊆ s","s0(e, s) ∈ e or e ⊆ s"]}
{"goal":"insert_contains","proof":["FiniteSet.new[T](functional_insert(set.contains, item)) = set.insert(item)","not finite_constraint[T](functional_insert(set.contains, item)) or not functional_insert(set.contains, item, item) or FiniteSet.new[T](functional_insert(set.contains, item)).contains(item)","not finite_constraint[T](set.contains) or finite_constraint[T](functional_insert(set.contains, item))","item != item or functional_insert(set.contains, item, item)","finite_constraint[T](set.contains)","not FiniteSet.new[T](functional_insert(set.contains, item)).contains(item)","functional_insert(set.contains, item, item)","not finite_constraint[T](functional_insert(set.contains, item))"]}
{"goal":"remove_does_not_contain","proof":["FiniteSet.new[T](functional_remove(set.contains, item)) = set.remove(item)","not FiniteSet.new[T](functional_remove(set.contains, item)).contains(item) or not finite_constraint[T](functional_remove(set.contains, item)) or functional_remove(set.contains, item, item)","not finite_constraint[T](set.contains) or finite_constraint[T](functional_remove(set.contains, item))","not functional_remove(set.contains, item, item) or item != item","finite_constraint[T](set.contains)","FiniteSet.new[T](functional_remove(set.contains, item)).contains(item)","not functional_remove(set.contains, item, item)","not finite_constraint[T](functional_remove(set.contains, item))"]}
{"goal":"finite_constraint[T](set.contains)","proof":["finite_constraint[T](set.contains)"]}
{"goal":"finite_constraint[T](set.insert(other).contains)","proof":["finite_constraint[T](set.insert(other).contains)"]}
{"goal":"insert_other_still_contains","proof":["FiniteSet.new[T](functional_insert(set.contains, other)) = set.insert(other)","not set.contains(item) or functional_insert(set.contains, other, item) or other = item","not finite_constraint[T](functional_insert(set.contains, other)) or FiniteSet.new[T](functional_insert(set.contains, other)).contains(item) = functional_insert(set.contains, other, item)","not finite_constraint[T](set.contains) or finite_constraint[T](functional_insert(set.contains, other))","other != item or functional_insert(set.contains, other, item)","not FiniteSet.new[T](functional_insert(set.contains, other)).contains(item)","not finite_constraint[T](functional_insert(set.contains, other)) or not functional_insert(set.contains, other, item) or FiniteSet.new[T](functional_insert(set.contains, other)).contains(item)","finite_constraint[T](functional_insert(set.contains, other))","not functional_insert(set.contains, other, item)","other = item","other != item"]}
{"goal":"finite_constraint[T](set.contains)","proof":["finite_constraint[T](set.contains)"]}
{"goal":"finite_constraint[T](set.remove(other).contains)","proof":["finite_constraint[T](set.remove(other).contains)"]}
{"goal":"remove_other_still_contains","proof":["FiniteSet.new[T](functional_remove(set.contains, other)) = set.remove(other)","not finite_constraint[T](functional_remove(set.contains, other)) or not functional_remove(set.contains, other, item) or FiniteSet.new[T](functional_remove(set.contains, other)).contains(item)","not set.contains(item) or functional_remove(set.contains, other, item) or other = item","not finite_constraint[T](set.contains) or finite_constraint[T](functional_remove(set.contains, other))","not FiniteSet.new[T](functional_remove(set.contains, other)).contains(item)","finite_constraint[T](functional_remove(set.contains, other))","not set.contains(item) or functional_remove(set.contains, other, item)","not functional_remove(set.contains, other, item)"]}
{"goal":"finite_constraint[T](set.contains)","proof":["finite_constraint[T](set.contains)"]}
{"goal":"finite_constraint[T](set.insert(other).contains)","proof":["finite_constraint[T](set.insert(other).contains)"]}
{"goal":"insert_other_contains_imp_contains","proof":["FiniteSet.new[T](functional_insert(set.contains, other)) = set.insert(other)","not FiniteSet.new[T](functional_insert(set.contains, other)).contains(item) or not finite_constraint[T](functional_insert(set.contains, other)) or functional_insert(set.contains, other, item)","not functional_insert(set.contains, other, item) or other = item or set.contains(item)","not finite_constraint[T](set.contains) or finite_constraint[T](functional_insert(set.contains, other))","finite_constraint[T](functional_insert(set.contains, other))","not functional_insert(set.contains, other, item) or set.contains(item)","FiniteSet.new[T](functional_insert(set.contains, other)).contains(item)","functional_insert(set.contains, other, item)"]}
{"goal":"finite_constraint[T](set.contains)","proof":["finite_constraint[T](set.contains)"]}
{"goal":"finite_constraint[T](set.remove(other).contains)","proof":["finite_constraint[T](set.remove(other).contains)"]}
{"goal":"remove_other_contains_imp_contains","proof":["FiniteSet.new[T](functional_remove(set.contains, other)) = set.remove(other)","not FiniteSet.new[T](functional_remove(set.contains, other)).contains(item) or not finite_constraint[T](functional_remove(set.contains, other)) or functional_remove(set.contains, other, item)","not functional_remove(set.contains, other, item) or other = item or set.contains(item)","not finite_constraint[T](set.contains) or finite_constraint[T](functional_remove(set.contains, other))","finite_constraint[T](functional_remove(set.contains, other))","not functional_remove(set.contains, other, item) or set.contains(item)","FiniteSet.new[T](functional_remove(set.contains, other)).contains(item)","functional_remove(set.contains, other, item)"]}
{"goal":"set.contains(item) = set.insert(other).contains(item)","proof":["not set.insert(other).contains(item)","not set.contains(item) or set.insert(other).contains(item)"]}
{"goal":"not set.contains(item)","proof":[]}
{"goal":"not set.insert(other).contains(item)","proof":["not set.insert(other).contains(item) or set.contains(item) or other = item"]}
{"goal":"set.contains(item) = set.insert(other).contains(item)","proof":["set.insert(other).contains(item)"]}
{"goal":"insert_other_contains_eq","proof":["set.contains(item)","not set.insert(other).contains(item)"]}
{"goal":"set.contains(item) = set.remove(other).contains(item)","proof":["not set.remove(other).contains(item)","not set.contains(item) or set.remove(other).contains(item) or other = item"]}
{"goal":"not set.contains(item)","proof":[]}
{"goal":"not set.remove(other).contains(item)","proof":["not set.remove(other).contains(item) or set.contains(item) or other = item"]}
{"goal":"set.contains(item) = set.remove(other).contains(item)","proof":["set.remove(other).contains(item)"]}
{"goal":"remove_other_contains_eq","proof":["set.contains(item)","not set.remove(other).contains(item)"]}
{"goal":"set.remove(item).insert(item).contains != set.contains","proof":["FiniteSet.new[T](set.contains) = set","FiniteSet.new[T](set.remove(item).insert(item).contains) = set.remove(item).insert(item)"]}
{"goal":"exists(k0: T) { set.remove(item).insert(item).contains(k0) != set.contains(k0) }","proof":["let s0: T satisfy { set.remove(item).insert(item).contains(s0) != set.contains(s0) }","set.remove(item).insert(item).contains(s0) = set.contains(s0)"]}
{"goal":"set.remove(item).contains(t)","proof":["not set.contains(t) or set.remove(item).contains(t) or t = item"]}
{"goal":"false","proof":["not set.remove(item).contains(t) or set.remove(item).insert(item).contains(t) or t = item"]}
{"goal":"false","proof":["not set.remove(item).contains(t) or set.contains(t) or t = item","not set.remove(item).insert(item).contains(t) or set.remove(item).contains(t) or t = item","set.remove(item).contains(t)"]}
{"goal":"item = t","proof":[]}
{"goal":"not set.contains(t)","proof":["not set.remove(item).insert(item).contains(item)","set.remove(item).insert(item).contains(item)"]}
{"goal":"false","proof":[]}
{"goal":"remove_then_insert","proof":[]}
{"goal":"set.insert(item).remove(item).contains != set.contains","proof":["FiniteSet.new[T](set.contains) = set","FiniteSet.new[T](set.insert(item).remove(item).contains) = set.insert(item).remove(item)"]}
{"goal":"exists(k0: T) { set.insert(item).remove(item).contains(k0) != set.contains(k0) }","proof":["let s0: T satisfy { set.insert(item).remove(item).contains(s0) != set.contains(s0) }","set.insert(item).remove(item).contains(s0) = set.contains(s0)"]}
{"goal":"false","proof":["not set.insert(item).contains(t) or set.insert(item).remove(item).contains(t) or t = item","not set.contains(t) or set.insert(item).contains(t)","set.insert(item).contains(t)"]}
{"goal":"set.insert(item).contains(t)","proof":["not set.insert(item).remove(item).contains(t) or set.insert(item).contains(t) or t = item"]}
{"goal":"false","proof":["not set.insert(item).contains(t) or set.contains(t) or t = item"]}
{"goal":"item = t","proof":[]}
{"goal":"not set.contains(t)","proof":[]}
{"goal":"false","proof":["not set.insert(item).remove(item).contains(item)"]}
{"goal":"insert_then_remove","proof":[]}
{"goal":"a.subset_eq(a.union(b))","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(a, a ∪ b) ∈ a ∪ b or a ⊆ a ∪ b","s0(a, a ∪ b) ∈ a or a ⊆ a ∪ b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or s0(a, a ∪ b) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) = elem_in_finite_union(a, b, s0(a, a ∪ b))","FiniteSet.new[T](elem_in_finite_union[T](a, b)) = a ∪ b","not s0(a, a ∪ b) ∈ a or elem_in_finite_union(a, b, s0(a, a ∪ b))","finite_constraint[T](elem_in_finite_union[T](a, b))","s0(a, a ∪ b) ∈ a","not s0(a, a ∪ b) ∈ a ∪ b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or not elem_in_finite_union(a, b, s0(a, a ∪ b)) or s0(a, a ∪ b) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))","elem_in_finite_union(a, b, s0(a, a ∪ b))","not s0(a, a ∪ b) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))"]}
{"goal":"b.subset_eq(a.union(b))","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(b, a ∪ b) ∈ a ∪ b or b ⊆ a ∪ b","s0(b, a ∪ b) ∈ b or b ⊆ a ∪ b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or s0(b, a ∪ b) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) = elem_in_finite_union(a, b, s0(b, a ∪ b))","FiniteSet.new[T](elem_in_finite_union[T](a, b)) = a ∪ b","not s0(b, a ∪ b) ∈ b or elem_in_finite_union(a, b, s0(b, a ∪ b))","finite_constraint[T](elem_in_finite_union[T](a, b))","s0(b, a ∪ b) ∈ b","not s0(b, a ∪ b) ∈ a ∪ b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or not elem_in_finite_union(a, b, s0(b, a ∪ b)) or s0(b, a ∪ b) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))","elem_in_finite_union(a, b, s0(b, a ∪ b))","not s0(b, a ∪ b) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))"]}
{"goal":"finite_sets_subset_union","proof":["not a ⊂ a ∪ b"]}
{"goal":"finite_sets_subset_contain_union","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not elem_in_finite_union(a, b, s0(a ∪ b, c)) or s0(a ∪ b, c) ∈ a or s0(a ∪ b, c) ∈ b","not a ⊆ c or not s0(a ∪ b, c) ∈ a or s0(a ∪ b, c) ∈ c","not b ⊆ c or not s0(a ∪ b, c) ∈ b or s0(a ∪ b, c) ∈ c","not s0(a ∪ b, c) ∈ c or a ∪ b ⊆ c","s0(a ∪ b, c) ∈ a ∪ b or a ∪ b ⊆ c","not finite_constraint[T](elem_in_finite_union[T](a, b)) or s0(a ∪ b, c) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) = elem_in_finite_union(a, b, s0(a ∪ b, c))","FiniteSet.new[T](elem_in_finite_union[T](a, b)) = a ∪ b","finite_constraint[T](elem_in_finite_union[T](a, b))","not s0(a ∪ b, c) ∈ c","s0(a ∪ b, c) ∈ a ∪ b","not s0(a ∪ b, c) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) or not finite_constraint[T](elem_in_finite_union[T](a, b)) or elem_in_finite_union(a, b, s0(a ∪ b, c))","not s0(a ∪ b, c) ∈ b or s0(a ∪ b, c) ∈ c","not s0(a ∪ b, c) ∈ a or s0(a ∪ b, c) ∈ c","not s0(a ∪ b, c) ∈ a","not s0(a ∪ b, c) ∈ b","s0(a ∪ b, c) ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))","elem_in_finite_union(a, b, s0(a ∪ b, c))"]}
{"goal":"v.subset_eq(u)","proof":["not b ⊆ a ∪ b or not a ⊆ a ∪ b or b ∪ a ⊆ a ∪ b","not b ∪ a ⊆ u","b ⊆ a ∪ b","a ⊆ a ∪ b","not b ∪ a ⊆ a ∪ b"]}
{"goal":"u.subset_eq(v)","proof":["not a ⊆ b ∪ a or not b ⊆ b ∪ a or a ∪ b ⊆ b ∪ a","not u ⊆ b ∪ a","a ⊆ b ∪ a","b ⊆ b ∪ a","not a ∪ b ⊆ b ∪ a"]}
{"goal":"finite_union_comm","proof":["a ∪ b != v","v != u","not u ⊆ v or not v ⊆ u or v = u"]}
{"goal":"a.subset_eq(u)","proof":["a ⊆ a ∪ (b ∪ c)"]}
{"goal":"b.subset_eq(u)","proof":["not b ⊆ b ∪ c or not b ∪ c ⊆ a ∪ (b ∪ c) or b ⊆ a ∪ (b ∪ c)","b ∪ c ⊆ a ∪ (b ∪ c)","b ⊆ b ∪ c","not b ⊆ a ∪ (b ∪ c)","not b ∪ c ⊆ a ∪ (b ∪ c) or not b ⊆ b ∪ c"]}
{"goal":"c.subset_eq(u)","proof":["not c ⊆ b ∪ c or not b ∪ c ⊆ a ∪ (b ∪ c) or c ⊆ a ∪ (b ∪ c)","b ∪ c ⊆ a ∪ (b ∪ c)","c ⊆ b ∪ c","not c ⊆ a ∪ (b ∪ c)","not b ∪ c ⊆ a ∪ (b ∪ c) or not c ⊆ b ∪ c"]}
{"goal":"v.subset_eq(u)","proof":["not a ∪ b ⊆ u or not c ⊆ u or a ∪ b ∪ c ⊆ u","not a ⊆ u or not b ⊆ u or a ∪ b ⊆ u","not a ∪ b ∪ c ⊆ u","not a ⊆ u or a ∪ b ⊆ u","not a ∪ b ⊆ u","a ∪ b ⊆ u"]}
{"goal":"a.subset_eq(v)","proof":["not a ⊆ a ∪ b or not a ∪ b ⊆ a ∪ b ∪ c or a ⊆ a ∪ b ∪ c","a ∪ b ⊆ a ∪ b ∪ c","a ⊆ a ∪ b","not a ⊆ a ∪ b ∪ c","not a ∪ b ⊆ a ∪ b ∪ c or not a ⊆ a ∪ b"]}
{"goal":"b.subset_eq(v)","proof":["not b ⊆ a ∪ b or not a ∪ b ⊆ a ∪ b ∪ c or b ⊆ a ∪ b ∪ c","b ⊆ a ∪ b","a ∪ b ⊆ a ∪ b ∪ c","not b ⊆ a ∪ b ∪ c","not a ∪ b ⊆ a ∪ b ∪ c or not b ⊆ a ∪ b"]}
{"goal":"c.subset_eq(v)","proof":["c ⊆ a ∪ b ∪ c"]}
{"goal":"u.subset_eq(v)","proof":["not a ⊆ v or not b ∪ c ⊆ v or a ∪ (b ∪ c) ⊆ v","not b ⊆ v or not c ⊆ v or b ∪ c ⊆ v","not a ∪ (b ∪ c) ⊆ v","not b ⊆ v or b ∪ c ⊆ v","not b ∪ c ⊆ v","b ∪ c ⊆ v"]}
{"goal":"finite_union_assoc","proof":["a ∪ b ∪ c != u","v != u","not u ⊆ v or not v ⊆ u or v = u"]}
{"goal":"finite_union_idemp","proof":["not s ⊆ s or not s ⊆ s or s ∪ s ⊆ s","not s ∪ s ⊆ s or not s ⊆ s ∪ s or s ∪ s = s","s ⊆ s ∪ s","not s ∪ s ⊆ s","s ⊆ s"]}
{"goal":"finite_union_subset_is_set","proof":["not a ⊆ b or not b ⊆ b or a ∪ b ⊆ b","not a ∪ b ⊆ b or not b ⊆ a ∪ b or a ∪ b = b","b ⊆ a ∪ b","not a ∪ b ⊆ b","b ⊆ b"]}
{"goal":"a.intersection(b).subset_eq(a)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(a ∩ b, a) ∈ a or a ∩ b ⊆ a","s0(a ∩ b, a) ∈ a ∩ b or a ∩ b ⊆ a","not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or s0(a ∩ b, a) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = elem_in_finite_intersection(a, b, s0(a ∩ b, a))","FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = a ∩ b","not elem_in_finite_intersection(a, b, s0(a ∩ b, a)) or s0(a ∩ b, a) ∈ a","finite_constraint[T](elem_in_finite_intersection[T](a, b))","not s0(a ∩ b, a) ∈ a","s0(a ∩ b, a) ∈ a ∩ b","not s0(a ∩ b, a) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) or not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or elem_in_finite_intersection(a, b, s0(a ∩ b, a))","not elem_in_finite_intersection(a, b, s0(a ∩ b, a))","s0(a ∩ b, a) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b))"]}
{"goal":"a.intersection(b).subset_eq(b)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(a ∩ b, b) ∈ b or a ∩ b ⊆ b","s0(a ∩ b, b) ∈ a ∩ b or a ∩ b ⊆ b","not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or s0(a ∩ b, b) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = elem_in_finite_intersection(a, b, s0(a ∩ b, b))","FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = a ∩ b","not elem_in_finite_intersection(a, b, s0(a ∩ b, b)) or s0(a ∩ b, b) ∈ b","finite_constraint[T](elem_in_finite_intersection[T](a, b))","not s0(a ∩ b, b) ∈ b","s0(a ∩ b, b) ∈ a ∩ b","not s0(a ∩ b, b) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) or not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or elem_in_finite_intersection(a, b, s0(a ∩ b, b))","not elem_in_finite_intersection(a, b, s0(a ∩ b, b))","s0(a ∩ b, b) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b))"]}
{"goal":"finite_sets_subset_intersection","proof":["not a ∩ b ⊂ a"]}
{"goal":"finite_set_supset_contains_intersection","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(c, a ∩ b) ∈ a or not s0(c, a ∩ b) ∈ b or elem_in_finite_intersection(a, b, s0(c, a ∩ b))","not c ⊆ a or not s0(c, a ∩ b) ∈ c or s0(c, a ∩ b) ∈ a","not c ⊆ b or not s0(c, a ∩ b) ∈ c or s0(c, a ∩ b) ∈ b","not s0(c, a ∩ b) ∈ a ∩ b or c ⊆ a ∩ b","s0(c, a ∩ b) ∈ c or c ⊆ a ∩ b","not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or s0(c, a ∩ b) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = elem_in_finite_intersection(a, b, s0(c, a ∩ b))","FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = a ∩ b","a ∩ b ⊇ c = c ⊆ a ∩ b","a ⊇ c = c ⊆ a","b ⊇ c = c ⊆ b","not c ⊆ a ∩ b","c ⊆ b","c ⊆ a","finite_constraint[T](elem_in_finite_intersection[T](a, b))","s0(c, a ∩ b) ∈ c","not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or not elem_in_finite_intersection(a, b, s0(c, a ∩ b)) or s0(c, a ∩ b) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b))","not s0(c, a ∩ b) ∈ a ∩ b","not s0(c, a ∩ b) ∈ c or s0(c, a ∩ b) ∈ a","not s0(c, a ∩ b) ∈ c or s0(c, a ∩ b) ∈ b","s0(c, a ∩ b) ∈ b","s0(c, a ∩ b) ∈ a","not s0(c, a ∩ b) ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b))","not elem_in_finite_intersection(a, b, s0(c, a ∩ b))"]}
{"goal":"a.contains(x)","proof":["not x ∈ u or not u ⊆ a or x ∈ a","not x ∈ u or not u ⊆ a","not u ⊆ a","a ∩ b ⊆ a"]}
{"goal":"b.contains(x)","proof":["not x ∈ u or not u ⊆ b or x ∈ b","not x ∈ u or not u ⊆ b","not u ⊆ b","a ∩ b ⊆ b"]}
{"goal":"v.contains(x)","proof":["not x ∈ b or not x ∈ a or elem_in_finite_intersection(b, a, x)","not x ∈ b ∩ a","not finite_constraint[T](elem_in_finite_intersection[T](b, a)) or x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](b, a)) = elem_in_finite_intersection(b, a, x)","FiniteSet.new[T](elem_in_finite_intersection[T](b, a)) = b ∩ a","finite_constraint[T](elem_in_finite_intersection[T](b, a))","not finite_constraint[T](elem_in_finite_intersection[T](b, a)) or not elem_in_finite_intersection(b, a, x) or x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](b, a))","not x ∈ b or elem_in_finite_intersection(b, a, x)","elem_in_finite_intersection(b, a, x)","not x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](b, a))"]}
{"goal":"u.subset_eq(v)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: T, x2: FiniteSet[T]) { not x1 ∈ x0 or not x0 ⊆ x2 or x1 ∈ x2 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(u, v) ∈ u or s0(u, v) ∈ v","not s0(u, v) ∈ v or u ⊆ v","not s0(u, v) ∈ v","s0(u, v) ∈ u or u ⊆ v","not s0(u, v) ∈ u","s0(u, v) ∈ u"]}
{"goal":"a.contains(x)","proof":["not x ∈ v or not v ⊆ a or x ∈ a","not x ∈ v or not v ⊆ a","not v ⊆ a","b ∩ a ⊆ a"]}
{"goal":"b.contains(x)","proof":["not x ∈ v or not v ⊆ b or x ∈ b","not x ∈ v or not v ⊆ b","not v ⊆ b","b ∩ a ⊆ b"]}
{"goal":"u.contains(x)","proof":["not x ∈ a or not x ∈ b or elem_in_finite_intersection(a, b, x)","not x ∈ a ∩ b","not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = elem_in_finite_intersection(a, b, x)","FiniteSet.new[T](elem_in_finite_intersection[T](a, b)) = a ∩ b","finite_constraint[T](elem_in_finite_intersection[T](a, b))","not finite_constraint[T](elem_in_finite_intersection[T](a, b)) or not elem_in_finite_intersection(a, b, x) or x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b))","not x ∈ a or elem_in_finite_intersection(a, b, x)","elem_in_finite_intersection(a, b, x)","not x ∈ FiniteSet.new[T](elem_in_finite_intersection[T](a, b))"]}
{"goal":"u.superset_eq(v)","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: T, x2: FiniteSet[T]) { not x1 ∈ x0 or not x0 ⊆ x2 or x1 ∈ x2 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(v, u) ∈ v or s0(v, u) ∈ u","not s0(v, u) ∈ u or v ⊆ u","s0(v, u) ∈ v or v ⊆ u","u ⊇ v = v ⊆ u","not v ⊆ u","s0(v, u) ∈ v","not s0(v, u) ∈ u","s0(v, u) ∈ u"]}
{"goal":"finite_intersection_comm","proof":["a ∩ b != v","v != u","not v ⊆ u or not u ⊆ v or v = u","not v ⊆ u","u ⊇ v = v ⊆ u"]}
{"goal":"a.superset_eq(u)","proof":["a ⊇ u = u ⊆ a","not u ⊆ a","a ∩ (b ∩ c) ⊆ a"]}
{"goal":"b.superset_eq(b.intersection(c))","proof":["c ∩ b = b ∩ c","b ⊇ b ∩ c = b ∩ c ⊆ b","not b ∩ c ⊆ b","c ∩ b ⊆ b"]}
{"goal":"b.superset_eq(u)","proof":["not a ∩ (b ∩ c) ⊆ b ∩ c or not b ∩ c ⊆ b or a ∩ (b ∩ c) ⊆ b","b ⊇ a ∩ (b ∩ c) = a ∩ (b ∩ c) ⊆ b","b ⊇ b ∩ c = b ∩ c ⊆ b","b ∩ c ⊆ b","a ∩ (b ∩ c) ⊆ b ∩ c","not b ⊇ a ∩ (b ∩ c)","not a ∩ (b ∩ c) ⊆ b","not a ∩ (b ∩ c) ⊆ b ∩ c or a ∩ (b ∩ c) ⊆ b"]}
{"goal":"c.superset_eq(b.intersection(c))","proof":["c ⊇ b ∩ c = b ∩ c ⊆ c","not b ∩ c ⊆ c","b ∩ c ⊆ c"]}
{"goal":"c.superset_eq(u)","proof":["not a ∩ (b ∩ c) ⊆ b ∩ c or not b ∩ c ⊆ c or a ∩ (b ∩ c) ⊆ c","c ⊇ a ∩ (b ∩ c) = a ∩ (b ∩ c) ⊆ c","c ⊇ b ∩ c = b ∩ c ⊆ c","b ∩ c ⊆ c","a ∩ (b ∩ c) ⊆ b ∩ c","not c ⊇ a ∩ (b ∩ c)","not a ∩ (b ∩ c) ⊆ c","not a ∩ (b ∩ c) ⊆ b ∩ c or a ∩ (b ∩ c) ⊆ c"]}
{"goal":"v.superset_eq(u)","proof":["not a ∩ b ⊇ u or not c ⊇ u or a ∩ b ∩ c ⊇ u","not a ⊇ u or not b ⊇ u or a ∩ b ⊇ u","not a ∩ b ∩ c ⊇ u","not a ⊇ u or a ∩ b ⊇ u","not a ∩ b ⊇ u","a ∩ b ⊇ u"]}
{"goal":"a.superset_eq(a.intersection(b))","proof":["b ∩ a = a ∩ b","a ⊇ a ∩ b = a ∩ b ⊆ a","not a ∩ b ⊆ a","b ∩ a ⊆ a"]}
{"goal":"a.superset_eq(v)","proof":["not c ∩ (a ∩ b) ⊆ a ∩ b or not a ∩ b ⊆ a or c ∩ (a ∩ b) ⊆ a","a ∩ b ∩ c = c ∩ (a ∩ b)","a ⊇ a ∩ b = a ∩ b ⊆ a","a ⊇ c ∩ (a ∩ b) = c ∩ (a ∩ b) ⊆ a","a ∩ b ⊆ a","c ∩ (a ∩ b) ⊆ a ∩ b","not a ⊇ a ∩ b ∩ c","not a ⊇ c ∩ (a ∩ b)","not c ∩ (a ∩ b) ⊆ a","not c ∩ (a ∩ b) ⊆ a ∩ b or c ∩ (a ∩ b) ⊆ a"]}
{"goal":"b.superset_eq(a.intersection(b))","proof":["b ⊇ a ∩ b = a ∩ b ⊆ b","not a ∩ b ⊆ b","a ∩ b ⊆ b"]}
{"goal":"b.superset_eq(v)","proof":["not c ∩ (a ∩ b) ⊆ a ∩ b or not a ∩ b ⊆ b or c ∩ (a ∩ b) ⊆ b","a ∩ b ∩ c = c ∩ (a ∩ b)","b ⊇ a ∩ b = a ∩ b ⊆ b","b ⊇ c ∩ (a ∩ b) = c ∩ (a ∩ b) ⊆ b","a ∩ b ⊆ b","c ∩ (a ∩ b) ⊆ a ∩ b","not b ⊇ a ∩ b ∩ c","not b ⊇ c ∩ (a ∩ b)","not c ∩ (a ∩ b) ⊆ b","not c ∩ (a ∩ b) ⊆ a ∩ b or c ∩ (a ∩ b) ⊆ b"]}
{"goal":"c.superset_eq(v)","proof":["c ⊇ v = v ⊆ c","not v ⊆ c","a ∩ b ∩ c ⊆ c"]}
{"goal":"u.superset_eq(v)","proof":["not a ⊇ v or not b ∩ c ⊇ v or a ∩ (b ∩ c) ⊇ v","not b ⊇ v or not c ⊇ v or b ∩ c ⊇ v","not a ∩ (b ∩ c) ⊇ v","not b ⊇ v or b ∩ c ⊇ v","not b ∩ c ⊇ v","b ∩ c ⊇ v"]}
{"goal":"finite_intersection_assoc","proof":["a ∩ b ∩ c != u","v != u","not v ⊆ u or not u ⊆ v or v = u","u ⊇ v = v ⊆ u","v ⊇ u = u ⊆ v","u ⊆ v","v ⊆ u","not v ⊆ u"]}
{"goal":"finite_intersection_idemp","proof":["not s ⊇ s or not s ⊇ s or s ∩ s ⊇ s","not s ∩ s ⊆ s or not s ⊆ s ∩ s or s ∩ s = s","s ∩ s ⊇ s = s ⊆ s ∩ s","s ⊇ s = s ⊆ s","s ∩ s ⊆ s","not s ⊆ s ∩ s","s ⊆ s","not s ⊆ s or s ⊇ s","not s ∩ s ⊇ s","not s ⊇ s"]}
{"goal":"finite_intersection_with_superset_is_self","proof":["not s ⊇ s or not t ⊇ s or s ∩ t ⊇ s","not s ∩ t ⊆ s or not s ⊆ s ∩ t or s ∩ t = s","s ∩ t ⊇ s = s ⊆ s ∩ t","s ⊇ s = s ⊆ s","t ⊇ s = s ⊆ t","s ∩ t ⊆ s","not s ⊆ s ∩ t","s ⊆ s","t ⊇ s","not s ⊆ s or s ⊇ s","not s ∩ t ⊇ s","not s ⊇ s"]}
{"goal":"finite_difference_subset","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: FiniteSet[T], x2: T) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(a ∖ b, a) ∈ a or a ∖ b ⊆ a","s0(a ∖ b, a) ∈ a ∖ b or a ∖ b ⊆ a","not finite_constraint[T](elem_in_finite_difference[T](a, b)) or s0(a ∖ b, a) ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b)) = elem_in_finite_difference(a, b, s0(a ∖ b, a))","FiniteSet.new[T](elem_in_finite_difference[T](a, b)) = a ∖ b","not elem_in_finite_difference(a, b, s0(a ∖ b, a)) or s0(a ∖ b, a) ∈ a","finite_constraint[T](elem_in_finite_difference[T](a, b))","not s0(a ∖ b, a) ∈ a","s0(a ∖ b, a) ∈ a ∖ b","not s0(a ∖ b, a) ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b)) or not finite_constraint[T](elem_in_finite_difference[T](a, b)) or elem_in_finite_difference(a, b, s0(a ∖ b, a))","not elem_in_finite_difference(a, b, s0(a ∖ b, a))","s0(a ∖ b, a) ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b))"]}
{"goal":"finite_difference_contains_imp_not_contains","proof":["not finite_constraint[T](elem_in_finite_difference[T](a, b)) or x ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b)) = elem_in_finite_difference(a, b, x)","FiniteSet.new[T](elem_in_finite_difference[T](a, b)) = a ∖ b","not elem_in_finite_difference(a, b, x) or not x ∈ b","not elem_in_finite_difference(a, b, x)","finite_constraint[T](elem_in_finite_difference[T](a, b))","not x ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b)) or not finite_constraint[T](elem_in_finite_difference[T](a, b)) or elem_in_finite_difference(a, b, x)","x ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b))"]}
{"goal":"finite_difference_contains_imp_contains","proof":["not a ∖ b ⊆ a or not x ∈ a ∖ b or x ∈ a","not x ∈ a ∖ b or not a ∖ b ⊆ a","a ∖ b ⊆ a"]}
{"goal":"finite_difference_contains_of_membership","proof":["not x ∈ a or elem_in_finite_difference(a, b, x) or x ∈ b","not finite_constraint[T](elem_in_finite_difference[T](a, b)) or x ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b)) = elem_in_finite_difference(a, b, x)","FiniteSet.new[T](elem_in_finite_difference[T](a, b)) = a ∖ b","not x ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b))","finite_constraint[T](elem_in_finite_difference[T](a, b))","not finite_constraint[T](elem_in_finite_difference[T](a, b)) or not elem_in_finite_difference(a, b, x) or x ∈ FiniteSet.new[T](elem_in_finite_difference[T](a, b))","not x ∈ a or elem_in_finite_difference(a, b, x)","not elem_in_finite_difference(a, b, x)","elem_in_finite_difference(a, b, x)"]}
{"goal":"finite_difference_of_self_is_empty","proof":["let s0: (FiniteSet[T], FiniteSet[T]) -> T satisfy { forall(x0: FiniteSet[T], x1: T, x2: FiniteSet[T]) { not x1 ∈ x0 or not x0 ⊆ x2 or x1 ∈ x2 } and forall(x3: FiniteSet[T], x4: FiniteSet[T]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: FiniteSet[T], x6: FiniteSet[T]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(a ∖ a, FiniteSet.empty[T]) ∈ a ∖ a or s0(a ∖ a, FiniteSet.empty[T]) ∈ a","not s0(a ∖ a, FiniteSet.empty[T]) ∈ a ∖ a or not s0(a ∖ a, FiniteSet.empty[T]) ∈ a","not FiniteSet.empty[T] ⊆ a ∖ a or not a ∖ a ⊆ FiniteSet.empty[T] or a ∖ a = FiniteSet.empty[T]","s0(a ∖ a, FiniteSet.empty[T]) ∈ a ∖ a or a ∖ a ⊆ FiniteSet.empty[T]","FiniteSet.empty[T] ⊆ a ∖ a","not a ∖ a ⊆ FiniteSet.empty[T]","s0(a ∖ a, FiniteSet.empty[T]) ∈ a ∖ a","s0(a ∖ a, FiniteSet.empty[T]) ∈ a","not s0(a ∖ a, FiniteSet.empty[T]) ∈ a"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { a.contains(x0) implies k0.contains(x0) } and k0.length <= n1 }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_at_most(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_at_most(x4) or s0(x3, x4).length <= x4 } and forall(x5: List[T], x6: Nat, x7: FiniteSet[T]) { not x5.length <= x6 or s1(x7, x6, x5) ∈ x7 or x7.cardinality_at_most(x6) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { not s1(x9, x10, x8) ∈ x8 or not x8.length <= x10 or x9.cardinality_at_most(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { not x11.length <= n1 or s2(x11) ∈ a } and forall(x12: List[T]) { not x12.length <= n1 or not s2(x12) ∈ x12 } }","not s0(a, n1).length <= n1 or not s2(s0(a, n1)) ∈ s0(a, n1)","not s0(a, n1).length <= n1 or s2(s0(a, n1)) ∈ a","not a.cardinality_at_most(n1) or not s2(s0(a, n1)) ∈ a or s2(s0(a, n1)) ∈ s0(a, n1)","not a.cardinality_at_most(n1) or s0(a, n1).length <= n1","s0(a, n1).length <= n1","not s2(s0(a, n1)) ∈ a or s2(s0(a, n1)) ∈ s0(a, n1)","s2(s0(a, n1)) ∈ a","not s2(s0(a, n1)) ∈ s0(a, n1)","s2(s0(a, n1)) ∈ s0(a, n1)"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { b.contains(x0) implies k0.contains(x0) } and k0.length <= n2 }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_at_most(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_at_most(x4) or s0(x3, x4).length <= x4 } and forall(x5: List[T], x6: Nat, x7: FiniteSet[T]) { not x5.length <= x6 or s1(x7, x6, x5) ∈ x7 or x7.cardinality_at_most(x6) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { not s1(x9, x10, x8) ∈ x8 or not x8.length <= x10 or x9.cardinality_at_most(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { not x11.length <= n2 or s2(x11) ∈ b } and forall(x12: List[T]) { not x12.length <= n2 or not s2(x12) ∈ x12 } }","not s0(b, n2).length <= n2 or not s2(s0(b, n2)) ∈ s0(b, n2)","not s0(b, n2).length <= n2 or s2(s0(b, n2)) ∈ b","not b.cardinality_at_most(n2) or not s2(s0(b, n2)) ∈ b or s2(s0(b, n2)) ∈ s0(b, n2)","not b.cardinality_at_most(n2) or s0(b, n2).length <= n2","s0(b, n2).length <= n2","not s2(s0(b, n2)) ∈ b or s2(s0(b, n2)) ∈ s0(b, n2)","s2(s0(b, n2)) ∈ b","not s2(s0(b, n2)) ∈ s0(b, n2)","s2(s0(b, n2)) ∈ s0(b, n2)"]}
{"goal":"a.union(b).contains(x) implies superset_union.contains(x)","proof":["not x ∈ b or x ∈ superset_b","not x ∈ a or x ∈ superset_a","not elem_in_finite_union(a, b, x) or x ∈ a or x ∈ b","not x ∈ superset_a + superset_b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) = elem_in_finite_union(a, b, x)","not x ∈ superset_b or x ∈ superset_a + superset_b","not x ∈ superset_a or x ∈ superset_a + superset_b","FiniteSet.new[T](elem_in_finite_union[T](a, b)) = a ∪ b","finite_constraint[T](elem_in_finite_union[T](a, b))","not x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) or not finite_constraint[T](elem_in_finite_union[T](a, b)) or elem_in_finite_union(a, b, x)","x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))","not x ∈ superset_a","not x ∈ superset_b","not x ∈ b","not x ∈ a","elem_in_finite_union(a, b, x)"]}
{"goal":"superset_union.length = superset_a.length + superset_b.length","proof":["superset_a.length + superset_b.length = (superset_a + superset_b).length"]}
{"goal":"superset_union.length <= n1 + n2","proof":["not superset_a.length <= n1 or not superset_b.length <= n2 or superset_a.length + superset_b.length <= n1 + n2","not superset_a.length + superset_b.length <= n1 + n2"]}
{"goal":"union_is_at_most_length","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_at_most(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_at_most(x4) or s0(x3, x4).length <= x4 } and forall(x5: List[T], x6: Nat, x7: FiniteSet[T]) { not x5.length <= x6 or s1(x7, x6, x5) ∈ x7 or x7.cardinality_at_most(x6) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { not s1(x9, x10, x8) ∈ x8 or not x8.length <= x10 or x9.cardinality_at_most(x10) } }","not s1(a ∪ b, n1 + n2, superset_union) ∈ a ∪ b or s1(a ∪ b, n1 + n2, superset_union) ∈ superset_union","not s1(a ∪ b, n1 + n2, superset_union) ∈ superset_union or not superset_union.length <= n1 + n2 or (a ∪ b).cardinality_at_most(n1 + n2)","not superset_union.length <= n1 + n2 or s1(a ∪ b, n1 + n2, superset_union) ∈ a ∪ b or (a ∪ b).cardinality_at_most(n1 + n2)","not s1(a ∪ b, n1 + n2, superset_union) ∈ superset_union or not superset_union.length <= n1 + n2","not superset_union.length <= n1 + n2 or s1(a ∪ b, n1 + n2, superset_union) ∈ a ∪ b","not s1(a ∪ b, n1 + n2, superset_union) ∈ superset_union","s1(a ∪ b, n1 + n2, superset_union) ∈ a ∪ b","not s1(a ∪ b, n1 + n2, superset_union) ∈ a ∪ b"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { a.contains(x0) implies k0.contains(x0) } and k0.filter(a.contains).unique.length = n1 }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_is(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_is(x4) or s0(x3, x4).filter(x3.contains).unique.length = x4 } and forall(x5: List[T], x6: FiniteSet[T], x7: Nat) { x5.filter(x6.contains).unique.length != x7 or s1(x6, x7, x5) ∈ x6 or x6.cardinality_is(x7) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { x8.filter(x9.contains).unique.length != x10 or not s1(x9, x10, x8) ∈ x8 or x9.cardinality_is(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { x11.filter(a.contains).unique.length != n1 or s2(x11) ∈ a } and forall(x12: List[T]) { x12.filter(a.contains).unique.length != n1 or not s2(x12) ∈ x12 } }","s0(a, n1).filter(a.contains).unique.length != n1 or not s2(s0(a, n1)) ∈ s0(a, n1)","s0(a, n1).filter(a.contains).unique.length != n1 or s2(s0(a, n1)) ∈ a","not a.cardinality_is(n1) or s0(a, n1).filter(a.contains).unique.length = n1","not a.cardinality_is(n1) or not s2(s0(a, n1)) ∈ a or s2(s0(a, n1)) ∈ s0(a, n1)","not s2(s0(a, n1)) ∈ a or s2(s0(a, n1)) ∈ s0(a, n1)","s0(a, n1).filter(a.contains).unique.length = n1","s2(s0(a, n1)) ∈ a","not s2(s0(a, n1)) ∈ s0(a, n1)","s2(s0(a, n1)) ∈ s0(a, n1)"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { b.contains(x0) implies k0.contains(x0) } and k0.filter(b.contains).unique.length = n2 }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_is(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_is(x4) or s0(x3, x4).filter(x3.contains).unique.length = x4 } and forall(x5: List[T], x6: FiniteSet[T], x7: Nat) { x5.filter(x6.contains).unique.length != x7 or s1(x6, x7, x5) ∈ x6 or x6.cardinality_is(x7) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { x8.filter(x9.contains).unique.length != x10 or not s1(x9, x10, x8) ∈ x8 or x9.cardinality_is(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { x11.filter(b.contains).unique.length != n2 or s2(x11) ∈ b } and forall(x12: List[T]) { x12.filter(b.contains).unique.length != n2 or not s2(x12) ∈ x12 } }","s0(b, n2).filter(b.contains).unique.length != n2 or not s2(s0(b, n2)) ∈ s0(b, n2)","s0(b, n2).filter(b.contains).unique.length != n2 or s2(s0(b, n2)) ∈ b","not b.cardinality_is(n2) or s0(b, n2).filter(b.contains).unique.length = n2","not b.cardinality_is(n2) or not s2(s0(b, n2)) ∈ b or s2(s0(b, n2)) ∈ s0(b, n2)","not s2(s0(b, n2)) ∈ b or s2(s0(b, n2)) ∈ s0(b, n2)","s0(b, n2).filter(b.contains).unique.length = n2","s2(s0(b, n2)) ∈ b","not s2(s0(b, n2)) ∈ s0(b, n2)","s2(s0(b, n2)) ∈ s0(b, n2)"]}
{"goal":"list_union.length = n1 + n2","proof":["f_list_a.length + f_list_b.length = (f_list_a + f_list_b).length"]}
{"goal":"f_list_a.contains(x) implies list_union.contains(x)","proof":["not x ∈ f_list_a + f_list_b","not x ∈ f_list_a or x ∈ f_list_a + f_list_b"]}
{"goal":"a.contains(x) implies list_union.contains(x)","proof":["not x ∈ a or x ∈ list_a","not x ∈ list_a or not x ∈ a or x ∈ list_a.filter(a.contains)","x ∈ list_a.filter(a.contains).unique = x ∈ list_a.filter(a.contains)","not x ∈ list_a.filter(a.contains).unique","x ∈ list_a","not x ∈ list_a.filter(a.contains)"]}
{"goal":"f_list_b.contains(x) implies list_union.contains(x)","proof":["not x ∈ f_list_a + f_list_b","not x ∈ f_list_b or x ∈ f_list_a + f_list_b"]}
{"goal":"b.contains(x) implies list_union.contains(x)","proof":["not x ∈ b or x ∈ list_b","not x ∈ list_b or not x ∈ b or x ∈ list_b.filter(b.contains)","x ∈ list_b.filter(b.contains).unique = x ∈ list_b.filter(b.contains)","not x ∈ list_b.filter(b.contains).unique","x ∈ list_b","not x ∈ list_b.filter(b.contains)"]}
{"goal":"a.union(b).contains(x) implies list_union.contains(x)","proof":["not elem_in_finite_union(a, b, x) or x ∈ a or x ∈ b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) = elem_in_finite_union(a, b, x)","FiniteSet.new[T](elem_in_finite_union[T](a, b)) = a ∪ b","finite_constraint[T](elem_in_finite_union[T](a, b))","not elem_in_finite_union(a, b, x) or x ∈ a","not elem_in_finite_union(a, b, x)","not x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) or not finite_constraint[T](elem_in_finite_union[T](a, b)) or elem_in_finite_union(a, b, x)","x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))"]}
{"goal":"not b.contains(x)","proof":["not a.is_disjoint(b) or not x ∈ a or not x ∈ b","not a.is_disjoint(b) or not x ∈ a"]}
{"goal":"a.union(b).contains(x) = list_union.contains(x)","proof":["not x ∈ a ∪ b or x ∈ list_union","not a ⊆ a ∪ FiniteSet.new[T](b.contains) or not x ∈ a or x ∈ a ∪ FiniteSet.new[T](b.contains)","not a ⊆ a ∪ b or not x ∈ a or x ∈ a ∪ b","a ⊆ a ∪ FiniteSet.new[T](b.contains)","a ⊆ a ∪ b","FiniteSet.new[T](b.contains) = b","x ∈ a ∪ FiniteSet.new[T](b.contains) != x ∈ list_union","not a ⊆ a ∪ FiniteSet.new[T](b.contains) or x ∈ a ∪ FiniteSet.new[T](b.contains)","not a ⊆ a ∪ b or x ∈ a ∪ b","x ∈ a ∪ FiniteSet.new[T](b.contains)","x ∈ a ∪ b","not x ∈ list_union","x ∈ list_union"]}
{"goal":"not a.contains(x)","proof":[]}
{"goal":"list_union.contains(x) implies b.contains(x)","proof":[]}
{"goal":"a.union(b).contains(x) = list_union.contains(x)","proof":["not x ∈ a ∪ b or x ∈ list_union","x ∈ a ∪ b or x ∈ list_union","not b ⊆ b ∪ a or not x ∈ b or x ∈ b ∪ a","b ∪ a = a ∪ b","b ⊆ b ∪ a","x ∈ b ∪ a != x ∈ list_union","not b ⊆ b ∪ a or x ∈ b ∪ a","x ∈ b ∪ a","not x ∈ list_union","x ∈ a ∪ b","not x ∈ a ∪ b"]}
{"goal":"not a.union(b).contains(x)","proof":["not elem_in_finite_union(a, b, x) or x ∈ a or x ∈ b","not finite_constraint[T](elem_in_finite_union[T](a, b)) or x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) = elem_in_finite_union(a, b, x)","FiniteSet.new[T](elem_in_finite_union[T](a, b)) = a ∪ b","x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b))","finite_constraint[T](elem_in_finite_union[T](a, b))","not x ∈ FiniteSet.new[T](elem_in_finite_union[T](a, b)) or not finite_constraint[T](elem_in_finite_union[T](a, b)) or elem_in_finite_union(a, b, x)","not elem_in_finite_union(a, b, x) or x ∈ a","elem_in_finite_union(a, b, x)","not elem_in_finite_union(a, b, x)"]}
{"goal":"not f_list_a.contains(x)","proof":["not x ∈ list_a.filter(a.contains) or x ∈ a","x ∈ list_a.filter(a.contains).unique = x ∈ list_a.filter(a.contains)","x ∈ list_a.filter(a.contains).unique","x ∈ list_a.filter(a.contains)"]}
{"goal":"not f_list_b.contains(x)","proof":["not x ∈ list_b.filter(b.contains) or x ∈ b","x ∈ list_b.filter(b.contains).unique = x ∈ list_b.filter(b.contains)","x ∈ list_b.filter(b.contains).unique","x ∈ list_b.filter(b.contains)"]}
{"goal":"a.union(b).contains(x) = list_union.contains(x)","proof":["x ∈ list_union","not x ∈ f_list_a + f_list_b or x ∈ f_list_a or x ∈ f_list_b","x ∈ f_list_a + f_list_b"]}
{"goal":"a.union(b).contains(x) = list_union.contains(x)","proof":["not x ∈ a ∪ b or x ∈ list_union","not a ⊂ a ∪ FiniteSet.new[T](b.contains) or not x ∈ a or x ∈ a ∪ FiniteSet.new[T](b.contains)","not a ⊂ a ∪ b or not x ∈ a or x ∈ a ∪ b","a ⊂ a ∪ FiniteSet.new[T](b.contains)","a ⊂ a ∪ b","FiniteSet.new[T](b.contains) = b","x ∈ a ∪ FiniteSet.new[T](b.contains) != x ∈ list_union","not a ⊂ a ∪ FiniteSet.new[T](b.contains) or x ∈ a ∪ FiniteSet.new[T](b.contains)","not a ⊂ a ∪ b or x ∈ a ∪ b","x ∈ a ∪ FiniteSet.new[T](b.contains)","x ∈ a ∪ b","not x ∈ list_union","x ∈ list_union"]}
{"goal":"a.union(b).contains = list_union.contains","proof":["let s0: T satisfy { s0 ∈ a ∪ b != s0 ∈ list_union }","s0 ∈ a ∪ b = s0 ∈ list_union"]}
{"goal":"f_list_a.is_unique","proof":["not list_a.filter(a.contains).unique.is_unique","list_a.filter(a.contains).unique.unique = list_a.filter(a.contains).unique","list_a.filter(a.contains).unique.unique != list_a.filter(a.contains).unique or list_a.filter(a.contains).unique.is_unique"]}
{"goal":"f_list_b.is_unique","proof":["not list_b.filter(b.contains).unique.is_unique","list_b.filter(b.contains).unique.unique = list_b.filter(b.contains).unique","list_b.filter(b.contains).unique.unique != list_b.filter(b.contains).unique or list_b.filter(b.contains).unique.is_unique"]}
{"goal":"not (f_list_a.contains(x) and f_list_b.contains(x))","proof":["not a.is_disjoint(b) or not x ∈ a or not x ∈ b","not x ∈ list_b.filter(b.contains) or x ∈ b","not x ∈ list_a.filter(a.contains) or x ∈ a","x ∈ list_a.filter(a.contains).unique = x ∈ list_a.filter(a.contains)","x ∈ list_b.filter(b.contains).unique = x ∈ list_b.filter(b.contains)","x ∈ list_a.filter(a.contains).unique","x ∈ list_b.filter(b.contains).unique","x ∈ list_b.filter(b.contains)","x ∈ list_a.filter(a.contains)","not x ∈ b or not x ∈ a","x ∈ a","x ∈ b","not x ∈ b"]}
{"goal":"(f_list_a + f_list_b).is_unique","proof":["let s0: (List[T], List[T]) -> T satisfy { forall(x0: List[T], x1: List[T]) { not x0.is_unique or not x1.is_unique or s0(x0, x1) ∈ x0 or (x0 + x1).is_unique } and forall(x2: List[T], x3: List[T]) { not x2.is_unique or not x3.is_unique or s0(x2, x3) ∈ x3 or (x2 + x3).is_unique } }","not s0(f_list_a, f_list_b) ∈ f_list_b or not s0(f_list_a, f_list_b) ∈ f_list_a","not f_list_a.is_unique or not f_list_b.is_unique or s0(f_list_a, f_list_b) ∈ f_list_b or (f_list_a + f_list_b).is_unique","not f_list_a.is_unique or not f_list_b.is_unique or s0(f_list_a, f_list_b) ∈ f_list_a or (f_list_a + f_list_b).is_unique","s0(f_list_a, f_list_b) ∈ f_list_a","s0(f_list_a, f_list_b) ∈ f_list_b","not s0(f_list_a, f_list_b) ∈ f_list_b"]}
{"goal":"list_union.is_unique","proof":[]}
{"goal":"list_union.filter(a.union(b).contains).unique.length = n1 + n2","proof":["list_union.filter((a ∪ b).contains).unique.length != list_union.length","list_union.filter(list_union.contains).unique.length != list_union.length","list_union.filter(list_union.contains).unique != list_union","list_union.filter(list_union.contains) = list_union","list_union.unique != list_union","not list_union.is_unique or list_union.unique = list_union"]}
{"goal":"disjoint_union_is_length","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_is(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_is(x4) or s0(x3, x4).filter(x3.contains).unique.length = x4 } and forall(x5: List[T], x6: FiniteSet[T], x7: Nat) { x5.filter(x6.contains).unique.length != x7 or s1(x6, x7, x5) ∈ x6 or x6.cardinality_is(x7) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { x8.filter(x9.contains).unique.length != x10 or not s1(x9, x10, x8) ∈ x8 or x9.cardinality_is(x10) } }","s1(a ∪ b, n1 + n2, list_union) ∈ a ∪ b = s1(a ∪ b, n1 + n2, list_union) ∈ list_union","list_union.filter((a ∪ b).contains).unique.length != n1 + n2 or not s1(a ∪ b, n1 + n2, list_union) ∈ list_union or (a ∪ b).cardinality_is(n1 + n2)","list_union.filter((a ∪ b).contains).unique.length != n1 + n2 or s1(a ∪ b, n1 + n2, list_union) ∈ a ∪ b or (a ∪ b).cardinality_is(n1 + n2)","not s1(a ∪ b, n1 + n2, list_union) ∈ list_union","s1(a ∪ b, n1 + n2, list_union) ∈ a ∪ b","not s1(a ∪ b, n1 + n2, list_union) ∈ a ∪ b"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { s.contains(x0) implies k0.contains(x0) } and k0.filter(s.contains).unique.length = n1 }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_is(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_is(x4) or s0(x3, x4).filter(x3.contains).unique.length = x4 } and forall(x5: List[T], x6: FiniteSet[T], x7: Nat) { x5.filter(x6.contains).unique.length != x7 or s1(x6, x7, x5) ∈ x6 or x6.cardinality_is(x7) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { x8.filter(x9.contains).unique.length != x10 or not s1(x9, x10, x8) ∈ x8 or x9.cardinality_is(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { x11.filter(s.contains).unique.length != n1 or s2(x11) ∈ s } and forall(x12: List[T]) { x12.filter(s.contains).unique.length != n1 or not s2(x12) ∈ x12 } }","s0(s, n1).filter(s.contains).unique.length != n1 or not s2(s0(s, n1)) ∈ s0(s, n1)","s0(s, n1).filter(s.contains).unique.length != n1 or s2(s0(s, n1)) ∈ s","not s.cardinality_is(n1) or s0(s, n1).filter(s.contains).unique.length = n1","not s.cardinality_is(n1) or not s2(s0(s, n1)) ∈ s or s2(s0(s, n1)) ∈ s0(s, n1)","not s2(s0(s, n1)) ∈ s or s2(s0(s, n1)) ∈ s0(s, n1)","s0(s, n1).filter(s.contains).unique.length = n1","s2(s0(s, n1)) ∈ s","not s2(s0(s, n1)) ∈ s0(s, n1)","s2(s0(s, n1)) ∈ s0(s, n1)"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { s.contains(x0) implies k0.contains(x0) } and k0.filter(s.contains).unique.length = n2 }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_is(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_is(x4) or s0(x3, x4).filter(x3.contains).unique.length = x4 } and forall(x5: List[T], x6: FiniteSet[T], x7: Nat) { x5.filter(x6.contains).unique.length != x7 or s1(x6, x7, x5) ∈ x6 or x6.cardinality_is(x7) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { x8.filter(x9.contains).unique.length != x10 or not s1(x9, x10, x8) ∈ x8 or x9.cardinality_is(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { x11.filter(s.contains).unique.length != n2 or s2(x11) ∈ s } and forall(x12: List[T]) { x12.filter(s.contains).unique.length != n2 or not s2(x12) ∈ x12 } }","s0(s, n2).filter(s.contains).unique.length != n2 or not s2(s0(s, n2)) ∈ s0(s, n2)","s0(s, n2).filter(s.contains).unique.length != n2 or s2(s0(s, n2)) ∈ s","not s.cardinality_is(n2) or s0(s, n2).filter(s.contains).unique.length = n2","not s.cardinality_is(n2) or not s2(s0(s, n2)) ∈ s or s2(s0(s, n2)) ∈ s0(s, n2)","not s2(s0(s, n2)) ∈ s or s2(s0(s, n2)) ∈ s0(s, n2)","s0(s, n2).filter(s.contains).unique.length = n2","s2(s0(s, n2)) ∈ s","not s2(s0(s, n2)) ∈ s0(s, n2)","s2(s0(s, n2)) ∈ s0(s, n2)"]}
{"goal":"f_list_1.contains(x)","proof":["not x ∈ s or x ∈ list_1","not x ∈ list_1 or not x ∈ s or x ∈ list_1.filter(s.contains)","x ∈ list_1.filter(s.contains).unique = x ∈ list_1.filter(s.contains)","not x ∈ list_1.filter(s.contains).unique","x ∈ list_1","not x ∈ list_1.filter(s.contains)"]}
{"goal":"f_list_2.contains(x)","proof":["not x ∈ s or x ∈ list_2","not x ∈ list_2 or not x ∈ s or x ∈ list_2.filter(s.contains)","x ∈ list_2.filter(s.contains).unique = x ∈ list_2.filter(s.contains)","not x ∈ list_2.filter(s.contains).unique","x ∈ list_2","not x ∈ list_2.filter(s.contains)"]}
{"goal":"f_list_1.contains(x) = f_list_2.contains(x)","proof":["not x ∈ f_list_1"]}
{"goal":"not f_list_1.contains(x)","proof":["not x ∈ list_1.filter(s.contains) or x ∈ s","x ∈ list_1.filter(s.contains).unique = x ∈ list_1.filter(s.contains)","x ∈ list_1.filter(s.contains).unique","x ∈ list_1.filter(s.contains)"]}
{"goal":"not f_list_2.contains(x)","proof":["not x ∈ list_2.filter(s.contains) or x ∈ s","x ∈ list_2.filter(s.contains).unique = x ∈ list_2.filter(s.contains)","x ∈ list_2.filter(s.contains).unique","x ∈ list_2.filter(s.contains)"]}
{"goal":"f_list_1.contains(x) = f_list_2.contains(x)","proof":["x ∈ f_list_1"]}
{"goal":"f_list_1.unique.length <= f_list_2.unique.length","proof":["let s0: (List[T], List[T]) -> T satisfy { forall(x0: List[T], x1: List[T]) { x0.unique.length <= x1.length or s0(x0, x1) ∈ x0 } and forall(x2: List[T], x3: List[T]) { not s0(x3, x2) ∈ x2 or x3.unique.length <= x2.length } }","s0(f_list_1, f_list_2.unique) ∈ f_list_2 = s0(f_list_1, f_list_2.unique) ∈ f_list_1","not s0(f_list_1, f_list_2.unique) ∈ f_list_2.unique or f_list_1.unique.length <= f_list_2.unique.length","f_list_1.unique.length <= f_list_2.unique.length or s0(f_list_1, f_list_2.unique) ∈ f_list_1","s0(f_list_1, f_list_2.unique) ∈ f_list_1","list_2.filter(s.contains).unique.unique = list_2.filter(s.contains).unique","not s0(f_list_1, f_list_2.unique) ∈ f_list_2.unique"]}
{"goal":"f_list_2.unique.length <= f_list_1.unique.length","proof":["let s0: (List[T], List[T]) -> T satisfy { forall(x0: List[T], x1: List[T]) { x0.unique.length <= x1.length or s0(x0, x1) ∈ x0 } and forall(x2: List[T], x3: List[T]) { not s0(x3, x2) ∈ x2 or x3.unique.length <= x2.length } }","s0(f_list_2, f_list_1.unique) ∈ f_list_2 = s0(f_list_2, f_list_1.unique) ∈ f_list_1","not s0(f_list_2, f_list_1.unique) ∈ f_list_1.unique or f_list_2.unique.length <= f_list_1.unique.length","f_list_2.unique.length <= f_list_1.unique.length or s0(f_list_2, f_list_1.unique) ∈ f_list_2","s0(f_list_2, f_list_1.unique) ∈ f_list_2","list_1.filter(s.contains).unique.unique = list_1.filter(s.contains).unique","not s0(f_list_2, f_list_1.unique) ∈ f_list_1.unique"]}
{"goal":"cardinality_is_well_defined","proof":["not f_list_2.unique.length <= f_list_1.unique.length or not f_list_1.unique.length <= f_list_2.unique.length or f_list_2.unique.length = f_list_1.unique.length","list_1.filter(s.contains).unique.unique = list_1.filter(s.contains).unique","list_2.filter(s.contains).unique.unique = list_2.filter(s.contains).unique","f_list_2.unique.length = f_list_1.unique.length"]}
{"goal":"exists(k0: List[T]) { forall(x0: T) { s.contains(x0) implies k0.contains(x0) } and k0.filter(s.contains).unique.length = n }","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_is(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_is(x4) or s0(x3, x4).filter(x3.contains).unique.length = x4 } and forall(x5: List[T], x6: FiniteSet[T], x7: Nat) { x5.filter(x6.contains).unique.length != x7 or s1(x6, x7, x5) ∈ x6 or x6.cardinality_is(x7) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { x8.filter(x9.contains).unique.length != x10 or not s1(x9, x10, x8) ∈ x8 or x9.cardinality_is(x10) } }","let s2: List[T] -> T satisfy { forall(x11: List[T]) { x11.filter(s.contains).unique.length != n or s2(x11) ∈ s } and forall(x12: List[T]) { x12.filter(s.contains).unique.length != n or not s2(x12) ∈ x12 } }","s0(s, n).filter(s.contains).unique.length != n or not s2(s0(s, n)) ∈ s0(s, n)","s0(s, n).filter(s.contains).unique.length != n or s2(s0(s, n)) ∈ s","not s.cardinality_is(n) or s0(s, n).filter(s.contains).unique.length = n","not s.cardinality_is(n) or not s2(s0(s, n)) ∈ s or s2(s0(s, n)) ∈ s0(s, n)","not s2(s0(s, n)) ∈ s or s2(s0(s, n)) ∈ s0(s, n)","s0(s, n).filter(s.contains).unique.length = n","s2(s0(s, n)) ∈ s","not s2(s0(s, n)) ∈ s0(s, n)","s2(s0(s, n)) ∈ s0(s, n)"]}
{"goal":"s.contains(x) implies f_containing_list.contains(x)","proof":["not x ∈ s or x ∈ containing_list","not x ∈ containing_list or not x ∈ s or x ∈ containing_list.filter(s.contains)","x ∈ containing_list.filter(s.contains).unique = x ∈ containing_list.filter(s.contains)","not x ∈ containing_list.filter(s.contains).unique","x ∈ containing_list","not x ∈ containing_list.filter(s.contains)"]}
{"goal":"f_containing_list.length <= n","proof":["n <= f_containing_list.length or f_containing_list.length <= n","n <= f_containing_list.length"]}
{"goal":"s.cardinality_at_most(n)","proof":["let (s0: (FiniteSet[T], Nat) -> List[T], s1: (FiniteSet[T], Nat, List[T]) -> T) satisfy { forall(x0: FiniteSet[T], x1: Nat, x2: T) { not x0.cardinality_at_most(x1) or not x2 ∈ x0 or x2 ∈ s0(x0, x1) } and forall(x3: FiniteSet[T], x4: Nat) { not x3.cardinality_at_most(x4) or s0(x3, x4).length <= x4 } and forall(x5: List[T], x6: Nat, x7: FiniteSet[T]) { not x5.length <= x6 or s1(x7, x6, x5) ∈ x7 or x7.cardinality_at_most(x6) } and forall(x8: List[T], x9: FiniteSet[T], x10: Nat) { not s1(x9, x10, x8) ∈ x8 or not x8.length <= x10 or x9.cardinality_at_most(x10) } }","not s1(s, n, f_containing_list) ∈ s or s1(s, n, f_containing_list) ∈ f_containing_list","not s1(s, n, f_containing_list) ∈ f_containing_list or not f_containing_list.length <= n or s.cardinality_at_most(n)","not f_containing_list.length <= n or s1(s, n, f_containing_list) ∈ s or s.cardinality_at_most(n)","not f_containing_list.length <= n or s1(s, n, f_containing_list) ∈ s","s1(s, n, f_containing_list) ∈ s","not s1(s, n, f_containing_list) ∈ f_containing_list or not f_containing_list.length <= n","s1(s, n, f_containing_list) ∈ f_containing_list","not s1(s, n, f_containing_list) ∈ f_containing_list"]}
{"goal":"cardinality_is_smallest_cardinality","proof":[]}
